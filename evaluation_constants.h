//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 114, 160), S( 456, 431), S( 463, 440), S( 635, 802), S(1414,1446), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59),
                S( 126, 130), S( 109, 124), S(  57, 123), S(  99,  74), S(  32, 103), S( 103, 100), S( -28, 152), S( -24, 158),
                S( -11,  52), S(  10,  39), S(  27,  14), S(  28, -11), S(  39, -12), S(  52,  12), S(  24,  26), S( -20,  46),
                S( -16,  19), S(   8,  -2), S(   0,  -6), S(  15, -27), S(  17, -15), S(   7,  -4), S(   7,   1), S( -44,  15),
                S( -19,   6), S( -11,  -3), S(  -4, -16), S(   8, -19), S(   6, -16), S(   7, -14), S( -12,  -5), S( -44,   2),
                S( -22,  -5), S(  -6, -13), S(  -6, -15), S(   0, -16), S(  11,  -3), S(   3, -12), S(  16, -19), S( -31,  -6),
                S( -25,   7), S(  -8,  -7), S( -21,   8), S( -10,  -7), S( -12,  13), S(  17, -10), S(  21, -13), S( -32,   1),
                S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59), S( -28, -59)
        },
        {
                S(-243, -57), S(-143, -22), S( -90,  14), S(  -7, -17), S(  65, -18), S(-168,   7), S( -20, -67), S(-158,-107),
                S( -43, -22), S( -51,   8), S(  22,  -2), S(  16,  32), S(  20,  20), S(  31,  -6), S( -35,  -7), S( -24, -35),
                S( -38, -18), S(  18,   9), S(  48,  32), S(  74,  36), S(  89,  17), S( 110,  18), S(  59,   1), S(  43, -42),
                S(  13,  -3), S(  33,  33), S(  46,  47), S(  69,  55), S(  49,  60), S(  66,  49), S(  38,  33), S(  39,   5),
                S(  -5,   5), S(  12,  15), S(  36,  43), S(  42,  55), S(  48,  48), S(  42,  45), S(  54,  23), S(   6,   7),
                S( -17, -47), S(   1,   0), S(  20,   8), S(  24,  31), S(  38,  22), S(  29,   2), S(  27, -10), S(  -6,  -3),
                S( -44, -41), S( -23, -10), S(  -1, -19), S(  15,  14), S(  11,  25), S(  16, -17), S(   6, -13), S(   6, -41),
                S(-111, -45), S( -24, -37), S( -32, -10), S( -21,   4), S(  -5, -11), S(  -5,  -5), S( -20, -21), S( -46, -72)
        },
        {
                S( -65,   0), S(  -9,  -3), S(-112,  14), S( -87,  12), S( -99,  18), S(-124,  13), S( -34,   4), S(  24, -20),
                S( -38,   8), S( -11,   6), S( -16,  11), S( -40,  10), S( -30,  15), S(  -2,   8), S( -24,   4), S( -67,   7),
                S(  10,   0), S(  18,   9), S(  39,   3), S(  13,   8), S(  20,   4), S(  34,  19), S(  39,  15), S(   9,  15),
                S( -17,   4), S(   9,  22), S(  -1,  21), S(  45,  13), S(  22,  16), S(  19,  10), S(  -3,  28), S( -10,  17),
                S(  -4,  -6), S(   5,   7), S(  12,  12), S(  27,  15), S(  40,   0), S(  -1,  15), S(  10,  -1), S(  13, -15),
                S(  -2, -16), S(  23,  -4), S(  20,   0), S(  17,   0), S(  16,  17), S(  29,  -5), S(  27,  -7), S(  23, -21),
                S(   9, -29), S(  26, -33), S(  32, -21), S(  15,  -9), S(  23, -12), S(  23, -24), S(  49,  -7), S(  21, -42),
                S(  32, -58), S(  13, -25), S(  -2,   8), S(   5,  -6), S(  -9,  -6), S(  -2,   5), S(  -9,   0), S(   8, -44)
        },
        {
                S(   9,  18), S(  12,  19), S( -23,  26), S( -24,  28), S(   8,  16), S(   1,  18), S( -30,  23), S(  59,   8),
                S(   6,  14), S(  -2,  19), S(  30,   9), S(  42,   9), S(  32,   5), S(  53,  -6), S(   4,  13), S(  26,   4),
                S( -17,  11), S(  21,   0), S(  34,  -3), S(  39,  -7), S(  43, -12), S(  72,  -9), S(  95, -20), S(  41, -19),
                S( -15,   9), S(   0,   1), S(  19,   5), S(  38,  -6), S(  21,   1), S(  44,  -6), S(  -3,   1), S(   3,   1),
                S( -42,  11), S( -36,  14), S( -25,   9), S( -13,   9), S( -11,   4), S(   2,  -9), S(   7,  -7), S( -15,  -8),
                S( -47,  -4), S( -28,  -2), S( -32,  -2), S( -20,  -2), S( -21,   0), S(  -8, -15), S(   6, -11), S( -27, -17),
                S( -57,  -5), S( -28, -11), S( -35,   1), S( -22,  -8), S( -14, -10), S(  -3, -20), S(   1, -25), S( -85,   2),
                S( -24,   2), S( -19,  -1), S(  -8,  -4), S(   3, -17), S(   0, -17), S(   1,  -8), S( -22,  -4), S( -17, -23)
        },
        {
                S( -44,  -8), S( -57,  45), S( -20,  21), S(  -3, -18), S(  19,   3), S(  26,   6), S(  53, -27), S(  23,  -7),
                S(  -8,   2), S( -47,  30), S( -27,  35), S( -56,  43), S( -94,  71), S( -21,  36), S(  -3,  15), S(   0,  14),
                S(  -9,  -7), S( -10,   1), S(  -4,  -8), S( -51,  51), S( -47,  51), S(  37,   9), S(  48, -10), S(  -4,  59),
                S( -11, -10), S(  -6,  21), S( -21,  32), S( -26,  41), S( -28,  46), S( -11,  39), S(  -3,  37), S(  -8,  55),
                S(  -3,  -9), S(   4,  28), S(   5,  14), S(  -4,  54), S(   6,  17), S(   7,  23), S(  22,   6), S(   4,  -7),
                S( -10,  -6), S(  23, -55), S(  13,  10), S(  11,  -6), S(  14,  -5), S(  17,   5), S(  31, -18), S(   6,  -9),
                S( -12, -23), S(  15, -48), S(  25, -63), S(  20, -20), S(  27, -38), S(  41, -77), S(  35, -74), S(  -3, -35),
                S(  13, -38), S(   3, -38), S(  21, -40), S(  23,  48), S(  24, -47), S(  18, -74), S(  35, -79), S( -16, -63)
        },
        {
                S(-246, -78), S( 160, -77), S( 186, -54), S(  88, -55), S(-215,   5), S( -53,  24), S(  52,  -8), S( -14, -29),
                S( 125, -52), S( 126,   5), S( 123,  12), S( 102,   0), S(  54,   5), S( 125,  21), S(  20,  34), S(-161,  24),
                S(  44,   2), S( 154,   9), S( 190,  13), S(  71,   8), S( 155,  -8), S( 205,  29), S( 213,  25), S( -22,  15),
                S( -32,   7), S(  48,  22), S( 120,  23), S(  73,  28), S(  41,  23), S( 127,  27), S(  88,  17), S( -92,  18),
                S( -86,  -9), S( 110, -16), S(  87,  17), S(  45,  27), S(  76,  22), S( 101,  19), S(  85,   4), S( -67,  -2),
                S(-102,  -1), S( -24,  11), S(   7,  24), S(  55,  16), S(  75,  11), S(  81,  18), S(  55,   6), S( -31,  -4),
                S( -92,  -5), S( -78,  11), S( -59,  26), S( -86,  25), S( -44,  19), S( -32,  36), S(   3,   7), S( -13, -18),
                S( -94, -75), S( -70, -25), S(-108,   7), S(-124,  -2), S( -46, -36), S(-108,  23), S( -21, -12), S( -22, -70)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -11,  28), S( -25,  40), S( -25,  71), S(  -6, 103), S(  22, 188), S(  58, 200), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  -3,  33), S(  -7,  58), S(  26, 110), S(  81, 220), S( 353, 173), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  42,  36), S( -14,  41), S(  72,  68), S( 146, 149), S( 254, 103), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  28, -48), S(  -6,  -3), S(  -1, -29), S( -17, -72), S( -19,-106), S( 124,-214)},
        {S(   0,   0), S(   0,   0), S(   0, -32), S(  -6, -45), S(  -5, -43), S(   6, -70), S( -16,-133), S(  64,-257)},
        {S(   0,   0), S(   0,   0), S(  16, -19), S( -18,  30), S(   1,   4), S(  20,  -5), S(  -1, -44), S(  14,-120)},
        {S(   0,   0), S(   0,   0), S(  14, -35), S( -59,  53), S(  17, -52), S(   3,  -4), S(  22, -50), S(  42, 127)},
        {S(   0,   0), S(   0,   0), S(   4,  34), S(  28,  29), S( -82,   8), S( -40, -38), S( -89,-137), S( -24,-258)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -23), S( -20, -11), S(  -5, -14), S(   9, -31), S(  34,-109)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   2, -11), S(  -4,  -7), S( -15,  -7), S(  -3, -36), S(  23, -71)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  13, -19), S(  28, -24), S(  -7,  18), S(   4,   7), S(  30, -51)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  20, -13), S(  -1, -12), S(   2, -19), S(  26, -39), S(  13,  96)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 120,   2), S(  27,   3), S( -81,   3), S( -36, -36), S(  35,-142)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -14), S(   1,  -8), S(  16,   4), S(  42,  62), S(  44, 143), S(  64, 417), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -7, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  25,  71);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  25,   2), S(  -1,  27), S( -19,   4)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  47,   0), S(  -6,  30), S( -54,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  10, -26), S(  75,  37), S(  72,  82), S( 110,   1), S(  74,  39), S( 228,  49)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  58,  23), S(  49,   8), S( 132,  23)},
        {S(   0,  15), S(  31,  44), S(   0,   0), S(  49,  33), S(  56,  65), S(  74,  75)},
        {S( -18,  23), S(  -3,  24), S(   2,  32), S(   0,   0), S(  55,  51), S( 128,  27)},
        {S(  -7,  15), S(   1,  11), S(  -2,  38), S(  -9,  29), S(   0,   0), S(  68, 111)},
        {S(  15,  48), S(  -4,  21), S( -35,  42), S( -55,  40), S(-259,  48), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  45, -13), S(  32, -10), S(  39,  -6), S(  43,  -9), S(  38,   4), S(   0,   0)},
        {S(  29, -10), S(  31,   0), S(  29,  -4), S(  21,  -2), S(  28,   8), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  72,   8), S(  43,  -5), S(  11,  -5), S( -17,  -1), S( -37,   4), S( -46,   4), S( -55,   2), S( -62,   5), S( -64,   4), S( -66,   5), S( -66,   6), S( -78,   8), S( -56,  -2), S( -52,  -1), S( -32, -17), S( -63,   5), S( -22, -24), S(  71, -79), S(  81, -62), S( 119, -83), S( -22,  -3), S( 276,-164), S( 118,-103), S( 233,-314), S(  77,-128), S( 359, 509), S( 148, 215), S( 283, 401), S(   5,   8), S(   1,   2)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  33, -27), S(  48, -18), S(  48, -18), S(   0,   0), S(   0,   0), S(  10,  -3), S(  23, -20), S(  13, -31)},
        {S(  37, -15), S(  43, -13), S(  12,   3), S(   0,   0), S(   0,   0), S(  -3,  -6), S(   8,  -9), S(  16, -11)},
        {S(  34,  -5), S(  -4,   7), S(  16,  -1), S(   0,   0), S(   0,   0), S(  -4, -19), S(   3, -12), S(  15, -13)},
        {S(  11,  29), S(   9,  35), S(  -8,  35), S(   0,   0), S(   0,   0), S(  18, -18), S( -33,  13), S(   6,   3)},
        {S( -26,  -2), S( -28,  -3), S( -11,  -4), S(   0,   0), S(   0,   0), S( -25,  -6), S( -24,   3), S( -36,   9)}
};




#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
