//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 117, 159), S( 450, 433), S( 455, 442), S( 625, 805), S(1398,1449), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60),
                S( 118, 139), S( 101, 133), S(  45, 131), S(  95,  73), S(  27, 103), S( 105,  97), S( -50, 158), S( -24, 160),
                S( -14,  57), S(   5,  46), S(  24,  18), S(  26, -14), S(  35, -14), S(  68,   5), S(  15,  29), S(  -1,  41),
                S( -19,  24), S(   3,   4), S(  -5,  -1), S(  11, -27), S(  11, -14), S(  27, -10), S(  -1,   5), S( -26,  13),
                S( -21,   8), S( -16,   0), S(  -8, -13), S(   3, -18), S(   0, -14), S(  13, -19), S(  -8, -11), S( -22,  -8),
                S( -24,  -4), S( -10, -11), S( -11, -13), S(  -5, -14), S(   4,   0), S(  10, -10), S(  23, -23), S(  -7, -14),
                S( -26,   6), S( -11,  -5), S( -23,   9), S( -13,  -6), S( -18,  14), S(  34,  -5), S(  38, -24), S( -11, -21),
                S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60), S( -29, -60)
        },
        {
                S(-234, -60), S(-143, -23), S( -88,  14), S(  -2, -17), S(  63, -18), S(-167,   5), S( -24, -66), S(-158,-109),
                S( -40, -23), S( -51,   7), S(  21,  -2), S(  15,  32), S(  15,  21), S(  23,  -4), S( -38,  -6), S( -31, -32),
                S( -37, -19), S(  19,   9), S(  47,  33), S(  71,  37), S(  87,  18), S( 103,  20), S(  56,   2), S(  40, -42),
                S(  15,  -3), S(  34,  34), S(  45,  47), S(  68,  56), S(  46,  61), S(  61,  51), S(  36,  34), S(  39,   5),
                S(  -4,   5), S(  12,  15), S(  36,  43), S(  42,  56), S(  49,  47), S(  42,  45), S(  53,  23), S(   6,   8),
                S( -16, -48), S(   2,   0), S(  22,   8), S(  25,  31), S(  38,  23), S(  31,   1), S(  29, -10), S(  -4,  -5),
                S( -43, -42), S( -22, -10), S(   0, -19), S(  17,  13), S(  13,  25), S(  17, -18), S(   4, -12), S(   8, -41),
                S(-110, -44), S( -21, -39), S( -29, -11), S( -20,   3), S(  -3, -11), S(  -3,  -5), S( -18, -21), S( -46, -70)
        },
        {
                S( -61,  -2), S(  -8,  -3), S(-112,  14), S( -83,  11), S( -93,  17), S(-124,  13), S( -44,   5), S(  18, -19),
                S( -32,   6), S( -12,   6), S( -17,  12), S( -38,  10), S( -27,  14), S(  -6,   8), S( -33,   5), S( -75,  10),
                S(  11,   0), S(  19,   9), S(  39,   3), S(  13,   9), S(  19,   4), S(  34,  18), S(  41,  14), S(  15,  13),
                S( -15,   3), S(   9,  22), S(  -1,  22), S(  44,  13), S(  21,  17), S(  18,  10), S(  -3,  29), S(  -7,  16),
                S(  -3,  -5), S(   6,   7), S(  11,  12), S(  27,  15), S(  40,   0), S(  -1,  16), S(  10,  -1), S(  14, -16),
                S(  -1, -17), S(  24,  -5), S(  20,  -1), S(  17,   1), S(  16,  17), S(  30,  -5), S(  26,  -6), S(  22, -21),
                S(   9, -29), S(  26, -33), S(  32, -21), S(  15,  -9), S(  24, -12), S(  22, -25), S(  47,  -5), S(  21, -42),
                S(  32, -57), S(  14, -25), S(  -1,   7), S(   6,  -7), S(  -9,  -5), S(  -5,   7), S(  -8,   0), S(   9, -44)
        },
        {
                S(  11,  17), S(  12,  19), S( -24,  26), S( -25,  29), S(   6,  17), S(  -2,  18), S( -34,  24), S(  54,  10),
                S(   8,  14), S(  -2,  19), S(  30,   9), S(  41,  10), S(  30,   6), S(  44,  -3), S(  -7,  16), S(  20,   6),
                S( -14,  11), S(  24,  -1), S(  36,  -3), S(  39,  -7), S(  45, -12), S(  65,  -8), S(  92, -20), S(  42, -19),
                S( -12,   8), S(   4,   0), S(  21,   5), S(  39,  -6), S(  21,   1), S(  38,  -4), S(  -2,   1), S(   7,   0),
                S( -39,  10), S( -33,  14), S( -23,   9), S( -10,   8), S( -11,   4), S(  -2,  -7), S(   8,  -7), S( -10, -10),
                S( -45,  -5), S( -26,  -3), S( -29,  -3), S( -19,  -3), S( -21,   0), S(  -9, -14), S(   4, -11), S( -26, -17),
                S( -55,  -5), S( -25, -11), S( -33,   1), S( -20,  -8), S( -13, -10), S(  -6, -19), S(   0, -25), S( -87,   3),
                S( -22,   1), S( -16,  -1), S(  -5,  -5), S(   6, -18), S(   1, -17), S(   3, -10), S( -24,  -3), S( -21, -19)
        },
        {
                S( -38, -14), S( -58,  45), S( -20,  22), S(  -7, -15), S(  15,   6), S(  19,  11), S(  40, -20), S(  16,  -5),
                S(  -6,   0), S( -45,  28), S( -27,  35), S( -54,  41), S( -94,  70), S( -26,  39), S( -15,  21), S( -10,  21),
                S(  -7,  -8), S(  -7,  -1), S(  -2,  -9), S( -50,  51), S( -47,  51), S(  35,   8), S(  48,  -9), S(   1,  54),
                S(  -8, -11), S(  -5,  21), S( -19,  31), S( -27,  41), S( -28,  46), S( -11,  38), S(  -1,  37), S(  -8,  57),
                S(  -3,  -7), S(   5,  28), S(   6,  13), S(  -3,  54), S(   7,  15), S(   7,  24), S(  22,   7), S(   5,  -6),
                S(  -8,  -7), S(  24, -55), S(  14,   8), S(  12,  -8), S(  15,  -6), S(  18,   4), S(  31, -19), S(   7,  -9),
                S( -10, -25), S(  16, -49), S(  26, -62), S(  22, -20), S(  29, -40), S(  42, -81), S(  35, -77), S(  -1, -36),
                S(  14, -37), S(   4, -36), S(  23, -39), S(  24,  46), S(  23, -45), S(  18, -73), S(  40, -82), S( -19, -60)
        },
        {
                S(-238, -71), S( 137, -67), S( 186, -53), S( 129, -53), S(-173,   7), S( -70,  27), S(  29,  -3), S( -45, -24),
                S( 116, -43), S( 108,  16), S( 122,  15), S( 143,   3), S(  94,   9), S(  98,  25), S(  -6,  38), S(-190,  28),
                S(  41,  12), S( 149,  17), S( 184,  18), S( 109,  12), S( 188,  -2), S( 181,  32), S( 188,  28), S( -45,  17),
                S( -15,   8), S(  53,  26), S( 125,  26), S( 101,  35), S(  65,  32), S( 104,  29), S(  66,  19), S(-115,  19),
                S( -68,  -9), S( 136, -15), S( 106,  20), S(  66,  37), S(  94,  33), S(  87,  18), S(  65,   4), S( -87,  -2),
                S( -65,  -4), S(   8,  11), S(  46,  21), S(  67,  28), S(  85,  23), S(  68,  15), S(  41,   4), S( -46,  -6),
                S( -38, -14), S( -17,   1), S( -14,  21), S( -93,  40), S( -56,  36), S( -39,  29), S(  -7,   3), S( -22, -24),
                S( -43, -90), S(  12, -47), S( -33, -11), S(-133,  14), S( -70, -11), S(-116,  17), S( -25, -21), S( -34, -79)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -12,  27), S( -25,  39), S( -25,  70), S(  -8, 105), S(  18, 192), S(  59, 202), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,  31), S(  -6,  57), S(  23, 112), S(  77, 224), S( 357, 174), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  49,  33), S( -15,  39), S(  68,  70), S( 149, 155), S( 214, 135), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  25, -48), S(  -6,  -2), S(   0, -29), S( -16, -73), S( -16,-108), S( 124,-216)},
        {S(   0,   0), S(   0,   0), S(   2, -31), S(  -2, -46), S(  -5, -42), S(   7, -71), S( -13,-135), S(  66,-259)},
        {S(   0,   0), S(   0,   0), S(  13, -15), S( -19,  30), S(   1,   4), S(  21,  -6), S(   0, -46), S(  12,-121)},
        {S(   0,   0), S(   0,   0), S(   1, -18), S( -61,  56), S(  15, -49), S(   5,  -6), S(  25, -54), S(  46, 120)},
        {S(   0,   0), S(   0,   0), S(  17,  32), S(  42,  23), S( -70,   2), S( -31, -44), S( -76,-143), S(   0,-268)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   5, -22), S( -22,  -9), S(  -4, -14), S(  11, -31), S(  33,-108)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   2,  -9), S(  -5,  -6), S( -16,  -6), S(  -2, -37), S(  23, -73)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  12, -18), S(  23, -21), S(  -8,  18), S(   2,   8), S(  29, -51)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  14,  -4), S(  -3, -10), S(   1, -19), S(  26, -38), S(  13,  94)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 127,   2), S(  37,   0), S( -71,  -1), S( -26, -41), S(  44,-147)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -13), S(   1,  -8), S(  16,   3), S(  41,  64), S(  41, 146), S(  68, 399), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  25,  71);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  24,   2), S(  -1,  27), S( -34,   7)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  47,   0), S(  -6,  29), S( -67,   3)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  10, -27), S(  75,  37), S(  73,  81), S( 110,   1), S(  77,  35), S( 233,  48)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  58,  23), S(  48,   8), S( 137,  21)},
        {S(   0,  15), S(  31,  44), S(   0,   0), S(  48,  33), S(  55,  67), S(  78,  74)},
        {S( -17,  22), S(  -3,  24), S(   3,  31), S(   0,   0), S(  54,  52), S( 132,  26)},
        {S(  -7,  15), S(   1,  13), S(  -3,  39), S(  -9,  29), S(   0,   0), S(  71, 111)},
        {S(  19,  46), S(  -8,  22), S( -41,  43), S( -62,  42), S(-291,  80), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  41, -12), S(  32, -10), S(  36,  -5), S(  42,  -9), S(  37,   5), S(   0,   0)},
        {S(  26, -10), S(  29,   0), S(  27,  -4), S(  19,  -2), S(  26,   9), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  59,   9), S(  32,  -5), S(   2,  -4), S( -24,  -1), S( -41,   4), S( -47,   4), S( -53,   2), S( -58,   4), S( -57,   3), S( -56,   3), S( -54,   3), S( -62,   4), S( -41,  -6), S( -33,  -4), S(  -9, -22), S( -37,  -1), S(   3, -28), S(  95, -83), S( 112, -68), S( 153, -91), S(  11, -12), S( 248,-121), S( 134, -96), S( 159,-232), S(  76, -71), S( 326, 468), S(  92, 134), S( 266, 378), S(   4,   6), S(   2,   2)};


#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
