//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 113, 149), S( 426, 438), S( 429, 444), S( 590, 803), S(1303,1477), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57),
                S(  90, 143), S( 112, 129), S(  24, 129), S(  81,  66), S(  37,  88), S( 147,  76), S( -17, 148), S( -46, 162),
                S( -25,  60), S(   4,  44), S(  29,  13), S(  29, -22), S(  57, -29), S(  86,  -8), S(  36,  20), S(   3,  39),
                S( -29,  27), S(  -2,   5), S(  -9,  -3), S(  15, -35), S(  21, -24), S(  24, -17), S(  15,  -3), S( -22,  12),
                S( -32,  14), S( -22,   2), S( -15, -11), S(  -2, -17), S(   4, -17), S(   4, -18), S(   6, -15), S( -22,  -5),
                S( -32,   1), S( -18,  -5), S( -16,  -8), S(  -9, -10), S(   5,   2), S(   4,  -6), S(  31, -21), S(  -6, -10),
                S( -32,  12), S( -19,   1), S( -29,  16), S( -21,   4), S( -15,  19), S(  24,   3), S(  42, -18), S( -10, -15),
                S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57), S( -30, -57)
        },
        {
                S(-239, -63), S(-134, -23), S( -92,  15), S( -10, -15), S( 108, -26), S(-149,   0), S( -23, -70), S(-150,-116),
                S( -23, -28), S( -45,   8), S(  68,  -8), S(  44,  29), S(  47,  16), S(  85, -17), S(  -6, -13), S(   4, -40),
                S( -46, -14), S(  30,   9), S(  47,  40), S(  78,  45), S( 112,  18), S( 138,  19), S(  90,  -6), S(  66, -44),
                S(   8,  -3), S(  12,  39), S(  28,  58), S(  57,  63), S(  32,  67), S(  58,  59), S(  24,  42), S(  39,   5),
                S( -14,   5), S( -11,  22), S(  13,  53), S(  20,  64), S(  30,  56), S(  26,  59), S(  49,  28), S(   0,  10),
                S( -28, -50), S( -12,   3), S(   4,  10), S(   8,  37), S(  23,  29), S(  16,   6), S(  16,  -6), S( -16,  -8),
                S( -43, -47), S( -35, -13), S(  -8, -20), S(   8,   9), S(   6,  21), S(  10, -21), S(  -9, -14), S(   3, -50),
                S(-135, -44), S( -21, -45), S( -36, -14), S( -22,  -4), S(  -6, -17), S( -11, -12), S( -20, -26), S( -62, -69)
        },
        {
                S( -69,  -4), S( -22,   0), S(-141,  22), S( -95,  18), S( -91,  21), S( -99,   9), S( -44,   5), S(   5, -17),
                S( -41,   7), S(   1,   2), S( -17,  13), S( -27,  10), S(   7,   9), S(  47,  -3), S(   7,  -1), S( -27,  -4),
                S( -17,   9), S(  15,   7), S(  46,   0), S(  21,   5), S(  38,  -1), S(  51,  13), S(  47,  11), S(   3,  18),
                S( -25,   3), S(   6,  19), S(   6,  18), S(  54,  14), S(  34,  15), S(  36,   5), S(   6,  24), S(  -4,  16),
                S(  -4,  -9), S(   2,   6), S(   5,  17), S(  27,  18), S(  41,   4), S(  -8,  17), S(   4,  -1), S(  21, -21),
                S(   0, -17), S(  15,   0), S(  12,   4), S(  10,   5), S(   6,  20), S(  20,   0), S(  13,  -6), S(  19, -15),
                S(   5, -26), S(  19, -30), S(  26, -18), S(   3,  -7), S(  12, -11), S(  10, -24), S(  34,  -1), S(  13, -38),
                S(  27, -56), S(  15, -25), S(  -4,   2), S(  -4,  -8), S( -19,  -7), S( -10,   0), S( -18,  -1), S(  -4, -38)
        },
        {
                S(  35,   7), S(  35,  11), S(  13,  14), S(  21,  15), S(  66,   2), S(  46,   5), S(   9,  14), S( 108,  -5),
                S(  11,  16), S(   0,  23), S(  39,  14), S(  55,  13), S(  57,   6), S( 107, -17), S(  38,   6), S(  61,  -3),
                S( -32,  22), S(  11,  11), S(  27,   9), S(  34,   8), S(  46,  -1), S(  92,  -7), S( 118, -20), S(  53, -15),
                S( -35,  19), S( -21,  13), S(   3,  18), S(  21,   8), S(   4,  16), S(  20,   9), S(  -5,   9), S(  -9,  10),
                S( -62,  15), S( -55,  20), S( -38,  15), S( -29,  16), S( -32,  12), S( -20,   1), S(   1,  -4), S( -30,  -4),
                S( -67,  -4), S( -43,  -3), S( -45,  -3), S( -35,  -2), S( -33,  -1), S( -28, -11), S(  -3, -13), S( -42, -19),
                S( -74, -10), S( -38, -16), S( -39,  -5), S( -31, -11), S( -23, -14), S( -16, -22), S(  -4, -29), S( -99,  -1),
                S( -37, -12), S( -24, -10), S( -10, -13), S(   1, -22), S(  -5, -20), S( -13, -16), S( -26,  -8), S( -29, -35)
        },
        {
                S( -37, -13), S( -62,  62), S( -10,  50), S(  15,  28), S(  80,  26), S( 103,  10), S(  75,   4), S(  53,  16),
                S( -22, -11), S( -71,  33), S( -38,  47), S( -46,  66), S( -38,  89), S(  57,  52), S(  17,  53), S(  36,  41),
                S( -31, -18), S( -28,  -3), S(  -8,  -3), S( -33,  75), S(  -5,  85), S( 101,  39), S( 107,  28), S(  38,  91),
                S( -27, -38), S( -31,  12), S( -34,  29), S( -34,  53), S( -24,  85), S(   1,  82), S(   4,  90), S(  -5, 114),
                S( -22, -36), S( -21,  15), S( -14,  -2), S( -27,  51), S( -15,  35), S(  -7,  41), S(   7,  31), S(  -4,  34),
                S( -24, -32), S(   2, -82), S( -10, -11), S(  -7, -31), S(  -8, -15), S(  -2,  -9), S(  13, -23), S(  -7,  -5),
                S( -22, -61), S(  -1, -82), S(  11, -93), S(   4, -60), S(  12, -77), S(  23,-108), S(  15,-107), S( -18, -42),
                S(   1, -72), S(  -4, -73), S(  16, -85), S(  17,  -6), S(  11, -82), S(  -1,-102), S(  17, -98), S( -36, -88)
        },
        {
                S( -27,-108), S( 266, -88), S( 200, -56), S( 159, -57), S(-178,   8), S( -69,  31), S(  81,  -9), S( -11, -30),
                S( 231, -63), S(  95,  23), S(  86,  26), S(  92,  11), S(  77,  22), S(  58,  43), S( -38,  59), S(-148,  30),
                S(  59,  20), S( 115,  33), S(  83,  43), S(   1,  38), S(  72,  28), S( 126,  61), S( 139,  54), S( -30,  25),
                S(   5,   7), S(  -1,  50), S(  10,  57), S( -32,  68), S( -77,  71), S(  -8,  63), S(   0,  54), S( -96,  28),
                S( -57, -12), S(  69,   2), S( -31,  49), S( -92,  70), S( -72,  71), S( -70,  59), S( -40,  35), S( -96,   7),
                S( -25, -15), S( -32,  18), S( -74,  40), S( -84,  53), S( -66,  52), S( -63,  42), S( -13,  15), S( -34,  -8),
                S(  10, -29), S(  -2,  -8), S( -42,  20), S(-119,  36), S( -82,  34), S( -65,  27), S(  12,  -7), S(  31, -40),
                S(  23,-108), S(  70, -63), S(  24, -33), S(-107,  -6), S( -20, -36), S( -66,  -6), S(  39, -44), S(  39, -97)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S(  -8,  23), S( -22,  36), S( -21,  67), S(  -9, 103), S(   7, 193), S(  57, 197), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   5,  29), S(   0,  54), S(  21, 110), S(  59, 225), S( 363, 164), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  72,  28), S( -20,  45), S(  59,  76), S( 129, 160), S( 182,  98), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  19, -40), S( -24,  10), S(  -9, -24), S( -19, -72), S( -13,-113), S( 181,-225)},
        {S(   0,   0), S(   0,   0), S( -12, -22), S(  -9, -42), S(  -8, -41), S(   5, -67), S( -11,-134), S(  84,-260)},
        {S(   0,   0), S(   0,   0), S(  28, -30), S( -12,  15), S(   4, -10), S(  20, -23), S(  16, -73), S(  12,-144)},
        {S(   0,   0), S(   0,   0), S( -11, -19), S( -58,  50), S(  10, -49), S(   5, -21), S(  22, -72), S(  89,  38)},
        {S(   0,   0), S(   0,   0), S(  60, -20), S(  68, -26), S( -53, -47), S(   6, -99), S(  -7,-209), S(  30,-328)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( -22, -10), S( -35,   1), S(  -8,  -9), S(   7, -28), S(  47,-113)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( -27,   5), S( -25,   2), S( -29,  -2), S(  -9, -35), S(  28, -78)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  17, -22), S(  35, -29), S(   6,   7), S(  12,  -2), S(  34, -65)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   1,  14), S( -11,  -2), S(   3, -30), S(  26, -57), S(  31,  50)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 206,  -6), S(  52,  -3), S( -31, -12), S(  47, -61), S(  99,-169)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -12), S(   0,  -5), S(  15,   6), S(  35,  69), S(  40, 152), S( -21, 436), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  25,  79);

constexpr SCORE_TYPE TEMPO_BONUS = S(  14,  21);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   6,   0), S(   8,   5), S(   7,   4), S(   4,   4), S(   0,   0)};

#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
