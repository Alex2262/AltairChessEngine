

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S(    28,    63), S(    82,   127), S(    67,   101), S(    72,   264), S(   413,   476), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(   -24,    16), S(   -55,    31), S(  -140,    29), S(   -34,    15), S(   -73,    20), S(    16,    -6), S(   -14,    26), S(   253,   -79),
                S(    43,     5), S(    80,   -20), S(  -110,   144), S(    44,   -28), S(    31,   -35), S(    41,   -36), S(    66,   -11), S(   101,   -52),
                S(     3,    -9), S(   -15,    20), S(    13,    -9), S(    -6,    -9), S(     9,   -27), S(     9,    -4), S(   -29,     8), S(    -4,    15),
                S(    -1,    11), S(    -9,    -4), S(   -20,     6), S(     9,   -36), S(     0,   -18), S(    -1,    -6), S(   -19,     0), S(    -9,     2),
                S(   -10,    15), S(    -1,     3), S(   -19,    10), S(     6,   -13), S(   -11,     2), S(     7,     5), S(    -8,     0), S(   -22,     9),
                S(   -24,     4), S(    -3,     5), S(   -16,    16), S(    -5,    -5), S(   -20,     2), S(     4,    -7), S(    -9,     2), S(   -26,    -5),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(    12,   -12), S(   -41,  -102), S(    -6,  -105), S(  -118,   138), S(    -1,    41), S(    85,   -65), S(  -144,    52), S(   -66,    21),
                S(    15,   -30), S(    47,    30), S(    21,   -41), S(    26,   -27), S(   -69,    16), S(    48,     5), S(    21,   -48), S(   -45,   -21),
                S(    53,  -139), S(    -3,   -21), S(    28,    19), S(    31,    40), S(    61,   -28), S(    46,     5), S(   -48,    -6), S(   113,   -14),
                S(    46,   -50), S(     8,    14), S(    42,   -34), S(   -14,    17), S(     9,    14), S(   -85,    55), S(    -1,     9), S(   -19,   -14),
                S(    15,   -46), S(     9,   -25), S(     0,    15), S(     1,    21), S(   -11,    13), S(   -22,   -13), S(     5,    17), S(   -63,    -5),
                S(     3,    24), S(    12,    13), S(    12,    17), S(    26,    13), S(  -159,    72), S(   -10,     9), S(   -18,    46), S(    -3,   -13),
                S(    25,   -38), S(    23,    11), S(   -14,     6), S(    10,   -13), S(   -25,    32), S(    -9,    26), S(   198,   -71), S(    -2,     9),
                S(    98,    87), S(     6,   -22), S(   -56,     6), S(   -19,    48), S(   -66,    12), S(   -14,    21), S(    -8,    -6), S(     6,    14)
        },
        {
                S(     5,   -15), S(    12,    -6), S(    21,   -33), S(     6,    -2), S(   -49,    -1), S(    47,     0), S(    -3,   -44), S(    -2,    48),
                S(    75,  -103), S(   -30,    12), S(    -4,    17), S(    24,     9), S(    32,     3), S(     7,   -12), S(    -5,    39), S(   -33,    -6),
                S(     4,   -10), S(   -28,    46), S(    32,    14), S(    18,     5), S(    21,    18), S(   -11,    50), S(    70,     9), S(    23,    14),
                S(     2,   -11), S(    -1,    13), S(    20,    -2), S(   -26,     4), S(   -12,    28), S(   -32,    27), S(    13,    28), S(   -13,    10),
                S(   -14,   -18), S(   -12,     8), S(   -22,    -1), S(    17,   -17), S(   -17,    12), S(   -17,    15), S(   -20,    32), S(    49,   -26),
                S(    -3,    -5), S(  -149,   -39), S(    12,    35), S(   -15,     9), S(    -1,    19), S(     0,     7), S(    -4,    10), S(     7,   -17),
                S(    52,   -45), S(     1,    -6), S(    39,   -28), S(    -6,    27), S(    12,    11), S(   -89,    85), S(    17,   -22), S(   -27,   -41),
                S(   -36,    15), S(   -25,   -40), S(   -25,    33), S(    23,   -23), S(    34,   -48), S(    -6,     4), S(    33,   -17), S(     8,   -79)
        },
        {
                S(    55,   -26), S(    22,   -16), S(    53,   -18), S(   260,  -120), S(    94,   -53), S(    12,     3), S(   168,   -85), S(     4,     2),
                S(    61,   -17), S(   -12,    19), S(   -21,    14), S(    88,   -15), S(  -104,    40), S(   -44,    20), S(   -21,     7), S(   -80,    32),
                S(     6,   -21), S(     6,     8), S(    49,   -17), S(    36,   -12), S(   -63,    30), S(   -64,     3), S(    44,   -10), S(    -6,    -9),
                S(     7,     9), S(    17,    19), S(   -58,    -3), S(   -24,   -17), S(    69,   -76), S(   104,   -27), S(   -29,    30), S(   -47,    -6),
                S(   -13,   -12), S(    29,   -19), S(   -66,    18), S(   -13,     9), S(   -25,     8), S(   -21,    14), S(   -20,    11), S(    -6,   -15),
                S(   -32,    12), S(   -42,    47), S(     2,    -6), S(    12,     5), S(   -14,     7), S(   -80,    39), S(    85,   -43), S(   -40,    14),
                S(    -8,   -49), S(   -62,    52), S(    44,   -10), S(    -3,     0), S(    40,   -47), S(  -214,    99), S(     3,   -10), S(   -36,    24),
                S(   -10,    29), S(   -21,    28), S(   -14,    30), S(     4,    15), S(    11,     1), S(    -3,     6), S(   -37,    22), S(   -34,    32)
        },
        {
                S(    27,   -41), S(    59,   -44), S(    37,   -67), S(    78,   -16), S(    33,   -34), S(   187,  -118), S(    18,   -34), S(   105,  -103),
                S(    92,   -25), S(    40,   -35), S(   -42,    51), S(   -30,    59), S(    23,    34), S(    26,     4), S(    18,     5), S(    35,  -101),
                S(     1,   -64), S(   -45,    23), S(   -69,    63), S(   -52,    86), S(   -71,    48), S(   -32,    83), S(   -63,    56), S(   -53,    70),
                S(    38,    -4), S(    16,    37), S(     1,    47), S(   -37,    93), S(   -15,    16), S(  -127,   100), S(   -10,     7), S(     2,   -75),
                S(    42,   -36), S(     6,    14), S(   -10,    36), S(   -21,    72), S(   -69,    96), S(   -86,    67), S(   -30,    -8), S(     9,   -84),
                S(    28,   -24), S(    23,    14), S(    12,    45), S(   -35,    30), S(   -41,    14), S(    -3,   -43), S(   -10,   -44), S(    60,   -44),
                S(    78,   -75), S(     4,   -19), S(   -11,   -22), S(   -18,   -12), S(    -6,   -70), S(    17,   -71), S(  -219,    16), S(  -120,    46),
                S(    73,    17), S(    71,   -66), S(     5,    32), S(    -6,    22), S(   -56,    28), S(    -1,    -7), S(    48,    21), S(    76,   -65)
        },
        {
                S(   311,  -116), S(   198,   -72), S(   -37,     4), S(   -55,    26), S(  -107,    21), S(    13,     2), S(  -320,    30), S(  -469,     0),
                S(   -80,    -8), S(   -98,    18), S(   -23,     8), S(   -74,     5), S(  -102,    28), S(   -35,    25), S(  -163,    43), S(  -579,    55),
                S(  -203,    31), S(  -223,    22), S(  -150,    18), S(    38,   -21), S(   -42,    19), S(    -6,    20), S(  -114,    44), S(  -157,    36),
                S(  -290,    47), S(  -152,    20), S(  -142,    17), S(   -98,     7), S(   100,     6), S(    81,     6), S(    14,    24), S(   -22,    27),
                S(    29,     4), S(    22,     6), S(    99,     1), S(  -106,     2), S(    44,    -4), S(   106,   -15), S(   157,    -9), S(    25,    12),
                S(    16,    -4), S(    18,     4), S(    33,     4), S(    47,   -12), S(    86,   -19), S(    93,   -14), S(    54,   -16), S(    50,   -33),
                S(    37,    -5), S(    49,   -15), S(    56,    -8), S(    38,   -13), S(    21,   -11), S(    59,   -12), S(    66,   -20), S(     4,   -10),
                S(     6,    -2), S(    56,   -14), S(    60,   -11), S(     8,   -13), S(    31,   -12), S(    79,   -12), S(    64,   -11), S(    69,     2)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -12,    -7), S(    -5,    -4), S(    -5,     5), S(    -2,     1), S(    -1,     3), S(     5,     3), S(     6,    -4), S(    -4,     6), S(    17,    -2), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -16,    20), S(   -14,    18), S(   -14,    20), S(   -16,    16), S(   -10,     5), S(   -15,    10), S(   -11,     3), S(   -15,     5), S(   -11,    -5), S(     2,   -23), S(   -43,     3), S(   -32,    -3), S(   204,   -79), S(   -11,    10), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(    15,    -4), S(    12,   -24), S(     7,   -20), S(     6,   -13), S(     4,     3), S(     6,    -1), S(    -1,    -1), S(    -9,    13), S(   -10,    14), S(    -7,    10), S(   -24,    16), S(    18,   -10), S(   -21,    21), S(   -49,    31), S(    54,   -37), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(  -175,   223), S(  -183,   -14), S(  -191,   111), S(  -186,    91), S(  -187,   119), S(  -181,    83), S(  -183,    89), S(  -184,   113), S(  -185,   106), S(  -188,   119), S(  -182,   111), S(  -185,   142), S(  -180,   132), S(  -190,   154), S(  -182,   116), S(  -171,   114), S(  -156,   101), S(  -154,    93), S(  -125,    53), S(   -85,    24), S(    28,   -27), S(   241,  -159), S(   154,  -102), S(   540,  -289), S(   702,  -374), S(   707,  -396), S(   461,  -312), S(   620,  -421)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(   -87,    79), S(  -142,    54), S(  -127,    59), S(  -140,    85), S(    66,    42), S(    20,    58), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -122,    34), S(  -112,    73), S(  -126,    97), S(   195,    60), S(    54,   100), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -217,   111), S(  -149,   131), S(  -228,   245), S(   204,    12), S(   -36,  -217), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -73,    13), S(   104,   -63), S(    31,   -35), S(   -48,    24), S(   -36,   -49), S(   -96,   -31)},
        {S(     0,     0), S(     0,     0), S(   -26,   -17), S(    -6,   -31), S(   -83,   -11), S(    48,   -71), S(    -1,   -48), S(    23,   -90)},
        {S(     0,     0), S(     0,     0), S(    -2,   -29), S(    40,    12), S(   -17,   -40), S(   125,  -124), S(   -39,   -38), S(   -45,   -66)},
        {S(     0,     0), S(     0,     0), S(   123,  -276), S(    52,    12), S(    98,  -151), S(   132,   -84), S(    67,    16), S(   -97,   100)},
        {S(     0,     0), S(     0,     0), S(   -56,   -31), S(   -38,   -20), S(   -98,    12), S(     8,    -5), S(    21,   -11), S(   -44,   -32)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   -70,     7), S(   102,   -56), S(    36,   -39), S(    39,    -2), S(   -72,    39)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    33,   -42), S(   168,   -43), S(    21,   -69), S(    -9,     3), S(   -22,    36)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   -69,    57), S(    19,    -1), S(   -23,   -11), S(    92,    25), S(   -14,   -63)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(  -103,   106), S(    45,     5), S(   -25,   -47), S(    33,  -115), S(    38,   -22)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    20,     9), S(   -83,     6), S(   -44,    15), S(   -19,    -5), S(    -3,   -44)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(     2,    -4), S(    -1,     2), S(     0,    21), S(    -1,    40), S(    47,    42), S(  -239,   223), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(    -3,     4);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    45,   -25);

constexpr SCORE_TYPE TEMPO_BONUS = S(    12,     3);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    -2,   -10), S(    -2,   -25), S(    -7,     5)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    20,   -23), S(    17,   -41), S(   -18,     6)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(    16,   -32), S(    45,    31), S(    18,    44), S(    38,    80), S(    44,   217), S(     0,     0)},
        {S(     0,    11), S(     0,     0), S(     4,    27), S(    -2,    44), S(    87,    88), S(     0,     0)},
        {S(    -4,    32), S(     9,    21), S(    15,   -39), S(    13,    73), S(    33,   164), S(     0,     0)},
        {S(     2,    10), S(    30,    -8), S(    29,     5), S(   -38,    76), S(    91,    48), S(     0,     0)},
        {S(    -6,    25), S(   -13,   -58), S(   -17,    16), S(    21,   -11), S(    18,    10), S(   169,    81)},
        {S(    34,    18), S(    38,     8), S(    41,    12), S(    66,     4), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    16,    -7), S(    25,    -5), S(     5,     5), S(    -2,     6), S(    11,     1), S(     0,     0)},
        {S(     8,    -1), S(    12,    -3), S(    13,     3), S(     0,     4), S(    13,    -5), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    38,    18), S(    33,   -33), S(    19,   -27), S(     8,   -20), S(     5,   -17), S(   -13,   -10), S(   -19,    -8), S(   -30,   -15), S(   -30,    -9), S(   -41,    -5), S(   -41,   -16), S(   -42,   -10), S(   -37,   -22), S(   -47,    -5), S(   -79,    11), S(   -26,    -8), S(   -25,   -18), S(   -60,    -6), S(   -90,    40), S(   -76,    34), S(  -113,    47), S(   -68,    26), S(   -88,    57), S(    -4,    27), S(   -94,    61), S(   -77,     2), S(    40,   -37), S(   259,  -126), S(    89,   -44), S(    51,   -15), S(   131,     5), S(    49,   202), S(   161,   -49), S(   240,   -36), S(   259,   154), S(   441,   180), S(    37,   -25), S(   116,    49), S(    70,    74), S(   138,    87)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(   -14,    14), S(     4,   -28), S(    11,     4), S(     0,     0), S(     0,     0), S(     7,     3), S(    15,   -40), S(    -2,   -12)},
        {S(    -2,    -3), S(    -4,    -2), S(   -33,    -3), S(     0,     0), S(     0,     0), S(   -11,     5), S(    15,   -11), S(    10,   -20)},
        {S(   -16,     3), S(    -4,     4), S(   -25,    11), S(     0,     0), S(     0,     0), S(   -34,   -20), S(     1,   -12), S(     1,   -10)},
        {S(     4,    17), S(   -40,    17), S(   -21,    12), S(     0,     0), S(     0,     0), S(    -5,   -18), S(     2,   -18), S(    -9,   -20)},
        {S(    -6,    -7), S(    -8,    -3), S(    -3,    -4), S(     0,     0), S(     0,     0), S(     5,     1), S(   -27,     6), S(   -15,     9)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(  -189,    44), S(    35,    11), S(  -100,    72), S(     0,     0), S(     0,     0), S(    80,   -29), S(   224,   -60), S(   189,   -99)},
        {S(    24,    -9), S(    -9,   -14), S(  -103,   161), S(     0,     0), S(     0,     0), S(  -120,     6), S(    58,   -27), S(    42,   -31)},
        {S(   -13,    19), S(    -7,    19), S(    32,   -16), S(     0,     0), S(     0,     0), S(    33,   -20), S(   -49,    -7), S(   -53,    28)},
        {S(     6,    28), S(   -10,    -6), S(     7,     4), S(     0,     0), S(     0,     0), S(    -7,     7), S(   -24,     0), S(   -25,    26)},
        {S(     1,     5), S(     0,     6), S(    -6,     4), S(     0,     0), S(     0,     0), S(   -15,     7), S(   -16,     6), S(   -23,    17)},
        {S(    -5,    -6), S(   -20,     2), S(    -2,    -8), S(     0,     0), S(     0,     0), S(     3,     4), S(   -27,     6), S(   -21,     5)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -1), S(     3,     2), S(     0,    -2), S(    -8,     0), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -2,     0), S(    -3,     3), S(     1,     3), S(    -3,     5), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(     0,   -23);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(   -68,    38);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(     0,    -3), S(    -5,    -5)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(   -24,    10), S(     8,    -4), S(    13,    -5), S(    23,   -13), S(    -3,    -9), S(    24,   -18), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    28,   -17), S(    18,    -8), S(    18,    -6), S(    16,    -7), S(   -18,    18), S(   -15,    25), S(     0,     0)};




#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
