//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 112, 163), S( 456, 432), S( 462, 441), S( 635, 802), S(1414,1447), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61),
                S( 115, 143), S(  94, 133), S(  57, 111), S( 101,  58), S(  32,  83), S( 123, 118), S( -50, 182), S(  -1, 192),
                S( -13,  62), S(   5,  47), S(  21,  17), S(  31, -15), S(  44, -20), S(  10,  23), S( -16,  53), S( -39,  89),
                S( -15,  20), S(  11,  -5), S(   2, -11), S(  17, -33), S(  20, -21), S(  11,  -7), S(  17,  -2), S( -43,  22),
                S( -17,   2), S(  -8,  -8), S(  -2, -21), S(  10, -24), S(   8, -21), S(  10, -14), S( -10, -10), S( -45,   3),
                S( -20,  -9), S(  -3, -19), S(  -4, -20), S(   2, -20), S(  13,  -7), S(   5, -20), S(  22, -26), S( -30,  -9),
                S( -22,   4), S(  -5, -12), S( -19,   3), S(  -8, -11), S( -10,   9), S(  20, -20), S(  28, -18), S( -30,  -1),
                S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61)
        },
        {
                S(-243, -57), S(-146, -20), S( -89,  14), S( -11, -15), S(  64, -18), S(-170,   7), S( -26, -65), S(-158,-106),
                S( -42, -23), S( -52,   9), S(  22,  -3), S(  16,  32), S(  20,  18), S(  30,  -7), S( -35,  -7), S( -25, -34),
                S( -38, -18), S(  18,   9), S(  48,  32), S(  75,  35), S(  89,  16), S( 111,  17), S(  60,   0), S(  43, -43),
                S(  13,  -2), S(  33,  33), S(  47,  46), S(  70,  55), S(  49,  59), S(  66,  48), S(  38,  31), S(  40,   5),
                S(  -4,   5), S(  12,  15), S(  36,  43), S(  42,  55), S(  48,  47), S(  42,  44), S(  54,  23), S(   6,   8),
                S( -17, -47), S(   2,   0), S(  20,   8), S(  25,  31), S(  39,  22), S(  29,   2), S(  27,  -9), S(  -6,  -3),
                S( -44, -40), S( -22, -11), S(   0, -19), S(  15,  14), S(  11,  25), S(  16, -16), S(   6, -12), S(   6, -41),
                S(-111, -44), S( -23, -37), S( -31, -10), S( -21,   5), S(  -5, -11), S(  -4,  -5), S( -20, -21), S( -47, -70)
        },
        {
                S( -64,  -1), S(  -7,  -2), S(-114,  14), S( -90,  13), S(-100,  19), S(-125,  14), S( -28,   1), S(  23, -20),
                S( -37,   8), S( -12,   7), S( -16,  11), S( -40,  10), S( -31,  15), S(  -3,   7), S( -24,   5), S( -68,   7),
                S(  10,   1), S(  18,   9), S(  39,   3), S(  13,   8), S(  20,   3), S(  34,  18), S(  38,  15), S(   9,  15),
                S( -16,   4), S(   9,  22), S(  -1,  21), S(  45,  13), S(  22,  16), S(  19,   9), S(  -3,  28), S( -10,  17),
                S(  -4,  -6), S(   6,   6), S(  12,  12), S(  27,  15), S(  40,   0), S(  -1,  15), S(  10,  -1), S(  13, -15),
                S(  -2, -16), S(  24,  -4), S(  20,   0), S(  17,   0), S(  16,  17), S(  29,  -4), S(  27,  -7), S(  23, -21),
                S(   9, -28), S(  26, -33), S(  32, -22), S(  15,  -9), S(  22, -11), S(  23, -24), S(  49,  -6), S(  21, -41),
                S(  32, -58), S(  13, -24), S(  -2,   9), S(   5,  -6), S(  -8,  -6), S(  -3,   4), S( -10,   1), S(   9, -44)
        },
        {
                S(   8,  18), S(  12,  19), S( -22,  26), S( -23,  27), S(   8,  17), S(  -2,  19), S( -29,  23), S(  57,   9),
                S(   6,  14), S(  -1,  19), S(  30,   9), S(  43,   9), S(  33,   4), S(  51,  -5), S(   3,  14), S(  25,   5),
                S( -17,  11), S(  22,   0), S(  35,  -3), S(  40,  -7), S(  43, -12), S(  73, -10), S(  93, -19), S(  40, -18),
                S( -15,   9), S(   1,   1), S(  20,   5), S(  39,  -7), S(  21,   0), S(  45,  -6), S(  -3,   1), S(   2,   2),
                S( -42,  11), S( -35,  14), S( -25,   9), S( -12,   9), S( -11,   4), S(   3,  -9), S(   6,  -7), S( -16,  -7),
                S( -47,  -4), S( -28,  -2), S( -31,  -2), S( -20,  -2), S( -21,   0), S(  -7, -15), S(   5, -11), S( -27, -16),
                S( -56,  -5), S( -29, -10), S( -35,   1), S( -22,  -8), S( -14, -10), S(  -4, -19), S(   1, -25), S( -85,   2),
                S( -23,   2), S( -19,  -1), S(  -8,  -5), S(   3, -16), S(   0, -17), S(   0,  -6), S( -23,  -4), S( -16, -23)
        },
        {
                S( -44,  -8), S( -56,  44), S( -19,  21), S(  -3, -18), S(  18,   3), S(  24,   6), S(  52, -26), S(  21,  -6),
                S(  -8,   1), S( -47,  30), S( -27,  35), S( -55,  42), S( -94,  70), S( -21,  36), S(  -4,  17), S(  -2,  15),
                S(  -9,  -7), S( -10,   1), S(  -4,  -8), S( -50,  51), S( -46,  49), S(  38,   7), S(  48, -10), S(  -5,  59),
                S( -11,  -9), S(  -7,  21), S( -20,  32), S( -26,  41), S( -28,  45), S( -11,  39), S(  -3,  36), S(  -8,  55),
                S(  -3, -10), S(   4,  28), S(   5,  14), S(  -4,  54), S(   6,  16), S(   7,  23), S(  22,   5), S(   4,  -6),
                S( -10,  -7), S(  23, -56), S(  13,   9), S(  11,  -6), S(  14,  -4), S(  17,   5), S(  31, -18), S(   7,  -9),
                S( -11, -24), S(  15, -48), S(  26, -63), S(  20, -19), S(  27, -38), S(  40, -75), S(  34, -72), S(  -3, -32),
                S(  13, -38), S(   4, -39), S(  22, -40), S(  23,  48), S(  24, -47), S(  18, -74), S(  35, -78), S( -17, -61)
        },
        {
                S(-237, -36), S( 162, -33), S( 205, -20), S(  39,-140), S(-256, -80), S( -29,  52), S(  76,  18), S( -15,   3),
                S( 123,  -9), S( 144,  41), S( 139,  50), S(  51, -82), S(  16, -80), S( 138,  53), S(  30,  64), S(-154,  55),
                S(  58,  41), S( 173,  45), S( 201,  53), S(  30, -76), S( 110, -90), S( 223,  60), S( 228,  56), S( -12,  50),
                S( -11,  44), S(  65,  60), S( 136,  61), S(  33, -56), S(   2, -61), S( 142,  62), S( 101,  52), S( -81,  53),
                S( -71,  31), S( 130,  21), S( 103,  56), S(   8, -57), S(  38, -62), S( 113,  55), S(  95,  40), S( -60,  34),
                S( -88,  37), S(  -8,  51), S(  24,  61), S(  17, -69), S(  38, -75), S(  91,  52), S(  63,  41), S( -22,  29),
                S( -76,  27), S( -64,  47), S( -43,  61), S(-121, -62), S( -78, -69), S( -23,  67), S(  10,  39), S(  -4,  12),
                S( -77, -47), S( -55,   7), S( -95,  43), S(-158, -91), S( -76,-128), S( -99,  53), S( -12,  17), S( -13, -43)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -10,  28), S( -24,  39), S( -24,  69), S(  -6, 101), S(  25, 181), S(  65, 205), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  -3,  33), S(  -6,  57), S(  27, 108), S(  84, 216), S( 350, 191), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  39,  39), S( -14,  41), S(  72,  67), S( 142, 151), S( 218, 121), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  27, -48), S(  -6,  -3), S(  -1, -28), S( -17, -72), S( -22,-103), S( 129,-214)},
        {S(   0,   0), S(   0,   0), S(  -2, -33), S(  -6, -46), S(  -5, -43), S(   6, -70), S( -18,-133), S(  59,-256)},
        {S(   0,   0), S(   0,   0), S(  15, -20), S( -18,  30), S(   0,   5), S(  20,  -5), S(  -2, -42), S(   9,-116)},
        {S(   0,   0), S(   0,   0), S(  12, -30), S( -61,  56), S(  16, -50), S(   3,  -2), S(  23, -52), S(  36, 133)},
        {S(   0,   0), S(   0,   0), S(   0,  22), S(  31,  19), S( -83,   4), S( -45, -35), S(-109,-113), S(  22,-215)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -23), S( -20, -11), S(  -6, -13), S(  10, -30), S(  40,-112)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   1, -11), S(  -5,  -7), S( -16,  -6), S(  -3, -36), S(  27, -72)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  13, -20), S(  28, -23), S(  -8,  19), S(   4,   8), S(  31, -51)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  19, -12), S(  -1, -12), S(   0, -15), S(  26, -38), S(  12,  96)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 134,  -7), S(  34,  -1), S( -79,   3), S( -32, -34), S(  14,-118)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -14), S(   1,  -8), S(  16,   4), S(  42,  63), S(  34, 152), S(  78, 387), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -46);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  26,  70);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  24,   2), S(  -1,  28), S( -20,   6)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  47,   0), S(  -5,  30), S( -53,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  11, -26), S(  75,  37), S(  72,  82), S( 111,   0), S(  74,  40), S( 232,  53)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  59,  23), S(  49,   9), S( 133,  22)},
        {S(   0,  15), S(  31,  44), S(   0,   0), S(  49,  33), S(  56,  64), S(  74,  74)},
        {S( -18,  23), S(  -3,  24), S(   2,  32), S(   0,   0), S(  55,  50), S( 127,  28)},
        {S(  -7,  14), S(   2,  11), S(  -2,  38), S(  -9,  29), S(   0,   0), S(  69, 111)},
        {S(  11,  44), S(  -4,  21), S( -35,  41), S( -56,  40), S(-259,  47), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  41, -10), S(  30,  -9), S(  37,  -5), S(  40,  -9), S(  36,   5), S(   0,   0)},
        {S(  26,  -9), S(  29,   0), S(  27,  -4), S(  19,  -2), S(  26,   8), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  60,   6), S(  32,  -5), S(   2,  -5), S( -24,  -1), S( -42,   4), S( -48,   5), S( -55,   2), S( -60,   4), S( -59,   4), S( -59,   4), S( -56,   4), S( -65,   6), S( -41,  -5), S( -35,  -4), S( -12, -20), S( -43,   1), S(   3, -29), S(  98, -84), S( 109, -68), S( 153, -92), S(  14, -12), S( 256,-123), S( 140, -95), S( 167,-230), S(  87, -45), S( 314, 451), S(  95, 138), S( 257, 366), S(   5,   7), S(   1,   2)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  77,  24), S(  94,  36), S(  97,  51), S(   0,   0), S(   0,   0), S(  31,  68), S(  48,  53), S(  35,  46)},
        {S(  83,  34), S(  89,  41), S(  62,  71), S(   0,   0), S(   0,   0), S(  20,  63), S(  34,  65), S(  40,  65)},
        {S(  76,  55), S(  38,  66), S(  63,  70), S(   0,   0), S(   0,   0), S(  16,  52), S(  23,  67), S(  34,  67)},
        {S(  56,  91), S(  51,  95), S(  39, 102), S(   0,   0), S(   0,   0), S(  38,  54), S(  -6,  88), S(  29,  86)},
        {S(  29,  46), S(  23,  47), S(  45,  59), S(   0,   0), S(   0,   0), S(  -1,  64), S(  -5,  76), S(  -7,  83)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[5][8] = {
        {S(-126, -64), S(-103, -64), S(-151,  34), S(   0,   0), S(   0,   0), S( -94, -61), S( -95, -44), S(-115, -33)},
        {S(-122,-100), S( -23,-125), S( -68,  -2), S(   0,   0), S(   0,   0), S( -28, -86), S(   0,-111), S( -78,-105)},
        {S(-118,-138), S( -30,-139), S( -47, -16), S(   0,   0), S(   0,   0), S( -28, -86), S( -18,-113), S( -81,-120)},
        {S(-115,-148), S( -16,-160), S( -40, -17), S(   0,   0), S(   0,   0), S( -25,-103), S(  -5,-123), S( -72,-132)},
        {S(-115,-146), S( -50,-138), S( -46, -12), S(   0,   0), S(   0,   0), S( -25, -94), S( -21,-118), S( -65,-136)}
};




#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
