

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561, 1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];

constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   114,    80), S(   397,   181), S(   400,   174), S(   628,   278), S(  1525,   323), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(   115,    -1), S(    96,    30), S(   118,    31), S(   123,    16), S(    22,    28), S(   -25,    62), S(    -5,    84), S(   104,    21),
                S(   -16,     9), S(   -15,     8), S(    12,     6), S(    22,    -4), S(    29,   -15), S(    24,    -5), S(   -36,    19), S(    -7,     1),
                S(   -23,     6), S(   -20,    -4), S(   -21,    -6), S(     1,   -18), S(     3,   -16), S(    12,   -17), S(   -11,   -15), S(   -21,   -10),
                S(   -31,     0), S(   -34,     3), S(   -18,   -20), S(    -4,   -18), S(    -8,   -16), S(   -21,    -8), S(   -13,    -9), S(   -29,    -4),
                S(   -26,    -5), S(   -30,    -9), S(   -28,    -9), S(   -13,   -13), S(    -4,   -11), S(   -12,   -11), S(    -4,    -7), S(   -26,   -12),
                S(   -34,     0), S(   -36,    -3), S(   -40,    -2), S(   -22,   -18), S(   -22,    -8), S(    -1,   -12), S(     0,   -10), S(   -27,   -11),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(    -4,  -242), S(   -75,    26), S(    20,   -14), S(     0,    23), S(    78,    -9), S(    55,     1), S(    -5,    30), S(  -137,    44),
                S(   -26,    18), S(    19,    16), S(    27,    -1), S(    13,    21), S(    57,     0), S(    47,    -2), S(   -37,    24), S(    22,    31),
                S(    19,    -4), S(    -6,    13), S(    27,    17), S(    45,    15), S(    58,    14), S(    81,    13), S(    40,     8), S(    -6,    14),
                S(    -1,     8), S(    12,     7), S(    27,    19), S(    37,    24), S(    18,    30), S(    18,    26), S(    16,     2), S(    25,     6),
                S(   -12,    11), S(    14,    -2), S(     9,    22), S(    15,    12), S(    10,    20), S(     6,    11), S(    17,     0), S(   -20,    22),
                S(   -26,   -19), S(    -4,    -7), S(   -10,     6), S(     0,     8), S(     2,    -1), S(    -6,   -16), S(   -14,   -16), S(   -23,   -12),
                S(   -41,     4), S(   -32,     2), S(   -18,   -39), S(    -6,    -6), S(   -13,    -6), S(     1,   -24), S(   -26,    -2), S(   -26,   -15),
                S(   -65,   -35), S(   -21,   -13), S(   -34,    -7), S(   -20,   -10), S(   -17,   -23), S(   -20,   -20), S(   -26,   -12), S(   -59,   -12)
        },
        {
                S(   -32,     3), S(   -17,    11), S(   -51,    10), S(   -24,    14), S(   -31,     5), S(    22,     5), S(    14,    -5), S(   -53,    14),
                S(    -7,     8), S(    37,    -3), S(     9,     8), S(    15,     3), S(    10,     9), S(   -13,     6), S(   -27,     8), S(    43,   -14),
                S(    14,     0), S(    22,     7), S(    42,    -4), S(    22,     1), S(    45,    -2), S(    30,    12), S(    68,    -7), S(    13,     5),
                S(     1,    11), S(    21,     3), S(    34,     0), S(    56,    -8), S(     8,     9), S(    19,     3), S(     0,    15), S(   -14,     8),
                S(    -5,    -2), S(     6,     4), S(    11,     0), S(    15,     7), S(    21,    -3), S(    -9,    15), S(     5,     2), S(    -7,     0),
                S(   -14,     2), S(     5,     1), S(     3,    -3), S(     1,    -1), S(    -5,    11), S(    10,    -6), S(    -6,    -1), S(     2,     2),
                S(     6,   -31), S(    -5,   -13), S(    -8,    -7), S(   -10,     0), S(    -4,    -3), S(     6,    -8), S(    15,   -15), S(   -12,   -36),
                S(   -28,   -33), S(   -61,     3), S(   -28,     2), S(   -30,    -8), S(   -11,   -15), S(   -24,     1), S(  -104,    16), S(    -9,   -19)
        },
        {
                S(    30,     2), S(    -3,    22), S(    26,     7), S(    59,    -2), S(    22,     2), S(    88,   -14), S(    56,    -8), S(    54,    -7),
                S(    25,    10), S(     6,    19), S(    15,    12), S(    38,     5), S(    26,    10), S(    65,     0), S(    50,    -1), S(    82,    -6),
                S(     4,     6), S(    12,     9), S(    18,     3), S(    28,    -4), S(     1,     6), S(    75,   -12), S(    71,    -9), S(    47,    -1),
                S(    -7,     3), S(    -3,    13), S(   -10,     9), S(    -4,     3), S(    19,    -6), S(     3,     5), S(    -2,    -2), S(    -8,     4),
                S(   -19,     4), S(   -24,    12), S(   -40,    14), S(   -23,     5), S(   -36,    12), S(   -40,    14), S(   -27,    13), S(   -37,    21),
                S(   -18,    -6), S(   -28,    12), S(   -28,     0), S(   -39,    13), S(   -34,     2), S(   -29,     3), S(   -22,     5), S(   -51,    22),
                S(   -18,   -24), S(   -32,   -13), S(   -27,    -8), S(   -28,    -8), S(   -25,   -14), S(   -29,    -9), S(    -3,   -36), S(   -78,    10),
                S(    -3,   -22), S(    -9,   -21), S(   -15,   -14), S(   -17,   -13), S(   -20,   -17), S(   -25,    -8), S(   -23,   -21), S(   -33,    -7)
        },
        {
                S(   -41,    29), S(    14,    -6), S(    -2,    22), S(     5,    15), S(    -7,    32), S(   120,   -33), S(    86,   -27), S(    59,   -15),
                S(   -28,    12), S(   -54,    31), S(   -45,    54), S(   -44,    40), S(   -52,    61), S(    -4,    49), S(    51,   -16), S(    30,     0),
                S(   -19,     4), S(   -41,    32), S(   -48,    36), S(   -53,    49), S(   -31,    36), S(     6,    20), S(    18,    25), S(    -6,    34),
                S(   -14,    13), S(   -19,    20), S(   -40,    54), S(   -37,    51), S(   -38,    43), S(   -27,    51), S(   -19,    49), S(   -16,    38),
                S(    11,   -23), S(     2,    11), S(   -11,    21), S(   -15,    41), S(   -20,    17), S(   -12,    16), S(   -12,     8), S(    -8,    19),
                S(     5,    -4), S(     7,    -1), S(    -3,    17), S(    -1,     9), S(    -4,    -2), S(     3,     1), S(    13,   -31), S(    17,   -37),
                S(    12,   -26), S(    18,   -21), S(    19,   -30), S(    21,   -30), S(    22,   -41), S(    37,   -83), S(    24,   -72), S(    21,   -53),
                S(     9,   -33), S(    23,   -64), S(    15,   -47), S(    20,   -31), S(    19,   -59), S(    14,   -80), S(    19,  -101), S(    30,   -94)
        },
        {
                S(  -489,  -184), S(   324,   -59), S(   123,     9), S(    43,    17), S(    45,    11), S(   195,   -17), S(   393,  -311), S(  -133,  -287),
                S(   141,   -19), S(   179,   -12), S(   183,    25), S(    45,    19), S(    34,    18), S(   133,     9), S(   101,     8), S(   -78,    11),
                S(   163,   -37), S(   159,     1), S(    89,    29), S(    22,    21), S(     1,    23), S(    84,    17), S(   114,    12), S(   -23,    15),
                S(    20,     8), S(    49,    16), S(    49,    30), S(    24,    11), S(    -5,    15), S(    69,    11), S(    92,     5), S(   -16,    11),
                S(     2,    18), S(    17,    27), S(    69,    20), S(    55,    -2), S(    91,    -7), S(    91,     5), S(    56,     8), S(   -41,    16),
                S(   -80,    37), S(    -4,    30), S(    45,    19), S(    42,   -13), S(    36,    -8), S(    54,     8), S(    14,    14), S(   -45,    16),
                S(   -61,    30), S(   -35,    31), S(   -11,    22), S(   -36,    -3), S(   -30,    -4), S(   -21,    19), S(    -5,    19), S(   -31,     9),
                S(  -176,    65), S(   -38,    25), S(   -64,    33), S(   -92,    -4), S(   -32,   -21), S(   -77,    20), S(   -28,    14), S(   -54,     6)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -34,   -86), S(   -15,   -37), S(    -9,    -4), S(    -5,    15), S(     0,    23), S(     6,    29), S(    13,    26), S(    18,    23), S(    26,    12), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -30,   -48), S(   -25,   -36), S(   -18,   -23), S(   -13,    -7), S(   -10,     4), S(    -8,     9), S(    -4,    12), S(    -3,    11), S(     0,    14), S(     5,    14), S(     5,    15), S(    11,    13), S(    43,    16), S(    46,     5), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -42,   -61), S(   -35,   -20), S(   -34,    -8), S(   -30,     2), S(   -28,    10), S(   -25,    16), S(   -18,    14), S(   -12,    13), S(    -7,    19), S(     1,    18), S(     9,    16), S(    12,    12), S(    22,    10), S(    35,     1), S(   152,   -42), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -93,  -242), S(  -104,  -217), S(  -107,   -78), S(  -108,   -33), S(  -108,    29), S(  -106,    45), S(  -105,    69), S(  -102,    74), S(  -100,    84), S(   -98,    86), S(   -99,    98), S(   -96,    97), S(   -97,   104), S(   -95,   105), S(   -93,   105), S(   -89,   112), S(   -88,   110), S(   -68,    93), S(   -54,    85), S(   -19,    63), S(    37,    27), S(   106,   -19), S(    88,    -8), S(   432,  -214), S(   282,  -118), S(   516,  -241), S(   155,   -84), S(   213,  -130)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(   -95,    46), S(   -65,    38), S(   -65,    38), S(   -36,    38), S(    60,    28), S(   144,    80), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -53,    48), S(   -64,    40), S(   -11,    54), S(   146,    54), S(   239,    75), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -148,    64), S(   -63,     3), S(    23,    38), S(   219,    22), S(   102,   -20), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -99,    16), S(    12,    -6), S(   -35,   -16), S(    -1,   -24), S(   -57,   -15), S(  -277,    25)},
        {S(     0,     0), S(     0,     0), S(    -8,   -53), S(    12,   -39), S(    17,   -43), S(    -5,   -66), S(    -1,   -76), S(   -16,  -118)},
        {S(     0,     0), S(     0,     0), S(    41,   -15), S(     7,     4), S(     7,     3), S(     3,    31), S(   -28,    13), S(  -166,    48)},
        {S(     0,     0), S(     0,     0), S(     2,   -57), S(   -75,    80), S(     9,   -53), S(    20,     7), S(     2,    50), S(   126,    26)},
        {S(     0,     0), S(     0,     0), S(   290,   -32), S(    59,   -28), S(   113,   -40), S(    49,   -31), S(   -38,   -28), S(   -49,   -97)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    12,    11), S(    26,   -17), S(    16,    -9), S(   -31,    11), S(    95,    -8)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     9,   -23), S(    15,   -17), S(   -11,   -17), S(   -23,    -6), S(   -53,     2)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     5,   -23), S(    -9,     5), S(    23,     7), S(    -3,    28), S(   -41,    21)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    25,   -44), S(    -5,     3), S(   -10,   -17), S(     1,    39), S(   -29,    98)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    11,   -19), S(   -58,    -3), S(     2,   -32), S(    10,   -29), S(    -3,   -51)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(     0,    -5), S(    -1,    -5), S(    15,    10), S(    51,    50), S(   116,    95), S(   115,   153), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -18,    -8);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    27,    33);

constexpr SCORE_TYPE TEMPO_BONUS = S(    11,     4);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    19,     1), S(     7,     7), S(   -10,     4)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    32,    -9), S(     4,     2), S(   -38,     4)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(    16,   -46), S(    49,    29), S(    45,    46), S(    55,    32), S(    27,    32), S(     0,     0)},
        {S(    -6,    12), S(     0,     0), S(    29,    13), S(    52,     8), S(    18,    49), S(     0,     0)},
        {S(     0,    16), S(    16,    27), S(    16,     5), S(    55,    14), S(    38,    56), S(     0,     0)},
        {S(    -8,    20), S(     3,    18), S(     7,    14), S(     4,    -8), S(    48,     5), S(     0,     0)},
        {S(     1,     7), S(     1,     1), S(    -5,    21), S(    -6,     7), S(   -21,     6), S(   277,  -230)},
        {S(    66,    15), S(    -2,     8), S(    63,     1), S(    34,    -8), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    17,    -6), S(    15,    -8), S(    23,    -2), S(    12,    -2), S(    19,    -1), S(     0,     0)},
        {S(    11,    -4), S(    13,    -2), S(    14,    -1), S(     7,     0), S(    12,     0), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    27,    14), S(    12,   -16), S(    -4,   -10), S(   -10,   -11), S(   -21,    -9), S(   -29,    -3), S(   -37,    -2), S(   -39,    -2), S(   -35,    -4), S(   -36,    -4), S(   -35,    -5), S(   -33,    -5), S(   -26,    -7), S(   -21,    -6), S(   -17,    -7), S(   -26,     0), S(   -17,    -1), S(   -12,     2), S(     4,    -7), S(     1,     2), S(   -15,     9), S(    -4,     4), S(    44,   -19), S(    -5,    15), S(    29,     1), S(    -4,    42), S(    19,    40), S(    44,     5), S(   109,    -9), S(   135,   -35), S(    -2,    34), S(    80,    58), S(    11,   -69), S(   101,    49), S(   119,    23), S(   -70,    11), S(    37,    16), S(   102,    28), S(   -50,    -1), S(    52,    13)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(   -10,     4), S(    36,   -13), S(    30,   -18), S(     0,     0), S(     0,     0), S(     8,    -1), S(    19,    -9), S(     3,    -6)},
        {S(    33,    -7), S(    39,   -12), S(    -2,    -6), S(     0,     0), S(     0,     0), S(     3,   -13), S(     3,   -11), S(    12,    -6)},
        {S(    10,    -1), S(    -6,    -4), S(   -14,     6), S(     0,     0), S(     0,     0), S(     5,   -12), S(    -9,   -11), S(    12,   -12)},
        {S(    12,    -1), S(     6,    10), S(    10,     7), S(     0,     0), S(     0,     0), S(    -4,    -3), S(     0,    -5), S(     8,    -8)},
        {S(   -12,    -1), S(   -22,    -4), S(   -15,    -4), S(     0,     0), S(     0,     0), S(   -15,     5), S(   -27,     9), S(   -26,    10)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(    86,     1), S(   220,   -26), S(   192,     1), S(     0,     0), S(     0,     0), S(    42,    20), S(    89,    34), S(   132,     1)},
        {S(   -42,    16), S(   -90,    30), S(   -51,    30), S(     0,     0), S(     0,     0), S(   -35,     2), S(   -86,    25), S(     6,     3)},
        {S(     9,    13), S(     7,     2), S(   -43,    15), S(     0,     0), S(     0,     0), S(     5,     4), S(    19,   -14), S(     8,    -4)},
        {S(   -10,     0), S(   -15,    -1), S(   -10,    -2), S(     0,     0), S(     0,     0), S(    -3,    -1), S(     7,    -6), S(    -3,     3)},
        {S(    -5,     1), S(     3,   -10), S(    -7,    -3), S(     0,     0), S(     0,     0), S(    -4,    -6), S(     7,    -7), S(    -5,    -4)},
        {S(    -1,    -8), S(   -38,    -1), S(    -1,    -7), S(     0,     0), S(     0,     0), S(     8,    -3), S(   -13,     0), S(   -10,    -2)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(     0,    -2), S(     3,    -1), S(    -5,     4), S(    -5,    -1), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -3), S(    -4,     1), S(    -2,     2), S(     2,     0), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -25,   -23);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(     2,     2);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(   -11,     0), S(   -17,   -18)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(    -2,     2), S(     2,    -1), S(     6,    -5), S(    12,   -10), S(    -5,    -7), S(     3,   -14), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    16,    -5), S(     8,    -3), S(     9,     3), S(     0,    13), S(     7,    20), S(    -6,    11), S(     0,     0)};





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
