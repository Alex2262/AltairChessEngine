//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   124,   141), S(   504,   443), S(   490,   421), S(   671,   774), S(  1500,  1365), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56),
                S(   178,    52), S(   144,    73), S(    95,    78), S(   133,    58), S(    84,    90), S(   140,    94), S(    -9,   131), S(    64,   112),
                S(   -20,    39), S(   -16,    40), S(     8,    26), S(    19,    19), S(    37,    20), S(    13,    30), S(   -20,    51), S(   -25,    63),
                S(   -27,    19), S(   -11,     7), S(    -9,    -3), S(     7,   -15), S(     5,    -6), S(     4,    -1), S(     8,     8), S(   -43,    23),
                S(   -30,     7), S(   -31,     4), S(   -10,   -11), S(     5,   -15), S(     0,   -14), S(     7,    -9), S(   -18,    -1), S(   -42,     6),
                S(   -29,    -6), S(   -26,    -8), S(   -10,   -11), S(    -2,   -13), S(     6,    -2), S(    10,   -11), S(    16,   -13), S(   -22,    -7),
                S(   -27,     3), S(   -29,    -5), S(   -24,     5), S(   -12,    -3), S(   -17,    13), S(    24,   -14), S(    14,   -10), S(   -17,    -3),
                S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56), S(   -31,   -56)
        },
        {
                S(  -224,   -56), S(  -133,   -21), S(   -83,    12), S(     3,   -16), S(    68,   -20), S(  -156,     2), S(   -36,   -62), S(  -144,  -109),
                S(   -23,   -26), S(   -38,     5), S(    31,    -7), S(    26,    30), S(    23,    17), S(    31,    -6), S(   -40,    -5), S(   -25,   -35),
                S(   -24,   -20), S(    32,     5), S(    58,    27), S(    84,    32), S(    95,    15), S(   113,    15), S(    54,    -4), S(    40,   -43),
                S(    31,    -3), S(    46,    27), S(    53,    43), S(    72,    53), S(    51,    62), S(    64,    47), S(    35,    31), S(    36,     2),
                S(    10,     0), S(    22,    13), S(    39,    41), S(    40,    55), S(    41,    47), S(    31,    41), S(    36,    27), S(    -4,     0),
                S(    -7,   -23), S(     7,    -2), S(    20,     9), S(    18,    33), S(    26,    29), S(    16,     1), S(     6,    -6), S(   -15,   -17),
                S(   -37,   -35), S(   -23,    -2), S(    -9,     0), S(     6,    10), S(    -3,    18), S(    -6,    -4), S(   -19,   -14), S(   -15,   -35),
                S(   -93,   -40), S(   -18,   -41), S(   -26,    -8), S(   -27,     8), S(   -12,    -9), S(   -21,    -4), S(   -30,   -35), S(   -73,   -51)
        },
        {
                S(   -23,    -6), S(    18,    -3), S(   -96,    14), S(   -68,    10), S(   -82,    18), S(   -92,     9), S(    13,    -5), S(    60,   -26),
                S(   -14,     5), S(    11,     3), S(     2,    11), S(   -29,    11), S(   -19,    18), S(    -4,    12), S(   -15,     6), S(   -49,     5),
                S(    31,    -5), S(    34,     6), S(    52,    -1), S(    20,     8), S(    24,     4), S(    32,    21), S(    28,    20), S(    19,    13),
                S(    -3,     0), S(    20,    14), S(     0,    20), S(    44,    12), S(    19,    18), S(     7,    13), S(    -7,    26), S(    -8,    14),
                S(     2,    -7), S(     7,     4), S(    11,    10), S(    22,    16), S(    29,     1), S(   -11,    16), S(    -4,     3), S(     3,   -10),
                S(    -1,   -18), S(    18,    -5), S(    11,     2), S(     3,     8), S(     1,    22), S(    12,     4), S(     9,     0), S(     9,   -20),
                S(     2,   -30), S(    14,   -33), S(    13,   -16), S(    -5,    -5), S(     1,    -3), S(    -1,   -12), S(    28,   -18), S(     1,   -44),
                S(    17,   -56), S(     1,   -26), S(   -13,   -14), S(   -10,    -6), S(   -25,    -2), S(   -22,     1), S(   -28,     7), S(   -19,   -33)
        },
        {
                S(    18,     6), S(    21,     9), S(   -21,    22), S(   -30,    26), S(     5,    15), S(   -17,    20), S(   -45,    25), S(    59,     3),
                S(    13,     6), S(    -2,    14), S(    23,     7), S(    32,     9), S(    17,     7), S(    40,    -4), S(    -9,    16), S(    24,     2),
                S(    -6,     5), S(    22,    -3), S(    30,    -4), S(    30,    -4), S(    25,    -5), S(    53,    -4), S(    75,   -14), S(    34,   -17),
                S(    -3,     5), S(     5,    -1), S(    20,     4), S(    32,    -4), S(    10,     4), S(    28,     1), S(   -14,     5), S(    -1,     4),
                S(   -26,     7), S(   -25,    12), S(   -18,     9), S(   -12,    11), S(   -18,     9), S(    -6,    -2), S(     0,    -2), S(   -22,    -2),
                S(   -26,   -11), S(   -14,    -5), S(   -20,    -3), S(   -15,     1), S(   -20,     3), S(    -9,    -9), S(     1,    -4), S(   -28,   -10),
                S(   -34,    -9), S(   -12,   -14), S(   -21,     0), S(   -12,    -6), S(   -11,    -5), S(    -6,   -13), S(    -4,   -18), S(   -82,     9),
                S(     4,   -20), S(    -4,   -10), S(    -2,    -7), S(     4,   -14), S(    -3,   -14), S(     0,    -8), S(   -22,    -2), S(    -7,   -30)
        },
        {
                S(   -40,   -19), S(   -47,    29), S(   -10,     6), S(   -16,   -17), S(     7,     3), S(    11,     8), S(    49,   -20), S(    12,    -4),
                S(     2,   -20), S(   -48,    18), S(   -38,    28), S(   -70,    40), S(  -110,    71), S(   -43,    39), S(   -11,    15), S(   -11,    25),
                S(     4,   -24), S(    -6,   -16), S(   -12,   -15), S(   -58,    44), S(   -56,    44), S(    14,    22), S(    14,    22), S(   -25,    79),
                S(     7,   -25), S(     5,     0), S(   -18,    20), S(   -29,    28), S(   -41,    46), S(   -26,    40), S(   -20,    46), S(    -7,    39),
                S(    24,   -30), S(    21,    18), S(    13,     3), S(    -4,    42), S(    -5,    23), S(   -10,    30), S(    10,    11), S(    -4,    14),
                S(    25,   -22), S(    44,   -45), S(    21,    11), S(    14,     1), S(     5,    10), S(     5,    22), S(    18,     7), S(     0,    20),
                S(    27,   -32), S(    39,   -40), S(    44,   -52), S(    27,    -6), S(    28,   -31), S(    28,   -42), S(    20,   -45), S(    -5,   -12),
                S(    59,   -60), S(    34,   -55), S(    39,   -45), S(    44,   -55), S(    23,   -31), S(    12,   -48), S(    36,   -67), S(   -15,   -46)
        },
        {
                S(  -296,   -23), S(    99,   -25), S(   183,   -15), S(    53,   -25), S(  -223,    29), S(   -71,    52), S(     5,    21), S(     5,     0),
                S(    79,   -15), S(   139,    19), S(   128,    27), S(    82,    20), S(    62,    20), S(   145,    29), S(    42,    44), S(  -171,    44),
                S(    45,    12), S(   163,    13), S(   186,    14), S(    62,     9), S(   154,    -5), S(   234,    25), S(   263,    22), S(     6,    24),
                S(     1,     8), S(    72,    15), S(   136,    12), S(    79,    10), S(    56,     8), S(   154,    14), S(   115,    11), S(   -68,    21),
                S(   -67,    -3), S(   139,   -27), S(    94,     4), S(    57,     7), S(    95,     2), S(   121,     5), S(   107,    -3), S(   -59,     7),
                S(   -99,     9), S(   -12,     9), S(    21,    10), S(    73,    -2), S(    92,    -6), S(    93,     5), S(    59,     4), S(   -24,     4),
                S(   -86,     2), S(   -68,     9), S(   -58,    17), S(   -66,    11), S(   -29,     7), S(   -28,    24), S(     1,     8), S(   -17,    -6),
                S(   -79,   -71), S(   -51,   -26), S(   -91,     1), S(  -106,    -8), S(   -30,   -43), S(  -103,    18), S(   -15,   -10), S(   -24,   -56)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(    19,    35), S(   -50,    54), S(   -97,    86), S(   -57,    88), S(   -19,   124), S(   151,   145), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -40,    59), S(   -90,    89), S(   -33,   111), S(    29,   181), S(   424,   156), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(    -6,    63), S(   -95,    73), S(    11,    88), S(   108,   121), S(   233,   188), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(    26,   -51), S(    -6,    -1), S(    -6,   -21), S(   -21,   -64), S(   -25,   -93), S(   115,  -205)},
        {S(     0,     0), S(     0,     0), S(    -4,   -33), S(    -5,   -46), S(    -3,   -41), S(     5,   -62), S(   -22,  -122), S(    53,  -255)},
        {S(     0,     0), S(     0,     0), S(    31,   -25), S(   -16,    30), S(    -8,    10), S(    10,    -1), S(   -14,   -38), S(     1,  -118)},
        {S(     0,     0), S(     0,     0), S(     9,   -22), S(   -48,    22), S(     9,   -41), S(   -10,    22), S(    19,   -54), S(    39,    73)},
        {S(     0,     0), S(     0,     0), S(    35,    -5), S(    57,    -3), S(   -35,    -1), S(   -18,    -7), S(  -106,   -55), S(   -15,  -140)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     3,   -16), S(   -21,   -13), S(    -6,    -7), S(     6,   -18), S(    37,  -111)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    11,   -14), S(     0,   -12), S(   -15,     0), S(    -3,   -28), S(    27,   -73)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    25,   -24), S(    33,   -23), S(   -12,    21), S(     4,     8), S(    29,   -52)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    36,   -39), S(   -12,     8), S(     0,   -16), S(    17,   -17), S(     6,    78)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   127,   -20), S(    44,   -12), S(   -36,    -2), S(     0,   -19), S(    26,   -91)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(    -9,   -12), S(    -7,    -4), S(    12,    12), S(    39,    69), S(    49,   153), S(    86,   447), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -13,   -15);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    30,    66);

constexpr SCORE_TYPE TEMPO_BONUS = S(    26,    25);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(     0,     0), S(     7,     2), S(     7,     6), S(     6,     5), S(     3,     5), S(     0,     0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    21,    -1), S(     1,    14), S(   -20,    10)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    42,    -6), S(    -7,    16), S(   -53,     1)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(    11,   -14), S(    75,    41), S(    73,    82), S(   109,     1), S(    75,    37), S(   220,    68)},
        {S(   -10,    13), S(     0,     0), S(    32,    43), S(    61,    24), S(    48,     8), S(   129,    18)},
        {S(     2,    14), S(    32,    47), S(   -40,   -78), S(    46,    37), S(    52,    65), S(    79,    73)},
        {S(   -13,    23), S(    -3,    28), S(     3,    35), S(   -19,    18), S(    43,    53), S(   121,    33)},
        {S(    -4,    13), S(     4,     2), S(    -1,    36), S(   -14,    36), S(    -5,     1), S(    70,   107)},
        {S(     5,    40), S(     3,    21), S(   -23,    36), S(     3,    24), S(  -237,    53), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    45,   -14), S(    33,   -16), S(    43,    -8), S(    42,   -12), S(    38,    -1), S(     0,     0)},
        {S(    24,    -9), S(    24,    -3), S(    25,    -3), S(    16,    -3), S(    21,     7), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    56,    -2), S(    32,    -7), S(     9,    -7), S(   -11,    -4), S(   -30,    -2), S(   -42,     1), S(   -54,     4), S(   -58,     5), S(   -66,     8), S(   -71,     7), S(   -68,     7), S(   -62,     6), S(   -64,     8), S(   -64,     8), S(   -57,     9), S(   -57,    11), S(   -45,     9), S(   -39,    11), S(   -45,    13), S(     2,    -9), S(   -33,    13), S(    -5,    -1), S(    57,   -11), S(     7,     7), S(    94,   -26), S(    47,    13), S(   216,   -87), S(   -17,    63), S(   100,    12), S(   118,   -92), S(   373,  -118), S(   218,    52), S(   159,    18), S(   176,   116), S(   235,   -32), S(   -65,    -5), S(   -30,    -1), S(   276,    86), S(     2,     1), S(   -23,    17)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(    29,   -14), S(    48,   -10), S(    47,   -11), S(     0,     0), S(     0,     0), S(     7,     7), S(    26,    -7), S(     8,   -24)},
        {S(    31,    -9), S(    36,    -6), S(    12,    -1), S(     0,     0), S(     0,     0), S(    -8,    -2), S(     6,    -8), S(    12,    -7)},
        {S(    26,     3), S(   -13,     9), S(     9,    -4), S(     0,     0), S(     0,     0), S(    -7,    -5), S(    -4,    -3), S(     8,    -5)},
        {S(    13,    17), S(    -4,    23), S(   -18,    28), S(     0,     0), S(     0,     0), S(    17,    -8), S(   -29,    12), S(     9,     3)},
        {S(   -19,    -3), S(   -26,    -7), S(   -10,   -10), S(     0,     0), S(     0,     0), S(   -18,    -1), S(   -23,     4), S(   -26,     7)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(   141,    20), S(    36,    42), S(    96,   -29), S(     0,     0), S(     0,     0), S(     1,    59), S(    24,    38), S(   109,    14)},
        {S(    10,     0), S(   -46,    20), S(   -97,    30), S(     0,     0), S(     0,     0), S(   -50,    13), S(   -64,    30), S(   -21,    28)},
        {S(     1,    13), S(    28,     4), S(    -6,    11), S(     0,     0), S(     0,     0), S(     8,     2), S(    24,    -1), S(     2,     3)},
        {S(    -6,     2), S(    12,     2), S(    14,     5), S(     0,     0), S(     0,     0), S(     4,     3), S(     0,     4), S(    -6,     2)},
        {S(    -4,    -2), S(    22,   -15), S(    21,    -2), S(     0,     0), S(     0,     0), S(     6,   -10), S(    15,    -7), S(     4,    -6)},
        {S(   -11,    -1), S(   -13,     3), S(    12,     4), S(     0,     0), S(     0,     0), S(     3,    -2), S(   -12,    -1), S(     0,    -9)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -3), S(     2,     1), S(    -4,     1), S(    -8,     2), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -5,     1), S(    -6,     1), S(    -1,     1), S(    -2,     4), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -20,   -29);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(   -29,    53);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY = S(   -13,     1);

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(    -2,    -1), S(     1,    -6), S(     9,   -14), S(    10,   -21), S(    12,   -23), S(   -12,   -20), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    -1,    -5), S(     9,    -4), S(    14,     0), S(     9,    15), S(     4,    31), S(   -10,    40), S(     0,     0)};






#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
