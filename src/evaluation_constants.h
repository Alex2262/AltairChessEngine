

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S(    64,    84), S(   305,   120), S(   321,   107), S(   483,   182), S(  1343,   150), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(    42,   -20), S(   -32,    29), S(   -62,    72), S(    12,    16), S(   -90,    63), S(  -151,    56), S(    13,    48), S(   116,     9),
                S(    31,    17), S(    16,    -7), S(   -27,    34), S(    20,   -10), S(   -15,    -2), S(    25,     1), S(    -8,    45), S(    52,    36),
                S(    -5,     2), S(     1,   -14), S(    -9,   -16), S(    20,   -19), S(     5,   -12), S(    25,   -20), S(    -1,    -8), S(     6,    -9),
                S(   -11,    -2), S(   -10,   -16), S(    -4,   -30), S(    17,   -41), S(     7,   -21), S(    16,   -20), S(   -13,     2), S(    -9,     0),
                S(    -4,   -11), S(     1,   -15), S(    -7,   -14), S(    23,   -17), S(    14,   -19), S(    14,    -7), S(     3,    -1), S(    -3,    -6),
                S(   -18,   -17), S(   -10,    -3), S(   -11,    -7), S(    11,   -28), S(     2,   -24), S(    32,   -10), S(    -3,    13), S(   -20,     3),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(   -93,    79), S(    -9,   -30), S(   -93,    10), S(   342,  -205), S(  -142,    29), S(    44,   -22), S(    45,   -25), S(   -19,    -2),
                S(    -9,    21), S(     6,   -39), S(    34,     1), S(    34,     9), S(   -33,    59), S(   -13,     4), S(   -78,   -15), S(    -2,     1),
                S(    -4,   -34), S(   -12,    30), S(    48,     5), S(    36,    14), S(    27,    21), S(    58,    18), S(    38,    21), S(    11,    -5),
                S(   -23,    -6), S(    -2,    19), S(     2,     1), S(    12,    33), S(     3,    56), S(   -26,    43), S(    -6,    27), S(    -7,    -4),
                S(     9,   -34), S(    25,     4), S(     4,    25), S(   -25,    25), S(    -1,    26), S(    22,    21), S(    30,     9), S(    37,   -28),
                S(   -35,   -21), S(   -76,    -6), S(     4,    40), S(    15,    25), S(   -36,    32), S(    -3,    20), S(    19,   -14), S(   -10,    -9),
                S(   -10,   -24), S(    28,     1), S(   -61,    -8), S(   -15,    -3), S(   -14,    16), S(     8,    14), S(    52,    -5), S(   -15,   -31),
                S(   -79,   -63), S(   -15,   -21), S(    10,   -45), S(    14,    12), S(    -4,   -37), S(    -3,   -20), S(   -13,     6), S(   -24,   -23)
        },
        {
                S(   -78,    10), S(    -8,   -17), S(  -104,    20), S(   -29,    15), S(   -66,    15), S(    -8,    23), S(   -10,   -23), S(    22,   -38),
                S(   -48,    19), S(     0,     6), S(    31,     2), S(     6,     2), S(   -18,    11), S(    -9,    36), S(    13,   -11), S(    11,   -41),
                S(   -49,    25), S(    14,     2), S(    49,     5), S(    18,    18), S(    67,    14), S(    53,     0), S(    87,     7), S(    25,   -13),
                S(   -15,     2), S(    23,     8), S(    -8,    15), S(    21,    36), S(    10,    10), S(    29,    19), S(     8,     9), S(     2,     9),
                S(    10,     6), S(    23,     5), S(     1,    15), S(    20,     7), S(    13,    20), S(    -3,    11), S(    -3,    16), S(     9,     4),
                S(    -1,   -15), S(   -45,    22), S(    17,     0), S(     4,    25), S(     4,     7), S(    11,     6), S(     2,    17), S(     3,    -5),
                S(   -10,   -39), S(    -2,   -20), S(    -2,     6), S(     9,    -2), S(     3,     3), S(    13,     3), S(     7,    -6), S(   -28,   -65),
                S(   -37,   -31), S(   -65,   -31), S(    -6,   -20), S(    11,   -28), S(    25,   -49), S(   -14,    -7), S(   -22,   -40), S(    11,    -9)
        },
        {
                S(    56,   -15), S(   -24,    34), S(    32,     9), S(    49,    11), S(   -17,    41), S(    14,    14), S(    17,    13), S(    -7,    25),
                S(    22,    -2), S(   -35,    32), S(    24,    14), S(    73,    -8), S(    55,     0), S(    21,    14), S(   -50,    35), S(     1,    18),
                S(   -10,     2), S(   -36,    12), S(   -10,     6), S(    24,    -5), S(    18,    -8), S(    63,   -25), S(    21,    -3), S(     7,     5),
                S(   -39,     6), S(    10,    -2), S(   -36,    16), S(    14,    -4), S(    16,    -7), S(    85,   -31), S(    -9,    -4), S(   -33,     2),
                S(   -24,     9), S(   -11,   -15), S(   -29,    -2), S(     3,    -9), S(   -61,     9), S(   -12,   -29), S(    12,   -10), S(   -28,    12),
                S(   -32,     8), S(    11,   -17), S(    -3,    -3), S(     3,     5), S(    -6,    -1), S(   -12,   -20), S(     9,     3), S(   -16,    -3),
                S(   -14,   -27), S(   -25,    -5), S(     7,   -13), S(   -20,    -1), S(     8,     2), S(     1,   -49), S(   -28,    13), S(   -39,     5),
                S(     9,   -16), S(     2,   -17), S(     3,   -17), S(    13,   -19), S(     0,     5), S(    -9,    -1), S(   -15,     0), S(   -13,     8)
        },
        {
                S(   -64,    13), S(     4,    17), S(   -48,    25), S(   -91,    80), S(    10,    35), S(     1,    -8), S(    18,    11), S(    -7,    46),
                S(    23,   -34), S(   -68,    41), S(    -7,    30), S(  -122,   103), S(   -61,    74), S(    12,    10), S(    15,    -5), S(     5,    -8),
                S(   -14,    -6), S(   -42,    23), S(   -48,    63), S(   -45,    55), S(   -28,    46), S(    18,    -7), S(    -4,     7), S(    65,  -127),
                S(    10,   -19), S(   -29,    88), S(   -29,    72), S(   -51,    97), S(   -78,   129), S(   -44,    58), S(     7,    -8), S(     3,    -8),
                S(    25,   -18), S(   -16,    45), S(   -30,    71), S(   -14,    61), S(   -44,    80), S(     1,    18), S(    -4,     8), S(    23,   -33),
                S(    36,   -17), S(    28,   -30), S(     3,    35), S(    -4,    35), S(   -19,    13), S(     3,     7), S(    29,   -79), S(    41,   -76),
                S(    67,   -81), S(    41,   -40), S(    30,   -36), S(    27,   -28), S(    34,   -57), S(    12,   -39), S(    52,   -76), S(    49,   -97),
                S(    68,   -90), S(    58,   -82), S(    39,   -72), S(    33,   -63), S(   -11,   -38), S(    42,   -59), S(    30,   -68), S(    59,   -89)
        },
        {
                S(   139,   -95), S(   462,  -155), S(   134,   -67), S(  -108,     3), S(  -105,   -19), S(  -202,   -19), S(  -203,   -16), S(  -218,   -49),
                S(   -98,    32), S(   -14,    19), S(   -38,    -4), S(   -63,    31), S(    51,   -16), S(  -122,   -19), S(   -11,   -17), S(  -304,     1),
                S(  -201,    51), S(   -30,    29), S(    40,     7), S(    56,    29), S(  -118,     1), S(   -92,    20), S(   -94,    -3), S(   -90,    -9),
                S(  -210,    41), S(   -32,    21), S(    13,     9), S(    25,    16), S(   -61,    -6), S(    55,    -5), S(   -38,    -4), S(    32,   -26),
                S(   -69,     6), S(   -19,    16), S(    43,    -8), S(   -23,    15), S(    79,   -23), S(    73,    -6), S(    93,    -1), S(    -9,     6),
                S(   -76,    23), S(   -22,    16), S(    48,    -9), S(    49,   -11), S(    58,   -13), S(    19,    23), S(    11,    11), S(   -50,     3),
                S(   -15,     1), S(   -11,     6), S(    31,    -8), S(    -1,     2), S(     4,   -13), S(    16,    15), S(    16,    10), S(   -12,     4),
                S(   -93,    27), S(    14,    -5), S(    -2,    -4), S(   -26,    -6), S(     6,   -22), S(    21,     0), S(    36,     1), S(    26,     9)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -10,   -11), S(    -8,    28), S(    -5,    -5), S(    -5,     8), S(    -1,     9), S(     3,     9), S(     8,    -6), S(    10,   -10), S(     8,   -21), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -33,   -28), S(   -25,    -1), S(   -18,     6), S(   -16,    13), S(   -14,    16), S(   -13,    18), S(    -7,    18), S(    -7,     7), S(   -11,    15), S(     5,     6), S(   -19,    11), S(    15,   -12), S(    71,   -27), S(    74,   -42), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -44,   -34), S(   -44,    -6), S(   -37,    -3), S(   -32,    15), S(   -26,    23), S(   -22,    22), S(   -19,    18), S(   -16,    16), S(   -17,    21), S(    -8,    15), S(    -1,     6), S(    16,     1), S(    46,   -10), S(    62,   -29), S(   141,   -56), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -98,  -113), S(   -69,  -149), S(   -62,   -78), S(   -59,   -63), S(   -56,   -19), S(   -59,    10), S(   -57,    16), S(   -57,    42), S(   -54,    49), S(   -51,    52), S(   -51,    68), S(   -57,    91), S(   -58,   110), S(   -55,   112), S(   -49,    94), S(   -41,    90), S(   -19,    66), S(    -2,    48), S(    20,    27), S(    34,    24), S(    80,    11), S(   187,   -67), S(   221,   -87), S(   192,   -79), S(   238,  -112), S(   230,  -120), S(   -80,   -10), S(  -168,   -15)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(   -88,    61), S(  -108,    70), S(   -40,    64), S(   -21,    45), S(   134,    31), S(   -10,    67), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -91,    63), S(   -38,    62), S(    12,    53), S(   222,    43), S(   175,    71), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -132,   112), S(   -14,    67), S(  -113,   139), S(   258,   -38), S(    94,   301), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -142,   -63), S(   -87,   -16), S(   -40,   -11), S(   -49,   -11), S(   -16,   -21), S(   -96,   -13)},
        {S(     0,     0), S(     0,     0), S(     6,   -92), S(    73,   -51), S(    35,   -62), S(    30,   -65), S(   -19,   -74), S(   -41,   -98)},
        {S(     0,     0), S(     0,     0), S(    35,   -30), S(    19,     1), S(    11,   -19), S(    34,   -19), S(   -92,    41), S(  -143,    56)},
        {S(     0,     0), S(     0,     0), S(     4,   -61), S(   -16,    36), S(    77,  -135), S(    94,   -99), S(    22,    36), S(  -103,   122)},
        {S(     0,     0), S(     0,     0), S(   -59,     9), S(  -104,   -18), S(    77,   -38), S(   -42,    12), S(   -15,    -3), S(   -36,   -50)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(  -112,    43), S(    20,     0), S(    -1,   -13), S(   -31,    -1), S(    43,   -66)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    22,   -47), S(    94,   -34), S(    49,   -32), S(   -12,   -16), S(   -40,    19)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   -48,     6), S(    39,   -23), S(    20,     0), S(    16,     2), S(   -47,    16)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    12,   -47), S(    24,   -61), S(    -5,   -73), S(    56,  -136), S(    -5,     2)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(  -284,    20), S(   -84,     5), S(   -43,    -1), S(   -37,    -4), S(     0,   -32)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(     6,   -12), S(    -1,    -7), S(     0,     4), S(    13,    52), S(    70,    37), S(  -337,   288), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -13,    -7);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    27,    10);

constexpr SCORE_TYPE TEMPO_BONUS = S(    13,     5);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(     8,     1), S(     4,   -14), S(   -11,     6)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    33,   -15), S(    10,   -35), S(   -44,    11)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(   -11,   -44), S(    78,     1), S(    47,    52), S(    92,   -28), S(    11,    53), S(     0,     0)},
        {S(    -9,    22), S(     0,     0), S(    39,     5), S(    71,    11), S(    20,   107), S(     0,     0)},
        {S(    -3,    27), S(     5,    21), S(   -27,  -149), S(    57,    24), S(    34,    22), S(     0,     0)},
        {S(   -11,    34), S(     3,    12), S(    15,    17), S(    -2,   -63), S(    44,    13), S(     0,     0)},
        {S(    -3,    20), S(     9,   -53), S(    -4,    26), S(    15,    -6), S(   -29,    11), S(    14,    28)},
        {S(    46,    32), S(    18,     7), S(    95,     0), S(    63,    -8), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    17,   -10), S(    19,    -4), S(    14,    -2), S(     9,    -1), S(    15,    -2), S(     0,     0)},
        {S(     7,    -2), S(    16,     0), S(    13,    -2), S(     5,    -1), S(    17,   -12), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    29,    29), S(    20,   -39), S(     8,   -29), S(    -1,   -29), S(   -13,   -20), S(   -27,   -11), S(   -32,   -11), S(   -35,   -14), S(   -34,   -11), S(   -39,   -14), S(   -32,   -16), S(   -36,   -16), S(   -31,   -16), S(   -35,   -13), S(   -32,   -12), S(   -46,    -8), S(   -34,     3), S(   -14,   -16), S(   -56,    26), S(   -41,    23), S(   -44,    17), S(   -55,    30), S(    -9,    12), S(    -4,    24), S(    44,     5), S(   -16,    55), S(   -53,   112), S(    66,     4), S(   165,   -20), S(   -35,   112), S(   165,  -147), S(   158,   -53), S(   242,    -4), S(   114,    -1), S(   156,   -88), S(   180,    90), S(   214,    81), S(   148,    70), S(    22,    10), S(   117,    37)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(   -36,    42), S(     3,     0), S(    35,    -2), S(     0,     0), S(     0,     0), S(     0,     5), S(    23,   -36), S(   -10,    -9)},
        {S(     2,    -5), S(     5,     6), S(   -23,    -6), S(     0,     0), S(     0,     0), S(   -20,     7), S(     0,   -11), S(    -3,    -7)},
        {S(    15,   -23), S(     1,    -2), S(   -31,     4), S(     0,     0), S(     0,     0), S(   -38,     4), S(   -11,     1), S(     3,    -1)},
        {S(    32,   -23), S(    26,   -16), S(    18,   -29), S(     0,     0), S(     0,     0), S(   -17,    17), S(   -57,    30), S(    -6,    13)},
        {S(     2,     9), S(    -1,     4), S(    -7,     5), S(     0,     0), S(     0,     0), S(    -5,   -18), S(   -20,   -13), S(   -12,    -8)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(   -40,     5), S(   210,   -74), S(   192,   -28), S(     0,     0), S(     0,     0), S(   -47,    88), S(    78,    59), S(    90,    52)},
        {S(    29,   -38), S(   -67,   -11), S(    -6,   -12), S(     0,     0), S(     0,     0), S(    -3,    22), S(   -29,    68), S(   -21,    68)},
        {S(    19,   -12), S(     4,   -35), S(    35,   -40), S(     0,     0), S(     0,     0), S(    12,    21), S(   -43,    21), S(   -14,    31)},
        {S(    18,    -3), S(     5,   -31), S(     9,   -28), S(     0,     0), S(     0,     0), S(    -6,    11), S(   -18,    18), S(    -8,    25)},
        {S(    10,   -13), S(     9,    -8), S(    -3,    -2), S(     0,     0), S(     0,     0), S(    -9,    17), S(     0,     1), S(   -11,     0)},
        {S(   -20,     8), S(   -13,    17), S(   -22,    16), S(     0,     0), S(     0,     0), S(    -1,    -8), S(    -2,    -9), S(    -1,   -11)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(    -1,     0), S(     4,     0), S(    -6,     4), S(    -9,    -3), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -3), S(    -3,     1), S(     1,     2), S(     0,     4), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -15,   -10);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(    -6,     8);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(    -8,    -6), S(   -13,   -13)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(   -24,    19), S(    -8,     4), S(    11,    -4), S(    12,    -7), S(   -22,    -4), S(    27,    -9), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    25,   -16), S(    21,   -11), S(    -2,    -3), S(    -9,     6), S(    -5,     8), S(    -2,     8), S(     0,     0)};




#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
