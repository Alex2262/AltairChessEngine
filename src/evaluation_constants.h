

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];


constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   120,    91), S(   404,   197), S(   407,   204), S(   579,   360), S(  1519,   425), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(    99,     4), S(    29,    64), S(    67,    70), S(    85,    38), S(   -42,    53), S(   -18,    23), S(    54,    29), S(   235,   -37),
                S(     1,    17), S(    -6,    28), S(     1,    19), S(    45,    -7), S(    29,    -9), S(    23,   -11), S(   -45,    12), S(    -1,    -5),
                S(   -22,    11), S(   -19,    -3), S(   -19,   -11), S(     6,   -18), S(     3,   -11), S(     9,   -25), S(   -11,   -15), S(   -27,   -14),
                S(   -29,    12), S(   -25,     2), S(   -17,   -16), S(     6,   -20), S(   -11,   -13), S(   -24,   -19), S(   -16,   -12), S(   -33,    -7),
                S(   -20,     1), S(   -23,    -3), S(   -33,    -4), S(    -5,   -17), S(    -8,   -12), S(    -8,   -16), S(   -11,    -5), S(   -32,   -18),
                S(   -33,    -3), S(   -27,    -3), S(   -42,     5), S(   -18,   -17), S(   -22,     5), S(    -1,   -16), S(    -3,   -15), S(   -37,   -11),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(    39,  -277), S(    -3,   -18), S(   -29,    10), S(   -15,     8), S(    37,    -9), S(   -42,    -7), S(   -34,    25), S(  -154,    59),
                S(     1,    14), S(    58,    -7), S(    50,    -8), S(     1,     5), S(    89,    -2), S(    39,    13), S(   -27,    22), S(   109,   -11),
                S(    56,   -25), S(    15,    -3), S(    52,     2), S(    66,    24), S(    79,     6), S(    69,    17), S(    75,    -9), S(     8,    14),
                S(    47,   -16), S(     6,    17), S(    16,    27), S(    34,    34), S(    18,    36), S(    21,    34), S(    14,     5), S(    17,    -4),
                S(   -16,     5), S(    16,     7), S(    -6,    40), S(    10,    11), S(     4,    38), S(     9,    17), S(    12,    12), S(   -19,    14),
                S(   -36,   -14), S(   -12,     2), S(   -22,    24), S(   -10,    19), S(   -14,    15), S(   -17,     3), S(   -23,    -4), S(   -27,    -2),
                S(   -46,    21), S(   -27,     1), S(   -35,   -32), S(   -16,    14), S(   -25,     7), S(    -1,   -10), S(   -27,    -3), S(   -30,    -1),
                S(  -130,   -97), S(   -34,    -1), S(   -40,     9), S(   -33,    -7), S(   -36,   -22), S(   -32,     1), S(   -41,    -6), S(    -8,   -34)
        },
        {
                S(   -11,    10), S(   -26,    16), S(   -35,     4), S(   -43,    19), S(    10,    -1), S(    89,    -3), S(    31,     7), S(  -156,    51),
                S(    11,     9), S(    68,    -9), S(    19,     9), S(    77,   -13), S(    22,     3), S(    -6,     6), S(   -50,    23), S(    40,     3),
                S(    23,    -8), S(    41,    -3), S(    46,    -4), S(    20,    -2), S(    60,    -3), S(    23,    21), S(    79,    -7), S(    13,     5),
                S(     2,    14), S(    17,     0), S(    36,     0), S(    33,    -2), S(     7,    13), S(    18,     1), S(     6,    13), S(   -17,     8),
                S(   -12,     3), S(     7,     8), S(     0,     2), S(     9,    14), S(    23,     2), S(    -8,    18), S(    18,     1), S(    -2,     2),
                S(   -12,   -16), S(   -13,     0), S(     9,    -4), S(    -4,    -1), S(    -9,    16), S(     9,    -3), S(    11,     0), S(     2,    -4),
                S(   -15,   -44), S(    -5,   -15), S(    -2,   -13), S(    -7,    -2), S(    -6,     1), S(    -2,    -3), S(    10,   -17), S(     7,   -45),
                S(   -45,   -50), S(  -157,    10), S(   -31,    -8), S(   -32,   -11), S(    -8,   -17), S(   -36,    -8), S(  -130,    26), S(   -15,   -21)
        },
        {
                S(    42,     9), S(   -14,    33), S(    23,    24), S(    42,    15), S(    34,     6), S(   139,   -27), S(    46,    -4), S(    27,     7),
                S(    30,    20), S(     7,    26), S(     4,    25), S(    21,    21), S(    44,    13), S(    65,    -2), S(    25,     4), S(    33,    13),
                S(     8,    18), S(     7,    13), S(     0,    17), S(    32,     2), S(     2,    12), S(   100,   -16), S(   102,   -16), S(    26,    12),
                S(   -16,    11), S(   -28,    20), S(    10,     8), S(   -28,    17), S(    18,    -9), S(    39,     3), S(   -32,     4), S(   -16,     4),
                S(   -18,     2), S(   -11,    -4), S(   -46,    13), S(   -14,    -7), S(   -48,    17), S(   -17,     3), S(   -33,    15), S(   -46,    25),
                S(   -23,    -2), S(   -33,     6), S(   -25,    -5), S(   -31,     8), S(   -26,    -8), S(   -13,   -10), S(   -17,     2), S(   -44,    19),
                S(   -39,   -19), S(   -43,   -13), S(   -20,   -27), S(   -19,   -21), S(   -10,   -30), S(   -25,   -14), S(   -14,   -41), S(   -90,    19),
                S(    -6,   -25), S(    -8,   -30), S(   -10,   -23), S(    -4,   -28), S(    -8,   -29), S(   -15,   -24), S(   -12,   -37), S(   -25,   -16)
        },
        {
                S(   -32,    32), S(   -30,    16), S(   -19,    50), S(   -10,    42), S(    39,    -2), S(   137,   -43), S(   112,   -55), S(    33,   -12),
                S(   -16,    -8), S(   -69,    46), S(   -21,    42), S(   -63,    46), S(   -53,    67), S(     3,    40), S(     8,    -3), S(    27,    -6),
                S(   -28,    13), S(   -59,    26), S(   -65,    63), S(   -61,    59), S(   -17,    19), S(     6,    25), S(   -19,    47), S(     6,    27),
                S(    13,   -20), S(   -30,    32), S(   -50,    77), S(   -43,    67), S(   -15,    29), S(   -50,    62), S(   -20,    60), S(    -9,    38),
                S(     8,     3), S(   -15,    37), S(   -15,    16), S(   -14,    52), S(    -6,    13), S(    -8,    19), S(   -15,    22), S(    -1,    29),
                S(    -2,     3), S(     4,     1), S(     0,    29), S(    -2,    11), S(    -6,     2), S(     6,    12), S(     6,   -27), S(    24,   -50),
                S(    14,   -39), S(    13,   -27), S(    19,   -42), S(    23,   -27), S(    27,   -43), S(    47,   -99), S(    30,   -95), S(    40,   -31),
                S(     5,   -53), S(    22,  -102), S(    16,   -81), S(    21,   -26), S(    27,   -69), S(    26,   -84), S(    46,  -131), S(    54,   -99)
        },
        {
                S(   158,  -104), S(   214,   -30), S(   138,   -11), S(   186,   -20), S(   114,    11), S(   232,    13), S(   200,    88), S(   726,     1),
                S(   221,   -77), S(   207,   -45), S(   183,    -5), S(    98,    12), S(    66,    17), S(   257,     8), S(   205,    18), S(  -240,    43),
                S(   178,   -75), S(   222,   -43), S(    57,     6), S(   -19,    11), S(    43,    23), S(   196,   -18), S(   241,    -2), S(   -17,    38),
                S(    26,   -29), S(    69,   -12), S(    31,     7), S(    52,    -5), S(   -11,    12), S(   127,   -24), S(   104,    -8), S(   -26,    28),
                S(    16,    -1), S(    17,     4), S(    12,     9), S(    43,    -9), S(    88,    -8), S(    97,   -22), S(    65,   -12), S(   -32,    16),
                S(  -129,    35), S(   -48,    23), S(     1,     7), S(    13,   -12), S(    20,    -5), S(    50,   -16), S(    21,    -7), S(   -77,    11),
                S(   -81,    20), S(   -44,    12), S(   -36,    12), S(   -50,     6), S(   -37,     0), S(   -26,     3), S(   -18,     9), S(   -64,    12),
                S(  -188,    63), S(   -63,    19), S(   -86,    22), S(   -83,    -2), S(   -25,   -16), S(   -81,     8), S(   -36,    10), S(   -63,     6)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -36,   -82), S(   -17,   -25), S(   -10,     0), S(    -7,    18), S(     0,    22), S(     8,    26), S(    18,    20), S(    23,    15), S(    21,     6), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -36,   -33), S(   -29,   -39), S(   -24,   -21), S(   -17,   -10), S(   -17,     6), S(   -14,     9), S(    -9,    16), S(    -9,    11), S(    -9,    14), S(     1,    13), S(     7,    12), S(     0,    14), S(    74,    13), S(    81,    -5), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -42,   -42), S(   -36,   -16), S(   -35,    -9), S(   -31,    -2), S(   -28,     7), S(   -25,    14), S(   -17,    11), S(   -11,     9), S(    -6,    15), S(     1,    14), S(     8,    12), S(    17,     9), S(    24,     9), S(    11,    16), S(   171,   -46), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -90,   -59), S(  -102,  -206), S(  -100,  -107), S(  -100,   -55), S(   -98,   -22), S(   -97,    20), S(   -96,    45), S(   -93,    52), S(   -91,    72), S(   -88,    66), S(   -90,    84), S(   -86,    84), S(   -89,    98), S(   -92,   103), S(   -87,   100), S(   -84,   109), S(   -87,   109), S(   -67,    88), S(   -73,    99), S(   -17,    58), S(    51,    21), S(   124,   -36), S(   138,   -38), S(   202,   -94), S(   236,  -112), S(   430,  -187), S(   270,  -136), S(   277,  -156)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(   -86,    60), S(   -51,    55), S(  -112,    61), S(   -55,    49), S(    64,    35), S(   132,    79), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -28,    49), S(  -116,    58), S(   -18,    65), S(   171,    53), S(   185,    50), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -103,    43), S(  -110,    37), S(   -65,    74), S(   261,    79), S(   190,   138), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -61,   -24), S(    11,   -12), S(   -40,   -31), S(     0,   -28), S(   -56,   -30), S(  -316,    31)},
        {S(     0,     0), S(     0,     0), S(    15,   -44), S(    -9,   -33), S(    46,   -51), S(     5,   -83), S(    -3,   -91), S(   -62,  -135)},
        {S(     0,     0), S(     0,     0), S(    11,     6), S(     9,     3), S(    10,   -21), S(     5,    33), S(   -75,    30), S(  -158,    52)},
        {S(     0,     0), S(     0,     0), S(   -52,   -12), S(   -92,   126), S(    40,   -99), S(    29,    16), S(    35,    61), S(   160,     0)},
        {S(     0,     0), S(     0,     0), S(   127,   -25), S(   114,   -67), S(   181,   -57), S(    35,   -31), S(   -29,   -20), S(   -72,   -84)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    29,   -21), S(    53,   -24), S(    55,   -11), S(   -61,    -6), S(    49,   -53)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    32,   -43), S(    33,   -11), S(   -12,   -27), S(   -23,    -3), S(   -74,    24)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    96,   -31), S(   -38,     2), S(    21,     6), S(     6,    21), S(   -42,    10)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    17,   -36), S(   -44,    28), S(     7,   -88), S(   -11,    42), S(   -53,   210)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   214,   -66), S(   -18,   -14), S(   -33,   -23), S(    -7,   -26), S(   -20,   -40)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(    -1,    -6), S(    -2,    -3), S(    14,    10), S(    51,    46), S(   107,    70), S(   219,   172), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -19,    -7);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    19,    52);

constexpr SCORE_TYPE TEMPO_BONUS = S(    12,     5);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    22,    -1), S(    10,     8), S(    -9,     3)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    41,   -16), S(    11,    -2), S(   -49,    11)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(    18,   -55), S(    55,    29), S(    40,    56), S(    58,    31), S(    24,    56), S(     0,     0)},
        {S(    -5,    11), S(     0,     0), S(    31,    18), S(    48,     8), S(    18,    66), S(     0,     0)},
        {S(    -3,    17), S(    15,    22), S(    20,    17), S(    57,    23), S(    35,    76), S(     0,     0)},
        {S(   -10,    20), S(     4,    18), S(     8,    17), S(   -20,    43), S(    44,     0), S(     0,     0)},
        {S(    -1,    14), S(     1,    -1), S(    -6,    25), S(     2,   -15), S(   -13,    -5), S(   174,   -89)},
        {S(    64,    15), S(    18,     8), S(    53,     2), S(    51,   -14), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    20,    -9), S(    15,    -7), S(    24,    -2), S(    15,    -4), S(    21,    -2), S(     0,     0)},
        {S(    10,    -5), S(    13,     0), S(    17,    -2), S(     5,     1), S(    17,    -3), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    32,    24), S(    15,   -18), S(    -5,   -11), S(   -11,   -15), S(   -22,   -12), S(   -37,    -3), S(   -40,    -6), S(   -41,    -8), S(   -41,   -10), S(   -40,   -11), S(   -42,    -6), S(   -43,    -7), S(   -31,   -10), S(   -24,   -11), S(   -30,   -11), S(   -40,    -4), S(   -28,    -4), S(   -15,    -6), S(     5,   -20), S(    12,   -10), S(    -6,     1), S(    37,   -20), S(    63,   -18), S(   -24,    30), S(   103,   -51), S(    30,    46), S(    64,    22), S(   -60,    45), S(   184,   -36), S(   198,   -26), S(   -16,    95), S(   143,    58), S(   -28,   -41), S(  -103,   149), S(   262,   198), S(   -89,  -115), S(    24,    22), S(   100,    27), S(    71,    66), S(    46,     8)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(   -15,    -7), S(    31,    -9), S(    31,   -13), S(     0,     0), S(     0,     0), S(    14,    -2), S(    24,   -12), S(    -1,    -1)},
        {S(    31,   -10), S(    37,   -14), S(    -3,     1), S(     0,     0), S(     0,     0), S(    -5,   -10), S(     6,   -17), S(    14,    -2)},
        {S(     5,    -6), S(   -15,     4), S(   -32,    11), S(     0,     0), S(     0,     0), S(     8,   -15), S(    -5,   -10), S(     9,   -11)},
        {S(    11,     4), S(     5,    24), S(    34,    19), S(     0,     0), S(     0,     0), S(   -16,    -2), S(    -4,    -5), S(    -2,   -20)},
        {S(   -15,     3), S(   -23,    -4), S(   -16,    -1), S(     0,     0), S(     0,     0), S(   -19,     6), S(   -38,    11), S(   -26,    12)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(    64,    23), S(   222,     2), S(   189,    23), S(     0,     0), S(     0,     0), S(    62,   -20), S(   164,   -25), S(   234,   -26)},
        {S(   -31,    40), S(   -75,    53), S(   -61,    74), S(     0,     0), S(     0,     0), S(   -44,     5), S(  -103,    16), S(    -1,    -4)},
        {S(     9,    26), S(    12,    10), S(   -25,    22), S(     0,     0), S(     0,     0), S(    15,    -1), S(    16,   -13), S(    -5,    -6)},
        {S(    -5,     8), S(     1,     0), S(    -5,    13), S(     0,     0), S(     0,     0), S(     3,     1), S(    13,    -6), S(    -5,    10)},
        {S(     1,    10), S(    25,    -6), S(     1,     9), S(     0,     0), S(     0,     0), S(     7,    -2), S(    13,     1), S(    -4,     2)},
        {S(     2,   -10), S(   -27,    -2), S(     9,    -8), S(     0,     0), S(     0,     0), S(    -1,    18), S(   -26,    18), S(   -17,    12)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -2), S(     3,     0), S(    -4,     4), S(    -7,     0), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -2,    -1), S(    -4,     0), S(     2,    -2), S(     2,     0), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -24,   -21);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(     5,     4);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(   -12,    -1), S(   -14,   -16)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(    -1,     2), S(     2,    -3), S(     9,    -7), S(    22,   -13), S(    -4,   -10), S(     5,   -15), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    13,    -8), S(     3,    -5), S(    16,     0), S(    -7,    15), S(     1,    23), S(    -9,    15), S(     0,     0)};




#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
