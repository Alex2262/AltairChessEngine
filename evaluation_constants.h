//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310,340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 119, 156), S( 475, 446), S( 461, 433), S( 666, 786), S(1474,1427), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60),
                S( 127, 111), S( 108, 103), S(  62,  89), S(  98,  47), S(  39,  76), S( 122, 102), S( -44, 161), S(  16, 161),
                S( -10,  48), S(   4,  41), S(  17,  20), S(  27,  -2), S(  41,  -2), S(  12,  28), S( -11,  54), S( -30,  78),
                S( -13,   8), S(   8,  -7), S(  -1,  -5), S(  16, -21), S(  17, -12), S(  11,  -1), S(  21,   2), S( -37,  21),
                S( -17,  -7), S( -12,  -6), S(  -4, -13), S(   7, -13), S(   5, -12), S(  13,  -7), S(  -7,  -4), S( -39,   4),
                S( -20, -16), S(  -6, -16), S(  -6, -11), S(  -1,  -9), S(  10,   3), S(  15, -10), S(  28, -18), S( -22,  -5),
                S( -22,  -3), S(  -9, -10), S( -22,  12), S( -11,  -1), S( -14,  20), S(  24, -11), S(  31, -12), S( -24,   1),
                S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60)
        },
        {
                S(-250, -57), S(-155, -19), S( -99,  15), S( -16, -17), S(  49, -15), S(-179,   6), S( -39, -65), S(-160,-109),
                S( -44, -23), S( -55,   7), S(  19,  -5), S(  12,  32), S(  16,  17), S(  23,  -7), S( -41,  -9), S( -29, -36),
                S( -37, -19), S(  18,   7), S(  48,  30), S(  74,  35), S(  88,  16), S( 113,  15), S(  56,  -2), S(  40, -45),
                S(  18,  -4), S(  35,  33), S(  48,  45), S(  72,  54), S(  50,  58), S(  66,  47), S(  38,  29), S(  38,   3),
                S(   1,   8), S(  16,  16), S(  38,  43), S(  44,  54), S(  48,  46), S(  42,  43), S(  53,  21), S(   5,   5),
                S( -10, -43), S(   8,   1), S(  23,   9), S(  27,  30), S(  38,  21), S(  27,   0), S(  24, -10), S(  -7,  -3),
                S( -33, -36), S( -14,  -7), S(   6, -17), S(  19,  15), S(  13,  24), S(  15, -16), S(   4, -14), S(   7, -39),
                S( -94, -41), S( -15, -32), S( -20,  -7), S( -15,   6), S(   0, -10), S(  -2,  -4), S( -17, -20), S( -45, -65)
        },
        {
                S( -63,  -2), S(  -6,  -2), S(-110,  14), S( -84,  12), S( -97,  21), S(-123,  14), S( -20,   1), S(  29, -21),
                S( -38,  10), S( -10,   8), S( -16,  13), S( -39,  12), S( -28,  18), S(  -3,   9), S( -26,   8), S( -66,   6),
                S(   8,   1), S(  18,   9), S(  40,   4), S(  13,  11), S(  20,   7), S(  38,  20), S(  40,  17), S(  12,  16),
                S( -19,   2), S(   8,  21), S(  -3,  23), S(  45,  15), S(  23,  18), S(  20,  11), S(  -2,  29), S(  -8,  18),
                S(  -6,  -6), S(   4,   5), S(  11,  12), S(  27,  16), S(  40,   1), S(   0,  17), S(  12,  -1), S(  14, -16),
                S(  -6, -19), S(  21,  -6), S(  18,  -1), S(  16,   0), S(  16,  17), S(  30,  -3), S(  27,  -6), S(  22, -21),
                S(   5, -32), S(  23, -37), S(  30, -24), S(  13, -11), S(  22, -12), S(  23, -24), S(  48,  -5), S(  21, -42),
                S(  27, -64), S(  10, -30), S(  -5,   5), S(   2,  -8), S( -11,  -7), S(  -4,   3), S( -10,   1), S(   6, -47)
        },
        {
                S(  10,  16), S(  12,  18), S( -25,  27), S( -29,  30), S(   0,  20), S(  -5,  20), S( -31,  24), S(  54,   9),
                S(   6,  14), S(  -5,  20), S(  22,  12), S(  32,  13), S(  20,  10), S(  41,  -1), S(  -6,  17), S(  20,   6),
                S( -14,   9), S(  20,   0), S(  31,  -2), S(  32,  -4), S(  32,  -8), S(  64,  -7), S(  82, -16), S(  34, -17),
                S(  -9,   6), S(   1,   1), S(  17,   7), S(  34,  -4), S(  13,   3), S(  33,  -2), S( -13,   4), S(  -4,   3),
                S( -32,   8), S( -30,  13), S( -23,  10), S( -13,  10), S( -16,   6), S(  -4,  -6), S(   1,  -5), S( -18,  -6),
                S( -34,  -9), S( -20,  -5), S( -25,  -3), S( -17,  -3), S( -22,   1), S( -10, -13), S(   2,  -9), S( -27, -16),
                S( -39, -12), S( -15, -15), S( -25,  -3), S( -14, -11), S( -10, -11), S(  -3, -19), S(   0, -24), S( -81,   1),
                S(  -2,  -8), S(  -1,  -9), S(   7, -11), S(  14, -21), S(   8, -20), S(   5,  -7), S( -18,  -5), S(  -9, -27)
        },
        {
                S( -53,   1), S( -65,  50), S( -34,  28), S( -25,  -7), S(  -4,  13), S(   4,  14), S(  38, -17), S(   7,   2),
                S( -10,   3), S( -55,  34), S( -45,  43), S( -77,  51), S(-120,  80), S( -44,  45), S( -19,  24), S( -13,  21),
                S(  -2, -12), S( -10,  -1), S( -11,  -5), S( -64,  58), S( -64,  56), S(  19,  14), S(  24,   1), S( -24,  66),
                S(   2, -17), S(   0,  18), S( -21,  33), S( -35,  46), S( -40,  50), S( -28,  47), S( -22,  45), S( -18,  52),
                S(  18, -18), S(  19,  22), S(  12,  11), S(  -5,  55), S(  -1,  20), S(  -2,  26), S(  11,   4), S(  -2,  -9),
                S(  21, -18), S(  45, -63), S(  28,   4), S(  18,  -8), S(  15,  -5), S(  15,   3), S(  24, -20), S(   8, -14),
                S(  28, -38), S(  45, -59), S(  48, -71), S(  35, -25), S(  35, -40), S(  43, -77), S(  33, -74), S(   3, -36),
                S(  60, -57), S(  43, -55), S(  53, -52), S(  45,  41), S(  40, -52), S(  30, -78), S(  47, -84), S(  -2, -70)
        },
        {
                S(-288, -36), S( 141, -43), S( 212, -37), S(  89, -30), S(-223,  30), S( -51,  47), S(  51,  15), S( -34,  -2),
                S( 112, -29), S( 139,  22), S( 132,  32), S(  94,  25), S(  47,  29), S( 152,  40), S(  43,  50), S(-162,  42),
                S(  53,  12), S( 159,  19), S( 186,  24), S(  67,  21), S( 142,   9), S( 226,  43), S( 240,  37), S(   1,  29),
                S( -19,  14), S(  57,  26), S( 123,  26), S(  71,  30), S(  37,  28), S( 141,  36), S( 103,  27), S( -76,  28),
                S( -67,  -6), S( 125, -18), S(  93,  15), S(  51,  24), S(  84,  18), S( 117,  23), S(  99,  12), S( -57,   8),
                S( -99,   3), S( -10,   9), S(  20,  16), S(  68,   8), S(  87,   3), S(  98,  17), S(  68,  10), S( -23,   2),
                S( -94,  -8), S( -70,   3), S( -44,  12), S( -63,  11), S( -24,   5), S( -15,  27), S(  10,   5), S( -17, -14),
                S(-101, -83), S( -67, -37), S( -98,  -9), S(-110, -18), S( -31, -54), S( -99,  13), S( -23, -14), S( -40, -63)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -12,  22), S( -25,  32), S( -24,  55), S(  -4,  78), S(  31, 143), S(  66, 179), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  -4,  28), S(  -6,  46), S(  28,  89), S(  87, 186), S( 350, 178), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  37,  33), S( -17,  34), S(  73,  56), S( 145, 130), S( 293, 151), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  22, -47), S(  -7,  -1), S(  -4, -23), S( -19, -69), S( -25, -98), S( 125,-216)},
        {S(   0,   0), S(   0,   0), S(  -4, -32), S(  -7, -46), S(  -6, -42), S(   5, -67), S( -17,-132), S(  64,-261)},
        {S(   0,   0), S(   0,   0), S(  14, -18), S( -18,  30), S(   0,   5), S(  23,  -6), S(   2, -43), S(  13,-120)},
        {S(   0,   0), S(   0,   0), S(  12, -32), S( -64,  61), S(  16, -49), S(   3,  -1), S(  24, -50), S(  40, 124)},
        {S(   0,   0), S(   0,   0), S(  23,  22), S(  35,  19), S( -82,  11), S( -51, -20), S(-116, -88), S(   6,-181)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -21), S( -19, -11), S(  -7,  -9), S(   7, -22), S(  40,-111)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  -1, -11), S(  -5,  -6), S( -17,  -1), S(  -3, -32), S(  28, -67)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  15, -23), S(  29, -23), S(  -7,  19), S(   9,   5), S(  35, -54)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  19, -12), S(  -1, -10), S(   0, -13), S(  25, -32), S(  13,  93)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 137,  -6), S(  38,  -2), S( -70,   8), S( -26, -22), S(  10, -92)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -15), S(   1,  -8), S(  16,   4), S(  43,  66), S(  28, 160), S(  42, 407), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -6, -44);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  28,  69);

constexpr SCORE_TYPE TEMPO_BONUS = S(  26,  23);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,  -1), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  27,   3), S(   0,  31), S( -21,   9)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  49,   0), S(  -5,  31), S( -54,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  12, -25), S(  76,  36), S(  74,  80), S( 110,   1), S(  73,  45), S( 222,  62)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  59,  22), S(  48,  11), S( 128,  19)},
        {S(   0,  15), S(  31,  43), S(   0,   0), S(  48,  34), S(  56,  63), S(  73,  75)},
        {S( -17,  23), S(  -4,  25), S(   2,  33), S(   0,   0), S(  54,  52), S( 122,  33)},
        {S(  -6,  14), S(   2,  10), S(  -2,  38), S(  -9,  30), S(   0,   0), S(  66, 114)},
        {S(   8,  44), S(  -3,  22), S( -41,  40), S( -52,  37), S(-261,  60), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  42,  -7), S(  30, -12), S(  40,  -5), S(  43,  -8), S(  38,   6), S(   0,   0)},
        {S(  29,  -8), S(  30,  -2), S(  30,  -3), S(  22,  -2), S(  28,   9), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  78,   5), S(  47,  -4), S(  14,  -4), S( -15,   0), S( -37,   5), S( -47,   7), S( -58,   5), S( -66,   7), S( -68,   7), S( -71,   7), S( -70,   7), S( -83,   9), S( -60,  -2), S( -58,   0), S( -37, -18), S( -72,   4), S( -27, -27), S(  60, -80), S(  72, -66), S( 112, -91), S( -51,  14), S( 282,-180), S( 101,-112), S( 175,-300), S(  58,-125), S( 336, 474), S( 152, 222), S( 272, 384), S(   4,   6), S(   1,   1)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  22, -20), S(  38,  -9), S(  39, -11), S(   0,   0), S(   0,   0), S(   4,   7), S(  19, -10), S(   6, -21)},
        {S(  28,  -9), S(  35,  -6), S(   1,   9), S(   0,   0), S(   0,   0), S( -13,   0), S(   3,  -1), S(   9,  -4)},
        {S(  22,  10), S( -18,  17), S(   1,   8), S(   0,   0), S(   0,   0), S(  -9, -10), S(  -5,   1), S(   6,  -1)},
        {S(   0,  43), S( -10,  47), S( -24,  44), S(   0,   0), S(   0,   0), S(  17,  -8), S( -33,  21), S(   3,  16)},
        {S( -18, -10), S( -27,  -8), S( -12,  -5), S(   0,   0), S(   0,   0), S( -21,  -1), S( -26,   7), S( -26,   8)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S( 129, 107), S(  44, 110), S(  95,  -2), S(   0,   0), S(   0,   0), S(   6,  82), S(  10,  97), S(  77,  94)},
        {S(  -1,  46), S( -52,  59), S( -94,  47), S(   0,   0), S(   0,   0), S( -61,  23), S( -71,  58), S( -34,  62)},
        {S(  -1,  18), S(  22,   7), S(  -5,  15), S(   0,   0), S(   0,   0), S(   3,   3), S(  21,   0), S(  -2,   6)},
        {S(  -1, -12), S(  14,  -3), S(  13,   4), S(   0,   0), S(   0,   0), S(   2,   3), S(   2,  -1), S(  -7,  -6)},
        {S(   0, -20), S(  25, -22), S(  19,   3), S(   0,   0), S(   0,   0), S(   2, -13), S(  13, -11), S(   2, -16)},
        {S(  -6,  -8), S(  -7,   2), S(  15,   8), S(   0,   0), S(   0,   0), S(   1,  -4), S(  -6,  -6), S(   2, -16)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(   0,   0), S(  -2,  -2), S(   1,   1), S(  -4,   2), S(  -8,   3), S(   0,   0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S( -28, -15);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S( -16,  64);





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
