//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 118, 155), S( 444, 436), S( 448, 441), S( 612, 799), S(1379,1454), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60),
                S( 113, 138), S( 105, 130), S(  39, 129), S(  93,  69), S(  40,  95), S( 113,  91), S( -42, 154), S( -40, 161),
                S( -15,  59), S(   5,  46), S(  28,  17), S(  33, -18), S(  53, -21), S(  85,  -2), S(  31,  24), S(   6,  40),
                S( -22,  27), S(   0,   6), S(  -8,   0), S(  10, -28), S(  11, -17), S(  29, -14), S(   2,   2), S( -23,  13),
                S( -24,  12), S( -19,   2), S( -10, -12), S(   2, -17), S(  -1, -13), S(  13, -19), S(  -6, -11), S( -22,  -6),
                S( -26,   0), S( -13,  -8), S( -13, -10), S(  -6, -12), S(   3,   2), S(  10,  -8), S(  22, -21), S(  -8, -11),
                S( -28,  10), S( -14,  -2), S( -25,  12), S( -16,  -3), S( -19,  18), S(  32,  -2), S(  36, -20), S( -12, -18),
                S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60), S( -31, -60)
        },
        {
                S(-232, -60), S(-141, -23), S( -85,  13), S(   4, -22), S(  90, -26), S(-185,   8), S( -31, -67), S(-156,-113),
                S( -41, -22), S( -55,   9), S(  29,  -2), S(  24,  30), S(  24,  17), S(  18,  -3), S( -52,  -3), S( -29, -34),
                S( -46, -15), S(  13,  12), S(  48,  36), S(  82,  37), S( 102,  15), S( 125,  17), S(  74,  -3), S(  54, -45),
                S(  10,  -2), S(  31,  34), S(  44,  49), S(  74,  57), S(  58,  56), S(  78,  48), S(  51,  29), S(  49,   1),
                S( -10,   6), S(   5,  17), S(  32,  46), S(  43,  58), S(  50,  51), S(  49,  48), S(  68,  22), S(   8,   8),
                S( -23, -48), S(  -4,   1), S(  16,  10), S(  21,  35), S(  35,  27), S(  28,   7), S(  27,  -7), S(  -9,  -6),
                S( -49, -42), S( -30, -10), S(  -6, -18), S(  11,  13), S(   9,  25), S(  12, -18), S(  -1, -11), S(   4, -43),
                S(-124, -40), S( -27, -39), S( -37, -10), S( -25,   3), S(  -9, -11), S( -10,  -5), S( -23, -23), S( -60, -70)
        },
        {
                S( -61,  -2), S(  -8,  -1), S(-121,  16), S( -87,  12), S( -89,  17), S(-143,  17), S( -48,   6), S(  12, -18),
                S( -32,   6), S( -20,   7), S( -22,  14), S( -35,   9), S( -17,  13), S(   4,   6), S( -32,   5), S( -82,  11),
                S(   6,   1), S(  13,   9), S(  36,   3), S(  19,   7), S(  35,   2), S(  56,  15), S(  59,  11), S(  26,  11),
                S( -21,   4), S(   8,  20), S(   3,  20), S(  54,  11), S(  27,  17), S(  38,   7), S(   1,  30), S(   8,  13),
                S(  -6,  -5), S(   5,   7), S(  12,  13), S(  27,  15), S(  43,   0), S(  -4,  18), S(  10,   1), S(  16, -16),
                S(  -2, -17), S(  22,  -4), S(  16,   0), S(  16,   1), S(  13,  17), S(  27,  -4), S(  22,  -6), S(  21, -18),
                S(   8, -27), S(  23, -33), S(  32, -22), S(  10, -10), S(  19, -12), S(  16, -24), S(  43,  -6), S(  18, -41),
                S(  31, -57), S(  18, -26), S(  -4,   7), S(   0,  -6), S( -16,  -5), S(  -9,   5), S( -14,   0), S(   2, -42)
        },
        {
                S(  18,  15), S(  21,  17), S(  -6,  21), S(   2,  21), S(  46,   7), S(  40,   8), S(   3,  16), S(  91,   2),
                S(   4,  13), S(  -3,  18), S(  34,   7), S(  46,   7), S(  49,   0), S(  58,  -7), S(   6,  13), S(  39,   1),
                S( -26,  13), S(  12,   2), S(  26,   0), S(  31,  -3), S(  43,  -9), S(  85, -12), S( 106, -22), S(  58, -22),
                S( -25,  12), S(  -8,   4), S(   7,  10), S(  28,  -1), S(   9,   7), S(  35,  -1), S(   3,   2), S(   7,   2),
                S( -51,  14), S( -46,  18), S( -34,  13), S( -22,  13), S( -23,   9), S(  -3,  -6), S(  16,  -8), S( -13,  -8),
                S( -57,  -2), S( -38,  -1), S( -42,   0), S( -30,   0), S( -29,   1), S( -10, -14), S(   8, -13), S( -25, -18),
                S( -67,  -4), S( -36, -10), S( -44,   2), S( -32,  -6), S( -22,  -9), S( -10, -19), S(  -1, -25), S( -90,   3),
                S( -32,   1), S( -26,  -2), S( -15,  -5), S(  -3, -17), S(  -7, -16), S(  -5,  -8), S( -26,  -3), S( -24, -23)
        },
        {
                S( -42, -10), S( -58,  56), S(  -7,  38), S(  19,  10), S(  76,  18), S(  92,  13), S(  82,  -5), S(  40,  24),
                S( -22, -11), S( -58,  17), S( -36,  35), S( -42,  51), S( -37,  78), S(  28,  53), S(  17,  26), S(  17,  42),
                S( -22, -25), S( -24,  -9), S(  -7, -10), S( -23,  58), S(  -6,  68), S( 111,  22), S( 118,   3), S(  51,  76),
                S( -26, -33), S( -24,   5), S( -29,  24), S( -25,  38), S( -18,  73), S(  15,  63), S(  16,  80), S(  10,  94),
                S( -23, -29), S( -15,  13), S( -10,  -4), S( -23,  51), S(  -5,  26), S(  -2,  46), S(  17,  25), S(   0,  36),
                S( -26, -25), S(   2, -76), S(  -8,  -8), S(  -8, -22), S(  -7,  -9), S(  -1,   3), S(  16, -18), S(  -2,  -4),
                S( -31, -47), S(  -7, -68), S(   4, -82), S(  -2, -42), S(   6, -59), S(  17, -92), S(  12, -88), S( -24, -33),
                S(  -7, -61), S( -16, -55), S(   1, -63), S(   1,  23), S(  -2, -60), S( -10, -81), S(  10, -86), S( -43, -74)
        },
        {
                S( -52,-104), S( 278, -92), S( 223, -61), S( 172, -60), S(-176,   5), S( -50,  24), S(  90, -14), S(  -2, -32),
                S( 211, -63), S( 134,   9), S( 109,  16), S( 115,   7), S(  83,  13), S(  62,  31), S(  -8,  39), S(-142,  20),
                S(  73,   5), S( 139,  15), S( 107,  29), S(  18,  28), S(  95,  14), S( 129,  41), S( 156,  32), S( -25,  14),
                S(   0,   5), S(  27,  29), S(  30,  43), S( -13,  57), S( -59,  56), S(   3,  48), S(  10,  29), S(-111,  20),
                S( -58, -12), S(  77,  -5), S( -11,  42), S( -75,  67), S( -58,  67), S( -55,  50), S( -23,  25), S( -96,   3),
                S( -42,  -9), S( -32,  19), S( -64,  43), S( -71,  57), S( -51,  54), S( -51,  43), S( -11,  17), S( -34,  -7),
                S(   5, -23), S(  -5,  -2), S( -42,  27), S(-117,  46), S( -82,  42), S( -63,  33), S(   9,  -2), S(  25, -35),
                S(  16,-105), S(  61, -61), S(  11, -25), S(-100,   3), S( -27, -28), S( -82,   4), S(  29, -39), S(  29, -95)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -11,  26), S( -24,  38), S( -24,  69), S(  -9, 104), S(   5, 196), S(  39, 210), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   2,  30), S(  -6,  56), S(  23, 111), S(  65, 226), S( 347, 179), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  55,  30), S( -22,  43), S(  66,  73), S( 135, 154), S( 303,  75), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  24, -48), S( -13,   2), S(  -2, -27), S( -16, -73), S( -11,-109), S( 140,-220)},
        {S(   0,   0), S(   0,   0), S(  -2, -29), S(  -7, -44), S(  -6, -41), S(   7, -70), S(  -7,-137), S(  84,-264)},
        {S(   0,   0), S(   0,   0), S(   4, -13), S( -20,  28), S(   0,   4), S(  22,  -8), S(   9, -50), S(  28,-129)},
        {S(   0,   0), S(   0,   0), S(  -8, -17), S( -55,  53), S(  16, -39), S(   6,  -2), S(  30, -55), S(  78,  87)},
        {S(   0,   0), S(   0,   0), S(  40,  27), S(  48,  24), S( -82,   7), S( -27, -41), S( -53,-148), S(  12,-277)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  -3, -20), S( -24,  -8), S(  -2, -13), S(  13, -32), S(  43,-110)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  -2,  -8), S( -14,  -2), S( -20,  -5), S(  -3, -38), S(  29, -76)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   8, -14), S(  25, -20), S(  -3,  18), S(   5,   9), S(  34, -53)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  13,  -1), S(  -7,  -3), S(   0, -16), S(  25, -39), S(  24,  75)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 224, -21), S(  74,  -8), S( -36,  -9), S(  27, -56), S(  79,-163)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -13), S(   1,  -8), S(  16,   2), S(  42,  61), S(  54, 138), S(  35, 417), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  25,  70);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  27);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   6,   0), S(   8,   5), S(   6,   3), S(   4,   2), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  24,   1), S(  -1,  24), S( -36,   8)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  49,  -1), S(  -3,  25), S( -69,   2)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  12, -28), S(  74,  38), S(  76,  82), S( 108,   0), S(  85,  27), S( 184,  61)},
        {S( -10,  16), S(   0,   0), S(  30,  47), S(  55,  24), S(  46,   9), S( 126,  20)},
        {S(   0,  15), S(  30,  43), S(   0,   0), S(  48,  31), S(  55,  56), S(  69,  73)},
        {S( -16,  22), S(  -4,  24), S(   2,  31), S(   0,   0), S(  49,  54), S( 124,  25)},
        {S(  -7,  16), S(   0,  10), S(  -3,  31), S( -10,  27), S(   0,   0), S(  74,  99)},
        {S( -30,  59), S( -68,  33), S( -91,  49), S(-171,  69), S(-441, 118), S(   0,   0)}
};


#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
