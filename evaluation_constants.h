//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 113, 159), S( 439, 434), S( 451, 440), S( 614, 805), S(1398,1429), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60),
                S( 114, 140), S( 100, 134), S(  39, 133), S(  91,  74), S(  23, 103), S( 102,  97), S( -56, 160), S( -27, 161),
                S( -15,  57), S(   6,  45), S(  23,  19), S(  24, -14), S(  26, -13), S(  63,   5), S(   3,  31), S( -11,  42),
                S( -18,  24), S(   4,   4), S(  -3,  -1), S(   8, -26), S(   8, -13), S(  23, -10), S(  -2,   4), S( -26,  12),
                S( -20,   8), S( -14,   0), S(  -6, -13), S(   6, -18), S(   3, -14), S(  17, -20), S(  -3, -12), S( -17,  -9),
                S( -23,  -3), S(  -9, -10), S(  -9, -13), S(  -3, -15), S(   7,   0), S(  13, -10), S(  27, -24), S(  -3, -15),
                S( -26,   7), S( -10,  -5), S( -22,   9), S( -12,  -6), S( -16,  14), S(  38,  -6), S(  42, -24), S(  -8, -22),
                S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60), S( -28, -60)
        },
        {
                S(-228, -60), S(-140, -22), S( -88,  14), S( -11, -18), S(  65, -19), S(-189,  10), S( -31, -65), S(-155,-111),
                S( -34, -22), S( -47,   8), S(  23,  -3), S(  11,  31), S(  13,  20), S(  12,  -2), S( -47,  -3), S( -36, -30),
                S( -35, -17), S(  21,   9), S(  46,  33), S(  69,  37), S(  81,  17), S( 109,  18), S(  49,   3), S(  37, -41),
                S(  18,  -3), S(  36,  34), S(  44,  47), S(  63,  56), S(  35,  62), S(  55,  51), S(  24,  37), S(  35,   5),
                S(   0,   5), S(  15,  15), S(  39,  42), S(  41,  55), S(  49,  47), S(  39,  45), S(  56,  22), S(   8,   7),
                S( -12, -49), S(   6,   0), S(  25,   7), S(  29,  31), S(  44,  22), S(  35,   1), S(  34, -11), S(   0,  -7),
                S( -39, -41), S( -19,  -9), S(   2, -19), S(  20,  12), S(  17,  24), S(  22, -20), S(   7, -12), S(  13, -42),
                S(-112, -41), S( -18, -41), S( -28, -10), S( -18,   3), S(   0, -12), S(   0,  -6), S( -14, -23), S( -46, -68)
        },
        {
                S( -58,  -1), S(  -5,  -3), S(-117,  14), S( -84,  10), S( -94,  16), S(-137,  15), S( -46,   5), S(  16, -19),
                S( -28,   8), S( -10,   7), S( -14,  13), S( -33,   8), S( -26,  12), S(   1,   5), S( -38,   7), S( -86,  12),
                S(  13,   1), S(  21,   9), S(  41,   2), S(  13,   7), S(  24,   2), S(  39,  16), S(  43,  13), S(  10,  14),
                S( -14,   5), S(   9,  22), S(  -1,  20), S(  43,  13), S(  20,  16), S(  24,   8), S(  -4,  29), S(  -6,  15),
                S(  -4,  -5), S(   6,   6), S(  10,  12), S(  25,  15), S(  39,   0), S(  -2,  16), S(  10,   0), S(  13, -16),
                S(  -1, -17), S(  23,  -4), S(  20,  -1), S(  16,   1), S(  16,  16), S(  31,  -4), S(  26,  -5), S(  22, -20),
                S(   8, -29), S(  27, -33), S(  32, -22), S(  15, -10), S(  24, -11), S(  23, -24), S(  48,  -5), S(  22, -41),
                S(  33, -58), S(  15, -26), S(  -2,   7), S(   4,  -5), S( -10,  -4), S(  -5,   7), S( -11,   1), S(   8, -43)
        },
        {
                S(  13,  16), S(  13,  18), S( -23,  25), S( -18,  26), S(  18,  14), S(  17,  13), S( -13,  20), S(  77,   6),
                S(   6,  13), S(  -6,  18), S(  25,   9), S(  36,  10), S(  27,   5), S(  41,  -3), S(  -9,  17), S(  23,   5),
                S( -15,  10), S(  24,  -2), S(  33,  -3), S(  35,  -6), S(  41, -11), S(  69,  -9), S(  92, -20), S(  41, -18),
                S( -10,   8), S(   7,   0), S(  25,   5), S(  42,  -6), S(  15,   2), S(  33,  -3), S(  -6,   2), S(   6,   0),
                S( -39,  11), S( -32,  15), S( -22,  10), S(  -8,   9), S( -14,   5), S(  -8,  -6), S(   5,  -7), S( -11, -10),
                S( -46,  -3), S( -27,  -2), S( -30,  -2), S( -20,  -2), S( -23,  -1), S( -13, -15), S(   1, -11), S( -25, -18),
                S( -57,  -3), S( -26, -11), S( -35,   2), S( -22,  -7), S( -16, -10), S(  -7, -20), S(  -3, -25), S( -88,   3),
                S( -23,   3), S( -17,   0), S(  -7,  -4), S(   5, -17), S(  -1, -17), S(   1, -10), S( -27,  -2), S( -21, -19)
        },
        {
                S( -36, -18), S( -51,  38), S( -13,  15), S(   1, -20), S(  37,  -7), S(  48,  -7), S(  59, -28), S(  27,  -8),
                S(  -6,  -4), S( -45,  24), S( -27,  32), S( -51,  37), S( -74,  56), S(   1,  23), S(  -3,  14), S(   6,  13),
                S(  -8,  -7), S(  -5,  -1), S(   0, -12), S( -40,  44), S( -30,  42), S(  61,  -6), S(  70, -20), S(   5,  51),
                S(  -8,  -4), S(  -8,  27), S( -23,  32), S( -30,  43), S( -27,  44), S(  -5,  33), S(   5,  36), S(  -5,  55),
                S(  -9,   1), S(  -3,  33), S(  -3,  20), S( -12,  59), S(  -1,  19), S(   0,  27), S(  17,   5), S(  -1,  -3),
                S( -17,  -2), S(  18, -53), S(   7,  12), S(   2,  -3), S(   6,  -2), S(   9,   8), S(  21, -16), S(   1,  -9),
                S( -18, -19), S(   9, -45), S(  18, -57), S(  14, -15), S(  22, -33), S(  35, -78), S(  27, -72), S(  -9, -34),
                S(   7, -33), S(  -6, -30), S(  13, -30), S(  17,  56), S(  14, -38), S(   6, -63), S(  24, -69), S( -30, -54)
        },
        {
                S(-181, -87), S( 172, -78), S( 197, -56), S( 140, -57), S(-165,   4), S( -70,  25), S(  35,  -7), S( -49, -28),
                S( 132, -50), S( 115,  14), S( 129,  14), S( 137,   4), S(  86,  11), S(  89,  27), S( -11,  38), S(-187,  26),
                S(  43,  10), S( 147,  17), S( 163,  22), S(  79,  18), S( 157,   4), S( 166,  34), S( 181,  29), S( -41,  16),
                S( -10,   7), S(  49,  27), S(  96,  32), S(  65,  43), S(  27,  39), S(  80,  34), S(  58,  21), S(-104,  17),
                S( -59, -11), S( 117, -11), S(  61,  28), S(  10,  48), S(  31,  45), S(  35,  28), S(  42,   9), S( -83,  -2),
                S( -51,  -6), S(  -1,  14), S(   8,  29), S(   8,  40), S(  31,  35), S(  26,  25), S(  34,   6), S( -31,  -9),
                S( -15, -19), S(  -1,  -2), S( -18,  23), S( -93,  42), S( -57,  38), S( -39,  30), S(  12,  -1), S(   3, -31),
                S( -19, -98), S(  35, -54), S( -13, -16), S(-118,  11), S( -53, -16), S(-101,  12), S(  -5, -29), S( -14, -87)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -10,  26), S( -24,  39), S( -25,  70), S(  -8, 104), S(  16, 193), S(  55, 203), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   1,  31), S(  -8,  57), S(  23, 112), S(  77, 225), S( 365, 173), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  56,  28), S( -20,  40), S(  68,  71), S( 141, 154), S( 193, 135), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  21, -46), S( -14,   1), S(  -1, -29), S( -15, -73), S( -13,-109), S( 135,-220)},
        {S(   0,   0), S(   0,   0), S(  -5, -28), S(  -7, -44), S(  -8, -41), S(   7, -71), S(  -9,-136), S(  73,-262)},
        {S(   0,   0), S(   0,   0), S(   8, -13), S( -19,  29), S(  -1,   4), S(  22,  -8), S(   3, -47), S(  20,-124)},
        {S(   0,   0), S(   0,   0), S( -11,  -4), S( -61,  58), S(  13, -45), S(   4,  -4), S(  29, -54), S(  63, 107)},
        {S(   0,   0), S(   0,   0), S(  17,  32), S(  40,  24), S( -90,   6), S( -38, -41), S( -70,-145), S( -24,-267)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  -2, -19), S( -22,  -8), S(  -2, -14), S(  15, -32), S(  37,-109)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  -2,  -8), S(  -9,  -3), S( -15,  -5), S(  -1, -37), S(  23, -72)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  11, -17), S(  21, -20), S(  -9,  18), S(   2,   9), S(  30, -51)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  15,  -9), S(  -4,  -7), S(   3, -17), S(  29, -41), S(  11, 101)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 158,  -4), S(  29,   2), S( -71,  -1), S( -20, -43), S(  38,-149)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -13), S(   1,  -8), S(  17,   3), S(  43,  63), S(  43, 145), S(  52, 396), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  24,  72);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   3,  -1), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  24,   2), S(  -1,  28), S( -33,   7)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  46,   0), S(  -5,  31), S( -68,   3)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(   8, -26), S(  74,  37), S(  71,  81), S( 110,   1), S(  76,  32), S( 217,  50)},
        {S( -11,  17), S(   0,   0), S(  30,  47), S(  56,  23), S(  48,  11), S( 136,  20)},
        {S(  -1,  15), S(  30,  44), S(   0,   0), S(  48,  33), S(  55,  64), S(  70,  77)},
        {S( -19,  23), S(  -5,  25), S(   1,  31), S(   0,   0), S(  52,  57), S( 124,  26)},
        {S(  -9,  14), S(   0,  14), S(  -4,  38), S( -11,  31), S(   0,   0), S(  67, 109)},
        {S(   4,  49), S( -43,  29), S( -64,  48), S(-100,  50), S(-380, 126), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  34, -11), S(  19,  -8), S(  19,  -2), S(  30,  -8), S(  21,  12), S(   0,   0)},
        {S(   8,  -7), S(   9,   4), S(   6,   1), S(   6,   0), S(   7,  16), S(   0,   0)}
};



#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
