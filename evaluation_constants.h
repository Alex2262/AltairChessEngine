//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 113, 163), S( 456, 432), S( 462, 441), S( 635, 802), S(1414,1447), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61),
                S( 120, 142), S(  98, 132), S(  62, 109), S( 104,  57), S(  35,  82), S( 121, 119), S( -50, 182), S(   2, 191),
                S( -13,  62), S(   4,  47), S(  21,  18), S(  31, -15), S(  43, -20), S(   9,  23), S( -16,  53), S( -39,  89),
                S( -15,  20), S(  10,  -5), S(   1, -11), S(  17, -33), S(  19, -21), S(  10,  -7), S(  17,  -1), S( -44,  23),
                S( -17,   2), S(  -9,  -8), S(  -2, -21), S(  10, -24), S(   8, -21), S(   9, -14), S( -10, -10), S( -46,   3),
                S( -21,  -8), S(  -3, -19), S(  -4, -20), S(   2, -20), S(  12,  -7), S(   4, -20), S(  22, -25), S( -30,  -8),
                S( -23,   4), S(  -5, -12), S( -19,   4), S(  -8, -11), S( -10,   9), S(  20, -20), S(  27, -18), S( -30,  -1),
                S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61), S( -26, -61)
        },
        {
                S(-243, -57), S(-146, -20), S( -89,  14), S( -11, -15), S(  64, -18), S(-169,   7), S( -26, -65), S(-158,-106),
                S( -42, -23), S( -52,   9), S(  22,  -3), S(  16,  32), S(  21,  18), S(  30,  -7), S( -35,  -7), S( -25, -34),
                S( -38, -18), S(  18,   9), S(  48,  32), S(  75,  35), S(  89,  16), S( 110,  17), S(  60,   0), S(  43, -43),
                S(  13,  -2), S(  33,  33), S(  47,  46), S(  70,  55), S(  49,  59), S(  66,  48), S(  38,  31), S(  40,   5),
                S(  -4,   5), S(  12,  15), S(  36,  43), S(  42,  55), S(  49,  47), S(  42,  44), S(  54,  23), S(   6,   8),
                S( -17, -47), S(   2,   0), S(  20,   8), S(  25,  31), S(  39,  22), S(  29,   2), S(  27,  -9), S(  -6,  -3),
                S( -44, -40), S( -22, -11), S(   0, -19), S(  15,  14), S(  11,  25), S(  16, -16), S(   6, -12), S(   6, -41),
                S(-111, -44), S( -24, -37), S( -31, -10), S( -21,   5), S(  -5, -11), S(  -4,  -5), S( -20, -21), S( -47, -70)
        },
        {
                S( -64,  -1), S(  -7,  -2), S(-113,  14), S( -90,  13), S(-100,  19), S(-125,  14), S( -28,   1), S(  23, -20),
                S( -37,   8), S( -12,   7), S( -16,  11), S( -40,  10), S( -31,  15), S(  -3,   7), S( -24,   5), S( -68,   7),
                S(  10,   1), S(  18,   9), S(  39,   3), S(  13,   8), S(  20,   3), S(  34,  18), S(  38,  15), S(   9,  15),
                S( -16,   4), S(   9,  22), S(  -1,  21), S(  45,  13), S(  22,  16), S(  19,   9), S(  -3,  28), S( -10,  17),
                S(  -4,  -6), S(   6,   6), S(  12,  12), S(  27,  15), S(  40,   0), S(  -1,  15), S(  10,  -1), S(  13, -15),
                S(  -2, -16), S(  24,  -4), S(  20,   0), S(  17,   0), S(  16,  17), S(  29,  -4), S(  27,  -7), S(  23, -21),
                S(   9, -28), S(  26, -33), S(  32, -22), S(  15,  -9), S(  22, -11), S(  23, -24), S(  49,  -6), S(  21, -41),
                S(  32, -58), S(  13, -24), S(  -2,   9), S(   5,  -6), S(  -8,  -6), S(  -3,   4), S( -10,   1), S(   9, -44)
        },
        {
                S(   8,  18), S(  12,  19), S( -22,  26), S( -23,  27), S(   8,  17), S(  -1,  19), S( -29,  23), S(  57,   9),
                S(   6,  14), S(  -1,  19), S(  30,   9), S(  43,   9), S(  33,   4), S(  51,  -5), S(   4,  14), S(  25,   5),
                S( -17,  11), S(  22,   0), S(  35,  -3), S(  40,  -7), S(  43, -12), S(  73, -10), S(  93, -19), S(  40, -18),
                S( -15,   9), S(   1,   1), S(  20,   5), S(  39,  -7), S(  21,   0), S(  45,  -6), S(  -4,   1), S(   2,   2),
                S( -42,  11), S( -35,  14), S( -25,   9), S( -12,   9), S( -11,   4), S(   3,  -9), S(   6,  -7), S( -16,  -7),
                S( -47,  -4), S( -28,  -2), S( -31,  -2), S( -20,  -2), S( -21,   0), S(  -7, -15), S(   5, -11), S( -27, -16),
                S( -56,  -5), S( -29, -10), S( -35,   1), S( -22,  -8), S( -14, -10), S(  -4, -19), S(   1, -25), S( -85,   2),
                S( -23,   2), S( -19,  -1), S(  -8,  -5), S(   3, -16), S(   0, -17), S(   0,  -6), S( -23,  -4), S( -16, -23)
        },
        {
                S( -44,  -8), S( -56,  44), S( -19,  21), S(  -3, -18), S(  18,   3), S(  24,   6), S(  53, -27), S(  21,  -6),
                S(  -8,   1), S( -47,  30), S( -27,  35), S( -55,  42), S( -94,  70), S( -21,  36), S(  -4,  17), S(  -2,  15),
                S(  -9,  -7), S( -10,   1), S(  -4,  -8), S( -50,  51), S( -46,  49), S(  38,   7), S(  48, -10), S(  -5,  59),
                S( -11,  -9), S(  -7,  21), S( -20,  32), S( -26,  41), S( -28,  45), S( -11,  39), S(  -3,  36), S(  -8,  55),
                S(  -3, -10), S(   4,  28), S(   5,  14), S(  -4,  54), S(   6,  16), S(   7,  23), S(  22,   5), S(   4,  -6),
                S( -10,  -7), S(  23, -56), S(  13,   9), S(  11,  -6), S(  14,  -4), S(  17,   5), S(  31, -18), S(   7,  -9),
                S( -11, -24), S(  15, -48), S(  25, -63), S(  20, -19), S(  27, -38), S(  40, -75), S(  34, -72), S(  -3, -32),
                S(  13, -38), S(   4, -39), S(  22, -40), S(  23,  48), S(  24, -47), S(  18, -74), S(  35, -78), S( -17, -62)
        },
        {
                S(-257, -68), S( 146, -66), S( 188, -53), S(  77, -62), S(-218,  -3), S( -39,  23), S(  66, -10), S( -25, -26),
                S( 106, -42), S( 127,   9), S( 122,  17), S(  89,  -5), S(  54,  -3), S( 128,  24), S(  20,  36), S(-164,  26),
                S(  41,   8), S( 156,  12), S( 184,  20), S(  68,   1), S( 149, -13), S( 213,  32), S( 218,  28), S( -22,  21),
                S( -28,  12), S(  48,  28), S( 118,  28), S(  71,  21), S(  41,  16), S( 132,  33), S(  91,  24), S( -91,  24),
                S( -88,  -2), S( 112, -12), S(  85,  23), S(  47,  20), S(  77,  15), S( 103,  26), S(  85,  11), S( -70,   5),
                S(-106,   4), S( -25,  18), S(   6,  29), S(  55,   8), S(  76,   2), S(  81,  24), S(  53,  13), S( -32,   0),
                S( -94,  -6), S( -82,  14), S( -61,  28), S( -82,  15), S( -40,   8), S( -33,  39), S(   0,  10), S( -14, -17),
                S( -94, -80), S( -72, -26), S(-112,  10), S(-119, -14), S( -37, -51), S(-109,  24), S( -22, -12), S( -23, -72)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -10,  28), S( -24,  39), S( -24,  69), S(  -6, 101), S(  25, 181), S(  61, 206), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  -3,  33), S(  -6,  57), S(  27, 108), S(  84, 216), S( 347, 192), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  39,  39), S( -14,  41), S(  72,  67), S( 142, 151), S( 246, 111), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  27, -48), S(  -6,  -3), S(  -1, -28), S( -17, -72), S( -22,-104), S( 130,-214)},
        {S(   0,   0), S(   0,   0), S(  -2, -33), S(  -6, -46), S(  -5, -43), S(   6, -70), S( -18,-133), S(  59,-256)},
        {S(   0,   0), S(   0,   0), S(  15, -20), S( -18,  30), S(   0,   5), S(  20,  -5), S(  -2, -42), S(   8,-116)},
        {S(   0,   0), S(   0,   0), S(  12, -30), S( -61,  56), S(  16, -50), S(   3,  -2), S(  23, -52), S(  36, 133)},
        {S(   0,   0), S(   0,   0), S(  -1,  22), S(  31,  19), S( -83,   4), S( -46, -35), S(-109,-113), S(  24,-215)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -23), S( -20, -11), S(  -6, -13), S(  10, -30), S(  40,-112)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   1, -11), S(  -5,  -7), S( -16,  -6), S(  -3, -36), S(  27, -72)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  13, -20), S(  28, -23), S(  -8,  19), S(   4,   8), S(  31, -51)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  19, -11), S(  -1, -12), S(   0, -15), S(  26, -38), S(  12,  96)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 135,  -7), S(  34,  -1), S( -79,   3), S( -32, -34), S(  14,-118)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -14), S(   1,  -8), S(  16,   4), S(  42,  63), S(  34, 152), S(  73, 389), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -46);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  26,  70);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  25,   2), S(  -1,  28), S( -20,   6)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  47,   0), S(  -5,  30), S( -53,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  11, -26), S(  75,  37), S(  72,  82), S( 111,   0), S(  74,  40), S( 234,  53)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  59,  23), S(  49,   9), S( 133,  23)},
        {S(   0,  15), S(  31,  44), S(   0,   0), S(  49,  33), S(  56,  64), S(  74,  74)},
        {S( -18,  23), S(  -3,  24), S(   2,  32), S(   0,   0), S(  55,  50), S( 127,  28)},
        {S(  -7,  14), S(   2,  11), S(  -2,  38), S(  -9,  29), S(   0,   0), S(  69, 111)},
        {S(  11,  44), S(  -4,  21), S( -35,  41), S( -56,  40), S(-258,  46), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  42, -10), S(  31,  -9), S(  38,  -5), S(  42,  -9), S(  37,   5), S(   0,   0)},
        {S(  28,  -9), S(  30,   0), S(  29,  -4), S(  21,  -2), S(  27,   8), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  68,   6), S(  39,  -5), S(   8,  -5), S( -20,  -1), S( -39,   5), S( -47,   5), S( -55,   3), S( -61,   5), S( -62,   5), S( -63,   5), S( -62,   5), S( -73,   7), S( -50,  -3), S( -44,  -2), S( -23, -18), S( -56,   3), S( -11, -27), S(  82, -82), S(  91, -65), S( 133, -88), S(  -8,  -8), S( 277,-155), S( 129,-104), S( 193,-276), S(  79, -89), S( 340, 484), S( 124, 180), S( 274, 388), S(   5,   7), S(   1,   2)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  26, -28), S(  43, -17), S(  42, -14), S(   0,   0), S(   0,   0), S(   7,   3), S(  22, -15), S(   9, -25)},
        {S(  32, -17), S(  38, -12), S(   7,   6), S(   0,   0), S(   0,   0), S(  -4,  -2), S(   7,  -3), S(  13,  -6)},
        {S(  25,   3), S( -13,  13), S(   7,   5), S(   0,   0), S(   0,   0), S(  -8, -13), S(  -4,  -1), S(   7,  -4)},
        {S(   5,  39), S(   0,  42), S( -17,  37), S(   0,   0), S(   0,   0), S(  14, -11), S( -32,  20), S(   2,  15)},
        {S( -22,  -6), S( -28,  -6), S( -10,  -6), S(   0,   0), S(   0,   0), S( -25,  -1), S( -31,   8), S( -34,  12)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S( 125, 124), S(  53, 132), S(  99,   6), S(   0,   0), S(   0,   0), S(  24,  90), S(  19, 110), S(  76, 113)},
        {S( -12,  63), S( -63,  71), S( -92,  52), S(   0,   0), S(   0,   0), S( -63,  27), S( -74,  65), S( -41,  81)},
        {S(  -8,  27), S(  18,  10), S(  -8,  15), S(   0,   0), S(   0,   0), S(   3,   2), S(  21,  -2), S(  -4,   9)},
        {S(  -4, -10), S(  11,  -4), S(  12,   1), S(   0,   0), S(   0,   0), S(   3,   1), S(   3,  -4), S(  -7,  -7)},
        {S(  -1, -21), S(  25, -25), S(  20,   0), S(   0,   0), S(   0,   0), S(   6, -16), S(  16, -14), S(   1, -19)},
        {S(  -1, -18), S(  -9,  -3), S(  14,   5), S(   0,   0), S(   0,   0), S(   6,  -6), S(   0,  -9), S(   9, -22)}
};





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
