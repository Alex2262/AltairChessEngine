//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 113, 162), S( 474, 446), S( 457, 433), S( 664, 785), S(1469,1424), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62),
                S( 119, 141), S(  99, 131), S(  62, 108), S( 104,  57), S(  34,  82), S( 121, 119), S( -47, 181), S(   8, 189),
                S( -12,  63), S(   5,  48), S(  21,  19), S(  32, -14), S(  44, -19), S(  14,  23), S( -12,  54), S( -37,  89),
                S( -14,  21), S(  11,  -4), S(   2, -10), S(  18, -32), S(  20, -20), S(  13,  -6), S(  20,  -1), S( -41,  23),
                S( -17,   3), S(  -8,  -7), S(  -2, -20), S(  10, -23), S(   8, -20), S(  11, -13), S(  -9,  -9), S( -44,   4),
                S( -20,  -8), S(  -3, -18), S(  -4, -19), S(   2, -19), S(  13,  -6), S(   4, -19), S(  22, -25), S( -29,  -8),
                S( -23,   5), S(  -5, -11), S( -19,   4), S(  -8, -10), S( -10,  10), S(  21, -19), S(  29, -17), S( -29,  -1),
                S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62), S( -30, -62)
        },
        {
                S(-250, -57), S(-154, -20), S( -96,  13), S( -18, -15), S(  53, -18), S(-175,   6), S( -32, -66), S(-161,-108),
                S( -43, -24), S( -56,   7), S(  19,  -4), S(  12,  32), S(  15,  18), S(  26,  -8), S( -41,  -8), S( -27, -36),
                S( -37, -19), S(  17,   8), S(  46,  31), S(  74,  35), S(  88,  16), S( 111,  17), S(  55,   0), S(  38, -43),
                S(  17,  -3), S(  35,  33), S(  47,  45), S(  71,  54), S(  49,  59), S(  65,  48), S(  37,  30), S(  37,   3),
                S(   1,   7), S(  16,  15), S(  37,  43), S(  43,  55), S(  47,  47), S(  41,  44), S(  51,  22), S(   4,   7),
                S( -10, -44), S(   7,   1), S(  23,   9), S(  26,  31), S(  38,  22), S(  26,   1), S(  23, -10), S(  -7,  -4),
                S( -33, -36), S( -13,  -9), S(   6, -18), S(  19,  14), S(  12,  24), S(  15, -17), S(   4, -13), S(   6, -41),
                S( -96, -40), S( -14, -32), S( -21,  -7), S( -15,   6), S(   0, -10), S(  -2,  -5), S( -16, -21), S( -43, -69)
        },
        {
                S( -63,  -2), S(  -5,  -3), S(-110,  15), S( -85,  13), S( -95,  20), S(-122,  15), S( -23,   1), S(  29, -21),
                S( -37,   8), S( -11,   8), S( -15,  13), S( -37,  11), S( -27,  18), S(  -1,   9), S( -22,   6), S( -65,   8),
                S(   8,   1), S(  18,  10), S(  39,   5), S(  14,  10), S(  22,   5), S(  37,  21), S(  41,  17), S(  11,  17),
                S( -19,   4), S(   8,  22), S(  -3,  22), S(  45,  15), S(  23,  18), S(  21,  11), S(  -1,  30), S(  -8,  18),
                S(  -7,  -7), S(   3,   5), S(  11,  12), S(  26,  16), S(  40,   1), S(   0,  17), S(  12,  -1), S(  14, -15),
                S(  -6, -20), S(  21,  -6), S(  18,  -1), S(  16,   0), S(  15,  17), S(  30,  -3), S(  27,  -6), S(  23, -21),
                S(   4, -33), S(  22, -37), S(  29, -23), S(  13, -11), S(  21, -12), S(  22, -24), S(  48,  -5), S(  21, -42),
                S(  27, -64), S(   8, -29), S(  -6,   5), S(   2,  -8), S( -11,  -7), S(  -5,   3), S( -10,   0), S(   6, -47)
        },
        {
                S(   9,  16), S(  11,  19), S( -27,  27), S( -29,  30), S(  -1,  20), S(  -8,  21), S( -31,  24), S(  53,  10),
                S(   7,  13), S(  -5,  20), S(  23,  12), S(  32,  14), S(  20,  10), S(  40,  -1), S(  -8,  18), S(  19,   7),
                S( -14,   9), S(  21,   1), S(  31,  -1), S(  32,  -3), S(  32,  -7), S(  63,  -5), S(  83, -15), S(  32, -16),
                S(  -9,   6), S(   3,   1), S(  18,   7), S(  34,  -4), S(  13,   4), S(  34,  -1), S( -14,   5), S(  -4,   4),
                S( -32,   7), S( -29,  12), S( -22,   9), S( -13,  10), S( -15,   7), S(  -4,  -5), S(   0,  -4), S( -19,  -6),
                S( -33, -10), S( -19,  -6), S( -25,  -4), S( -17,  -3), S( -21,   1), S( -10, -13), S(   1,  -9), S( -27, -16),
                S( -39, -13), S( -15, -16), S( -25,  -3), S( -14, -10), S( -10, -12), S(  -3, -19), S(   1, -25), S( -80,   0),
                S(  -1, -10), S(   0, -10), S(   7, -12), S(  14, -22), S(   8, -20), S(   4,  -7), S( -18,  -7), S(  -7, -30)
        },
        {
                S( -52,  -1), S( -65,  50), S( -33,  28), S( -22,  -9), S(  -3,  13), S(   4,  15), S(  39, -18), S(   9,   2),
                S( -10,   4), S( -56,  34), S( -44,  43), S( -76,  52), S(-119,  81), S( -42,  44), S( -16,  23), S( -12,  20),
                S(  -3,  -9), S( -12,   2), S( -12,  -4), S( -63,  56), S( -64,  56), S(  19,  14), S(  24,   1), S( -25,  67),
                S(   1, -14), S(  -1,  19), S( -21,  32), S( -34,  44), S( -40,  52), S( -26,  46), S( -22,  44), S( -19,  53),
                S(  18, -19), S(  19,  22), S(  12,  11), S(  -5,  55), S(   0,  20), S(  -3,  26), S(  10,   6), S(  -2,  -8),
                S(  20, -19), S(  44, -64), S(  27,   4), S(  18,  -8), S(  14,  -4), S(  15,   3), S(  24, -18), S(   8, -13),
                S(  27, -41), S(  45, -60), S(  48, -72), S(  35, -25), S(  34, -40), S(  43, -76), S(  33, -71), S(   4, -39),
                S(  59, -58), S(  42, -55), S(  52, -52), S(  45,  40), S(  39, -52), S(  29, -79), S(  45, -84), S(  -1, -70)
        },
        {
                S(-273, -67), S( 150, -69), S( 194, -56), S(  85, -59), S(-212,   0), S( -31,  21), S(  70, -11), S( -21, -27),
                S( 115, -47), S( 135,   4), S( 131,  13), S(  93,  -1), S(  61,   0), S( 137,  21), S(  29,  33), S(-156,  24),
                S(  53,   3), S( 165,   7), S( 194,  14), S(  75,   4), S( 155, -10), S( 222,  29), S( 227,  25), S( -12,  18),
                S( -19,   6), S(  58,  22), S( 129,  22), S(  77,  24), S(  46,  19), S( 142,  30), S( 101,  20), S( -80,  21),
                S( -77,  -7), S( 124, -17), S(  96,  17), S(  52,  23), S(  82,  17), S( 115,  22), S(  97,   7), S( -59,   2),
                S( -99,   1), S( -12,  12), S(  21,  23), S(  65,  10), S(  85,   4), S(  97,  19), S(  68,   8), S( -24,  -2),
                S( -93,  -8), S( -71,   9), S( -46,  22), S( -68,  15), S( -27,   9), S( -17,  34), S(  10,   7), S( -16, -15),
                S(-101, -79), S( -69, -28), S(-101,   5), S(-114, -10), S( -33, -47), S(-101,  21), S( -24,  -9), S( -39, -63)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S( -10,  28), S( -24,  39), S( -24,  69), S(  -6, 101), S(  25, 181), S(  63, 207), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  -3,  33), S(  -6,  57), S(  27, 108), S(  84, 215), S( 351, 193), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  39,  38), S( -14,  42), S(  73,  67), S( 140, 151), S( 273, 106), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  25, -47), S(  -6,  -2), S(  -3, -28), S( -19, -71), S( -23,-103), S( 126,-212)},
        {S(   0,   0), S(   0,   0), S(  -3, -33), S(  -6, -46), S(  -5, -43), S(   6, -70), S( -17,-133), S(  60,-257)},
        {S(   0,   0), S(   0,   0), S(  15, -20), S( -18,  30), S(  -1,   6), S(  20,  -5), S(  -2, -42), S(   9,-117)},
        {S(   0,   0), S(   0,   0), S(  11, -29), S( -63,  58), S(  15, -49), S(   2,  -2), S(  22, -52), S(  36, 132)},
        {S(   0,   0), S(   0,   0), S(  -1,  22), S(  34,  19), S( -83,   4), S( -45, -36), S(-111,-113), S(  21,-214)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -24), S( -20, -11), S(  -6, -14), S(   9, -30), S(  37,-110)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   1, -11), S(  -5,  -6), S( -16,  -5), S(  -3, -36), S(  27, -72)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  14, -21), S(  28, -23), S( -10,  19), S(   4,   7), S(  31, -52)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  17,  -9), S(  -2, -10), S(  -2, -14), S(  24, -37), S(  12,  95)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 133,  -7), S(  35,  -2), S( -77,   3), S( -32, -35), S(  12,-117)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   0, -14), S(   1,  -8), S(  16,   4), S(  42,  63), S(  33, 152), S(  72, 391), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -46);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  27,  69);

constexpr SCORE_TYPE TEMPO_BONUS = S(  25,  28);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   5,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  25,   2), S(  -1,  28), S( -20,   6)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  48,   0), S(  -5,  30), S( -54,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  10, -26), S(  75,  37), S(  73,  81), S( 111,   0), S(  73,  43), S( 234,  52)},
        {S( -11,  17), S(   0,   0), S(  31,  47), S(  59,  22), S(  49,  11), S( 128,  19)},
        {S(   0,  15), S(  31,  44), S(   0,   0), S(  49,  33), S(  55,  65), S(  73,  76)},
        {S( -18,  23), S(  -4,  25), S(   2,  33), S(   0,   0), S(  54,  53), S( 122,  32)},
        {S(  -6,  14), S(   1,  10), S(  -2,  37), S(  -9,  30), S(   0,   0), S(  67, 111)},
        {S(  11,  44), S(  -1,  21), S( -40,  40), S( -51,  37), S(-251,  49), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  44, -10), S(  29, -13), S(  40,  -5), S(  43,  -8), S(  37,   5), S(   0,   0)},
        {S(  29,  -9), S(  30,  -2), S(  30,  -3), S(  22,  -2), S(  28,   9), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[30] = {S(  77,   7), S(  47,  -5), S(  14,  -5), S( -15,  -1), S( -37,   5), S( -47,   6), S( -57,   4), S( -65,   6), S( -68,   6), S( -70,   7), S( -70,   7), S( -82,   9), S( -61,  -1), S( -57,   0), S( -37, -16), S( -71,   5), S( -28, -24), S(  60, -77), S(  70, -62), S( 110, -85), S( -40,   3), S( 279,-173), S( 104,-102), S( 177,-293), S(  59,-132), S( 339, 482), S( 148, 215), S( 267, 378), S(   4,   6), S(   1,   1)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  24, -26), S(  39, -14), S(  39, -12), S(   0,   0), S(   0,   0), S(   5,   6), S(  20, -13), S(   7, -24)},
        {S(  31, -15), S(  36,  -9), S(   3,   9), S(   0,   0), S(   0,   0), S(  -5,   0), S(   7,  -2), S(  12,  -5)},
        {S(  23,   6), S( -17,  15), S(   2,   8), S(   0,   0), S(   0,   0), S( -10, -10), S(  -5,   1), S(   7,  -3)},
        {S(   0,  42), S(  -8,  45), S( -23,  41), S(   0,   0), S(   0,   0), S(  13,  -8), S( -34,  22), S(   2,  15)},
        {S( -21,  -4), S( -30,  -4), S( -15,  -3), S(   0,   0), S(   0,   0), S( -24,   1), S( -30,   9), S( -32,  12)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S( 132, 123), S(  49, 132), S( 105,   6), S(   0,   0), S(   0,   0), S(  21,  92), S(  16, 112), S(  82, 111)},
        {S(  -6,  62), S( -55,  70), S( -92,  53), S(   0,   0), S(   0,   0), S( -62,  27), S( -75,  65), S( -39,  80)},
        {S(  -3,  26), S(  21,  10), S(  -7,  15), S(   0,   0), S(   0,   0), S(   1,   3), S(  18,   0), S(  -4,   9)},
        {S(  -2, -11), S(  13,  -5), S(  12,   2), S(   0,   0), S(   0,   0), S(   0,   3), S(  -1,  -2), S(  -8,  -7)},
        {S(   0, -21), S(  25, -25), S(  17,   2), S(   0,   0), S(   0,   0), S(   1, -14), S(  12, -12), S(   0, -18)},
        {S(  -1, -18), S(  -6,  -3), S(  15,   6), S(   0,   0), S(   0,   0), S(   4,  -5), S(  -3,  -8), S(   8, -22)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(   0,   0), S(  -2,  -2), S(   1,   1), S(  -4,   2), S(  -8,   3), S(   0,   0)};





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
