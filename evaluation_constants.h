//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310,340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 116, 141), S( 481, 441), S( 467, 427), S( 670, 772), S(1479,1416), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55),
                S( 133, 106), S( 102, 102), S(  61,  89), S(  99,  46), S(  38,  77), S( 110, 103), S( -47, 160), S(  19, 158),
                S(  -7,  44), S(  -2,  39), S(  19,  17), S(  28,  -3), S(  44,  -3), S(  15,  26), S( -15,  53), S( -22,  74),
                S( -13,   5), S(   1,  -6), S(   0,  -7), S(  16, -21), S(  16, -13), S(  12,  -3), S(  17,   2), S( -33,  18),
                S( -16, -11), S( -21,  -4), S(  -3, -15), S(  11, -15), S(   6, -14), S(  14, -10), S( -11,  -3), S( -35,   0),
                S( -18, -19), S( -17, -12), S(  -4, -12), S(   4, -12), S(  11,   1), S(  17, -11), S(  21, -13), S( -16, -10),
                S( -17,  -7), S( -21,  -7), S( -18,  10), S(  -5,  -6), S( -12,  19), S(  29, -12), S(  22,  -9), S( -11,  -6),
                S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55)
        },
        {
                S(-252, -56), S(-152, -20), S(-101,  14), S( -16, -16), S(  57, -17), S(-176,   7), S( -45, -60), S(-161,-107),
                S( -48, -21), S( -58,   8), S(  14,  -3), S(  11,  32), S(  13,  19), S(  24,  -7), S( -46,  -6), S( -32, -35),
                S( -37, -19), S(  17,   6), S(  47,  28), S(  75,  34), S(  88,  16), S( 112,  14), S(  53,  -1), S(  37, -45),
                S(  18,  -4), S(  34,  32), S(  47,  44), S(  70,  53), S(  52,  58), S(  66,  47), S(  39,  28), S(  39,   2),
                S(   1,   8), S(  17,  14), S(  38,  42), S(  43,  53), S(  47,  45), S(  40,  42), S(  51,  20), S(   4,   6),
                S( -11, -41), S(   9,   1), S(  23,   9), S(  29,  28), S(  40,  20), S(  30,  -2), S(  25, -12), S(  -7,  -4),
                S( -33, -35), S( -15,  -6), S(   6, -17), S(  19,  15), S(  14,  23), S(  16, -17), S(   4, -15), S(   6, -39),
                S( -90, -40), S( -13, -30), S( -16,  -8), S( -12,   5), S(   4,  -9), S(   2,  -6), S( -16, -17), S( -47, -58)
        },
        {
                S( -61,  -1), S(  -8,  -1), S(-113,  15), S( -88,  14), S( -97,  21), S(-109,  12), S(  -5,  -2), S(  32, -20),
                S( -42,  11), S( -13,   8), S( -16,  14), S( -40,  12), S( -27,  19), S( -11,  12), S( -30,   8), S( -59,   5),
                S(   9,   0), S(  17,  10), S(  40,   3), S(  12,  11), S(  19,   6), S(  31,  22), S(  31,  18), S(  15,  13),
                S( -18,   2), S(   9,  20), S(  -3,  23), S(  44,  14), S(  22,  17), S(  14,  12), S(  -3,  29), S(  -5,  16),
                S(  -7,  -6), S(   3,   6), S(  11,  11), S(  26,  15), S(  38,   1), S(  -1,  16), S(  11,  -1), S(  14, -15),
                S(  -5, -19), S(  20,  -6), S(  18,  -1), S(  15,   0), S(  15,  17), S(  29,  -4), S(  28,  -8), S(  22, -20),
                S(   6, -32), S(  22, -36), S(  27, -23), S(  11, -10), S(  20, -11), S(  22, -24), S(  49,  -7), S(  21, -41),
                S(  29, -64), S(  13, -31), S(  -6,  10), S(   9, -10), S(  -5,  -8), S(  -2,   3), S(  -6,   0), S(   6, -46)
        },
        {
                S(  15,  14), S(  19,  16), S( -21,  25), S( -28,  29), S(   5,  18), S( -13,  21), S( -36,  25), S(  62,   6),
                S(   9,  12), S(  -5,  19), S(  22,  11), S(  30,  12), S(  17,   9), S(  37,  -2), S( -12,  17), S(  27,   2),
                S( -12,   9), S(  18,   0), S(  29,  -3), S(  28,  -3), S(  25,  -7), S(  53,  -5), S(  75, -15), S(  33, -17),
                S(  -7,   6), S(   2,   0), S(  17,   6), S(  31,  -4), S(   7,   4), S(  27,  -1), S( -12,   3), S(  -1,   2),
                S( -30,   9), S( -29,  13), S( -21,   9), S( -13,  10), S( -19,   7), S(  -7,  -4), S(   4,  -5), S( -18,  -5),
                S( -31,  -8), S( -17,  -5), S( -22,  -4), S( -14,  -2), S( -20,   1), S(  -8, -12), S(   5,  -9), S( -23, -15),
                S( -37, -10), S( -12, -15), S( -22,  -2), S( -12,  -9), S(  -8, -10), S(  -2, -18), S(   1, -22), S( -78,   3),
                S(   1, -10), S(  -3, -10), S(   0, -10), S(   6, -19), S(   2, -19), S(   3,  -7), S( -17,  -6), S(  -6, -26)
        },
        {
                S( -54,   2), S( -60,  49), S( -26,  25), S( -21,  -8), S(  -5,  14), S(  -8,  24), S(  34, -13), S(   1,   4),
                S( -12,   5), S( -57,  36), S( -46,  46), S( -75,  50), S(-117,  82), S( -48,  49), S( -19,  23), S( -13,  19),
                S(  -3, -11), S( -12,  -1), S( -12,  -4), S( -62,  58), S( -60,  54), S(  17,  18), S(  20,   3), S( -28,  70),
                S(   3, -19), S(  -1,  17), S( -20,  32), S( -32,  46), S( -38,  51), S( -24,  46), S( -21,  45), S( -15,  49),
                S(  18, -19), S(  19,  22), S(  12,  11), S(  -4,  57), S(  -1,  22), S(  -4,  28), S(  12,   5), S(  -2,  -9),
                S(  21, -18), S(  45, -64), S(  28,   5), S(  19,  -8), S(  13,  -4), S(  15,   4), S(  25, -20), S(   8, -13),
                S(  30, -43), S(  45, -62), S(  48, -70), S(  35, -26), S(  36, -42), S(  43, -78), S(  33, -73), S(   5, -37),
                S(  58, -60), S(  45, -62), S(  54, -57), S(  47,  39), S(  43, -60), S(  26, -77), S(  46, -84), S(  -5, -69)
        },
        {
                S(-278, -38), S( 137, -42), S( 212, -37), S(  89, -29), S(-221,  29), S( -38,  45), S(  31,  18), S( -30,  -3),
                S( 101, -26), S( 139,  21), S( 138,  30), S(  92,  24), S(  49,  28), S( 160,  37), S(  51,  48), S(-164,  41),
                S(  61,  10), S( 162,  18), S( 187,  23), S(  67,  21), S( 145,   8), S( 227,  42), S( 240,  36), S(   5,  28),
                S( -18,  13), S(  59,  25), S( 132,  23), S(  83,  27), S(  48,  25), S( 153,  33), S( 105,  26), S( -83,  28),
                S( -72,  -5), S( 127, -19), S(  93,  15), S(  59,  22), S(  93,  16), S( 124,  22), S( 103,  10), S( -65,   9),
                S(-107,   4), S( -13,  10), S(  19,  16), S(  68,   8), S(  87,   3), S(  99,  16), S(  62,  10), S( -30,   3),
                S( -98,  -7), S( -76,   5), S( -52,  13), S( -68,  11), S( -29,   6), S( -19,  28), S(   4,   6), S( -22, -13),
                S(-105, -82), S( -66, -38), S( -93,  -9), S(-110, -18), S( -31, -53), S(-100,  13), S( -23, -14), S( -44, -61)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S(   1,  10), S(  -8,  17), S(  -8,  41), S(  10,  64), S(  42, 132), S(  77, 167), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   4,  22), S(  -2,  43), S(  32,  88), S(  88, 187), S( 342, 176), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  41,  27), S( -11,  31), S(  78,  62), S( 142, 134), S( 255, 190), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  26, -50), S(  -4,  -2), S(  -6, -24), S( -21, -67), S( -26, -97), S( 122,-215)},
        {S(   0,   0), S(   0,   0), S(  -1, -34), S(  -6, -46), S(  -5, -43), S(   4, -67), S( -21,-130), S(  59,-259)},
        {S(   0,   0), S(   0,   0), S(  19, -20), S( -15,  26), S(  -1,   4), S(  21,  -7), S(  -5, -43), S(   4,-122)},
        {S(   0,   0), S(   0,   0), S(  18, -34), S( -64,  64), S(  16, -49), S(   1,   3), S(  20, -43), S(  38, 124)},
        {S(   0,   0), S(   0,   0), S(  22,  21), S(  32,  16), S( -82,   9), S( -53, -19), S(-120, -86), S(  14,-179)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   5, -21), S( -21, -11), S(  -9,  -8), S(   4, -20), S(  31,-107)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  10, -16), S(   0,  -9), S( -16,  -2), S(  -5, -31), S(  26, -66)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  18, -24), S(  32, -24), S(  -7,  18), S(   5,   6), S(  34, -55)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  17,  -6), S(  -6,  -5), S(   1, -16), S(  20, -24), S(   6, 108)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 134,  -9), S(  22,  -1), S( -79,   9), S( -32, -20), S(  10, -90)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S( -11,  -4), S(  -7,  -4), S(  12,  11), S(  37,  73), S(  23, 168), S(  68, 412), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S( -13, -15);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  28,  68);

constexpr SCORE_TYPE TEMPO_BONUS = S(  26,  23);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   7,   5), S(   6,   4), S(   4,  -1), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  24,   0), S(  -1,  32), S( -20,   9)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  47,  -3), S(  -6,  32), S( -52,  -1)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  11, -19), S(  75,  37), S(  73,  80), S( 110,   0), S(  73,  44), S( 232,  60)},
        {S( -11,  16), S(   0,   0), S(  32,  47), S(  61,  22), S(  48,  12), S( 128,  18)},
        {S(   0,  15), S(  31,  43), S(   0,   0), S(  49,  34), S(  55,  58), S(  76,  76)},
        {S( -14,  24), S(  -4,  27), S(   3,  34), S( -27,  23), S(  51,  48), S( 122,  34)},
        {S(  -6,  14), S(   4,   4), S(  -1,  36), S( -13,  33), S(  -4, -14), S(  68, 114)},
        {S(  15,  43), S(   2,  22), S( -30,  39), S(  -3,  27), S(-257,  58), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  42,  -9), S(  32, -16), S(  42,  -8), S(  40, -10), S(  38,   2), S(   0,   0)},
        {S(  22,  -7), S(  23,  -2), S(  23,  -3), S(  16,  -2), S(  22,   9), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(  54,  -2), S(  31,  -9), S(   8, -10), S( -10,  -8), S( -29,  -5), S( -40,  -2), S( -50,   1), S( -55,   3), S( -62,   6), S( -66,   5), S( -63,   6), S( -59,   5), S( -59,   7), S( -60,   7), S( -49,   7), S( -46,   7), S( -28,   4), S( -34,  10), S( -29,   8), S(  -1,  -7), S( -28,  12), S(  -3,   2), S(  82, -18), S(  24,  -1), S(  92, -23), S(  38,  20), S( 244, -98), S( -12,  72), S( 139,  -1), S( 144,-114), S( 438, -98), S( 202, 126), S(-122, 128), S( 121, 194), S( 246, 144), S( -71, -86), S( -13,  -8), S( 294, 389), S(   2,   4), S(-101,-170)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  26, -20), S(  37, -10), S(  38, -11), S(   0,   0), S(   0,   0), S(   3,   7), S(  18, -10), S(   5, -23)},
        {S(  27,  -9), S(  34,  -5), S(   3,   8), S(   0,   0), S(   0,   0), S( -12,   0), S(   3,  -3), S(   9,  -4)},
        {S(  21,  11), S( -18,  17), S(   1,   9), S(   0,   0), S(   0,   0), S( -11,  -9), S(  -6,   1), S(   6,   0)},
        {S(   0,  42), S( -12,  46), S( -24,  44), S(   0,   0), S(   0,   0), S(  16,  -8), S( -34,  20), S(   3,  16)},
        {S( -19, -10), S( -27,  -8), S( -12,  -6), S(   0,   0), S(   0,   0), S( -20,  -2), S( -24,   5), S( -26,   7)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S( 137, 104), S(  44, 111), S(  99,  -1), S(   0,   0), S(   0,   0), S(   7,  81), S(  16,  98), S(  78,  94)},
        {S(  -6,  48), S( -59,  60), S(-101,  48), S(   0,   0), S(   0,   0), S( -64,  24), S( -74,  58), S( -39,  64)},
        {S(   0,  20), S(  25,   7), S(  -6,  16), S(   0,   0), S(   0,   0), S(   4,   3), S(  23,   0), S(  -2,   5)},
        {S(  -1, -12), S(  15,  -4), S(  13,   5), S(   0,   0), S(   0,   0), S(   1,   3), S(   3,   0), S(  -8,  -6)},
        {S(   0, -19), S(  27, -23), S(  21,   2), S(   0,   0), S(   0,   0), S(   4, -14), S(  17, -11), S(   1, -15)},
        {S(  -5,  -7), S(  -7,   2), S(  16,   7), S(   0,   0), S(   0,   0), S(   0,  -3), S(  -7,  -4), S(   0, -15)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(   0,   0), S(  -2,  -2), S(   1,   1), S(  -4,   2), S(  -8,   3), S(   0,   0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S( -20, -26);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S( -12,  63);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY = S( -13,   3);





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
