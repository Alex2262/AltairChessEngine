//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   122,   160), S(   487,   444), S(   487,   462), S(   667,   799), S(  1411,  1416), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(   127,    21), S(    77,    53), S(    50,    61), S(    95,    44), S(    73,    60), S(   143,    57), S(   -31,   105), S(    73,    75),
                S(   -24,    22), S(   -22,    22), S(     0,    11), S(     7,     0), S(    21,     3), S(    -2,    21), S(   -21,    32), S(   -31,    35),
                S(   -31,     4), S(   -21,   -10), S(   -18,   -18), S(    -4,   -35), S(    -3,   -25), S(     1,   -21), S(    -7,   -11), S(   -40,     0),
                S(   -35,    -7), S(   -35,   -12), S(   -16,   -28), S(    -4,   -34), S(    -6,   -32), S(    -2,   -28), S(   -21,   -15), S(   -46,   -11),
                S(   -34,   -20), S(   -29,   -24), S(   -16,   -25), S(    -7,   -31), S(     0,   -19), S(     4,   -28), S(     4,   -26), S(   -27,   -25),
                S(   -32,   -13), S(   -32,   -21), S(   -31,   -12), S(   -16,   -20), S(   -21,    -3), S(    14,   -31), S(     3,   -21), S(   -23,   -19),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(  -191,   -41), S(  -130,    -4), S(  -108,    21), S(    -4,   -13), S(    39,   -18), S(  -142,    14), S(   -23,   -51), S(  -135,   -80),
                S(   -19,   -19), S(   -35,     4), S(    29,   -19), S(    32,    21), S(    34,     5), S(    46,   -26), S(   -44,    -4), S(    -5,   -29),
                S(   -22,   -17), S(    28,    -3), S(    52,    29), S(    71,    29), S(    85,    13), S(   102,    19), S(    46,    -9), S(    41,   -37),
                S(    28,    -2), S(    44,    15), S(    50,    39), S(    65,    49), S(    51,    51), S(    62,    40), S(    34,    19), S(    31,     4),
                S(    10,    -3), S(    25,     6), S(    38,    36), S(    38,    43), S(    38,    38), S(    25,    34), S(    32,    17), S(    -2,     9),
                S(    -7,   -32), S(    12,   -11), S(    21,     1), S(    24,    26), S(    24,    20), S(    14,    -7), S(     5,   -14), S(    -9,   -22),
                S(   -31,   -20), S(   -24,     0), S(    -3,    -8), S(     7,     0), S(    -2,    12), S(    -8,   -12), S(   -27,    -7), S(   -17,   -20),
                S(  -103,   -30), S(   -11,   -27), S(   -31,    -2), S(   -15,    11), S(    -6,    -5), S(   -15,   -11), S(   -20,   -17), S(   -92,    -5)
        },
        {
                S(   -18,    -2), S(     1,     2), S(   -96,    14), S(   -72,    15), S(  -105,    15), S(   -92,     3), S(    46,   -16), S(    15,    -6),
                S(   -19,    12), S(     8,     4), S(     3,     6), S(   -14,     3), S(   -18,    11), S(     5,     7), S(   -17,     9), S(   -31,     6),
                S(    25,    -4), S(    29,     7), S(    59,     2), S(    20,     9), S(    33,     1), S(    32,    27), S(    19,    19), S(    14,    10),
                S(    -6,    -3), S(    26,    10), S(     6,    18), S(    48,    13), S(    21,    22), S(     3,    19), S(    -5,    20), S(   -16,     8),
                S(     4,   -13), S(    10,     2), S(    14,    11), S(    26,    15), S(    30,     5), S(    -3,    10), S(    -8,     3), S(    -3,   -14),
                S(     1,   -21), S(    17,   -10), S(    10,     1), S(     6,     4), S(     3,    14), S(    12,    -4), S(     6,    -2), S(     5,   -17),
                S(     2,   -24), S(    11,   -31), S(     8,   -16), S(    -5,    -9), S(    -1,    -7), S(    -1,   -16), S(    24,   -19), S(     7,   -40),
                S(    11,   -39), S(     6,   -24), S(   -16,     3), S(   -15,    -6), S(   -22,    -3), S(   -19,     7), S(   -13,     9), S(   -11,   -31)
        },
        {
                S(    37,     8), S(    30,    14), S(   -15,    28), S(   -32,    34), S(     4,    20), S(   -18,    24), S(     2,    15), S(    36,    13),
                S(    18,     7), S(     0,    13), S(    20,    12), S(    32,    13), S(     5,    18), S(    28,    -2), S(    -8,    10), S(    15,     4),
                S(     0,     4), S(    31,    -5), S(    25,     0), S(    30,    -4), S(    26,    -9), S(    54,    -4), S(    80,   -18), S(    22,    -9),
                S(     1,     2), S(    10,    -4), S(    12,     6), S(    30,    -3), S(    13,     2), S(    19,     0), S(     1,    -1), S(    -2,     5),
                S(   -19,    -1), S(   -12,     5), S(   -26,    11), S(   -10,     7), S(   -22,     9), S(   -13,     3), S(   -10,     3), S(   -19,    -4),
                S(   -24,   -14), S(   -11,   -10), S(   -23,    -3), S(   -20,     0), S(   -21,    -2), S(   -15,    -8), S(     5,    -9), S(   -27,   -12),
                S(   -38,    -7), S(   -15,   -15), S(   -16,    -7), S(    -9,   -10), S(   -19,    -3), S(   -10,   -13), S(    -9,   -20), S(   -79,     7),
                S(     2,   -17), S(    -7,    -7), S(    -3,    -8), S(     2,   -15), S(    -5,   -15), S(    -4,    -4), S(   -20,    -6), S(   -10,   -28)
        },
        {
                S(   -32,   -14), S(   -17,     6), S(   -20,    10), S(    -8,   -17), S(    -4,     2), S(    21,    -2), S(    45,   -15), S(    17,    -8),
                S(    -7,   -10), S(   -55,    31), S(   -33,    22), S(   -82,    52), S(  -107,    77), S(   -33,    33), S(   -19,    24), S(   -11,    33),
                S(    -4,   -20), S(   -12,   -10), S(   -23,     9), S(   -47,    31), S(   -57,    44), S(   -11,    49), S(     8,    24), S(   -31,    82),
                S(     1,   -11), S(     0,     6), S(   -18,    18), S(   -21,    31), S(   -39,    55), S(   -28,    50), S(   -16,    47), S(    -7,    31),
                S(    17,   -23), S(    20,    11), S(     9,    11), S(    -2,    45), S(   -13,    38), S(    -5,    28), S(    14,     3), S(     6,     5),
                S(    22,   -31), S(    38,   -35), S(    29,    -1), S(    13,     5), S(     6,     6), S(     6,    20), S(    21,    -6), S(    12,     1),
                S(    21,   -20), S(    39,   -39), S(    42,   -58), S(    29,    -6), S(    28,   -32), S(    26,   -51), S(    32,   -75), S(     6,   -36),
                S(    51,   -51), S(    33,   -49), S(    37,   -43), S(    40,   -45), S(    25,   -37), S(    14,   -52), S(    31,   -82), S(     5,   -59)
        },
        {
                S(  -258,   -28), S(    48,   -16), S(   170,   -17), S(    22,   -24), S(  -199,    26), S(   -66,    44), S(    45,    14), S(   -31,   -10),
                S(    67,   -17), S(   128,    17), S(   148,    20), S(    48,    20), S(    65,    12), S(   167,    19), S(    54,    45), S(  -142,    34),
                S(    65,     5), S(   132,    17), S(   201,    11), S(    48,     8), S(   144,    -9), S(   235,    22), S(   242,    16), S(    -4,    19),
                S(   -17,    11), S(   115,     6), S(   122,    15), S(    63,    13), S(    37,    13), S(   159,    15), S(   136,    10), S(   -31,    15),
                S(   -44,    -8), S(   123,   -20), S(   117,     1), S(    31,    14), S(   100,     2), S(   135,     6), S(   131,    -5), S(   -48,     4),
                S(   -96,     6), S(    -8,     8), S(    35,     9), S(    61,     1), S(    84,    -3), S(    89,     7), S(    52,     6), S(   -34,     5),
                S(   -86,     3), S(   -58,     8), S(   -50,    16), S(   -71,    10), S(   -30,     5), S(   -32,    27), S(    -7,    11), S(   -22,    -5),
                S(   -94,   -59), S(   -54,   -25), S(   -94,     4), S(  -111,   -12), S(   -37,   -43), S(  -107,    20), S(   -22,    -9), S(   -28,   -60)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -32,   -73), S(   -16,   -28), S(    -9,    -8), S(    -4,    11), S(     2,    18), S(     5,    29), S(    11,    28), S(    15,    21), S(    28,     2), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -39,   -90), S(   -30,   -60), S(   -21,   -36), S(   -13,   -17), S(    -5,    -3), S(    -1,    10), S(    -1,    20), S(     0,    24), S(     0,    33), S(     6,    28), S(    10,    26), S(    35,    17), S(     1,    41), S(    58,     7), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -44,  -113), S(   -30,   -64), S(   -25,   -41), S(   -24,   -15), S(   -23,    -1), S(   -15,     6), S(    -9,    12), S(    -2,    15), S(     1,    23), S(     6,    28), S(    11,    33), S(    15,    38), S(    23,    38), S(    34,    30), S(    83,     9), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -15,  -446), S(   -24,  -179), S(   -23,  -168), S(   -20,   -70), S(   -22,   -45), S(   -18,   -40), S(   -16,   -13), S(   -16,    17), S(   -14,    26), S(    -8,    29), S(    -7,    43), S(    -4,    44), S(    -3,    53), S(     2,    52), S(    -4,    63), S(    -4,    72), S(    -6,    70), S(     3,    59), S(     1,    72), S(     8,    66), S(    24,    50), S(    35,    48), S(    16,    44), S(    44,    49), S(   -58,    67), S(    52,    23), S(    49,    -8), S(    29,    21)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(    14,    31), S(   -66,    56), S(   -88,    83), S(   -50,    83), S(    12,   107), S(   113,   130), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -54,    58), S(   -82,    86), S(   -23,   108), S(    66,   167), S(   392,   163), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -57,    70), S(   -79,    62), S(    29,    79), S(   156,    97), S(   175,   225), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(    11,   -32), S(   -12,    -2), S(   -12,   -26), S(   -14,   -68), S(   -23,   -94), S(    76,  -174)},
        {S(     0,     0), S(     0,     0), S(     0,   -22), S(     2,   -42), S(    -3,   -46), S(     6,   -67), S(   -27,  -115), S(    11,  -216)},
        {S(     0,     0), S(     0,     0), S(    15,   -21), S(   -18,    15), S(     3,    -2), S(    -6,    -4), S(     2,   -48), S(   -24,   -93)},
        {S(     0,     0), S(     0,     0), S(    -1,   -18), S(   -49,    24), S(    15,   -40), S(   -14,     7), S(     9,   -35), S(    -5,    80)},
        {S(     0,     0), S(     0,     0), S(    64,   -24), S(    81,    -6), S(   -58,    -2), S(   -44,   -10), S(  -106,   -46), S(   -73,  -105)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    -6,    -4), S(   -15,    -6), S(    -1,   -10), S(     4,   -21), S(    43,  -100)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    -6,     0), S(    10,    -2), S(   -10,     1), S(    -4,   -19), S(    27,   -61)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    19,   -27), S(    18,   -15), S(    -2,    10), S(    13,     4), S(    19,   -40)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    11,    -1), S(    -7,   -13), S(    15,   -28), S(     9,    -3), S(     9,    50)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   177,   -31), S(    63,   -14), S(   -20,    -6), S(    12,   -22), S(    18,   -79)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(    -9,   -12), S(    -5,    -3), S(     9,    15), S(    35,    73), S(   105,   122), S(   220,   195), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -12,   -14);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    25,    68);

constexpr SCORE_TYPE TEMPO_BONUS = S(    20,    22);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    18,    -2), S(     3,     9), S(   -18,     8)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    35,     0), S(    -5,    16), S(   -50,    -2)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(     9,   -20), S(    64,    47), S(    62,    82), S(    95,     5), S(    64,    30), S(   150,    53)},
        {S(    -9,    10), S(     0,     0), S(    26,    44), S(    48,    26), S(    42,    12), S(    98,    11)},
        {S(     0,    10), S(    26,    44), S(    32,    58), S(    44,    31), S(    49,    48), S(    48,    62)},
        {S(   -11,    20), S(     0,    23), S(     5,    26), S(    -4,   -23), S(    42,    49), S(    95,    21)},
        {S(    -3,    11), S(     4,    -2), S(     2,    22), S(    -8,    26), S(    -4,     5), S(    64,    84)},
        {S(    -1,    42), S(     5,    17), S(   -21,    31), S(     0,    19), S(  -121,    13), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    44,   -12), S(    30,   -10), S(    45,    -6), S(    42,   -11), S(    38,     2), S(     0,     0)},
        {S(    23,    -9), S(    24,    -2), S(    24,    -3), S(    17,    -3), S(    20,     8), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    59,    -2), S(    35,    -6), S(    12,    -6), S(    -7,    -3), S(   -26,     0), S(   -37,     1), S(   -50,     4), S(   -56,     5), S(   -60,     7), S(   -68,     7), S(   -64,     5), S(   -66,     7), S(   -60,     5), S(   -65,     7), S(   -58,     9), S(   -57,    10), S(   -43,     9), S(   -46,    10), S(   -37,     7), S(   -16,    -3), S(   -39,    12), S(   -14,     1), S(    22,     0), S(   -66,    38), S(    33,     0), S(    54,   -12), S(   184,   -70), S(   140,   -30), S(    71,    -4), S(    56,   -39), S(   440,  -219), S(   154,    60), S(   206,   -21), S(   164,    98), S(   301,   140), S(   -39,   -54), S(     5,    46), S(   231,    70), S(   -12,   -12), S(   -11,    14)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(    27,   -14), S(    42,    -8), S(    38,   -10), S(     0,     0), S(     0,     0), S(     5,     8), S(    26,    -8), S(     9,   -25)},
        {S(    26,    -8), S(    30,    -6), S(     7,    -2), S(     0,     0), S(     0,     0), S(    -6,    -4), S(     7,    -7), S(    13,    -6)},
        {S(    26,    -1), S(   -14,     6), S(    -2,    -1), S(     0,     0), S(     0,     0), S(    -4,    -9), S(    -5,    -4), S(     7,    -5)},
        {S(     0,    17), S(   -10,    23), S(   -14,    24), S(     0,     0), S(     0,     0), S(    19,    -9), S(   -23,    12), S(     7,     6)},
        {S(   -21,    -3), S(   -27,    -7), S(   -10,    -9), S(     0,     0), S(     0,     0), S(   -17,    -3), S(   -25,     6), S(   -26,     7)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(    55,    26), S(    69,    30), S(    23,    -5), S(     0,     0), S(     0,     0), S(    21,    47), S(    -7,    40), S(   152,    10)},
        {S(    -3,     8), S(   -58,    25), S(   -51,    22), S(     0,     0), S(     0,     0), S(   -45,    17), S(   -28,    21), S(   -11,    16)},
        {S(     9,    12), S(    17,     5), S(    -4,     4), S(     0,     0), S(     0,     0), S(    11,     2), S(    20,    -4), S(    11,    -1)},
        {S(     1,     2), S(     3,     7), S(     6,     4), S(     0,     0), S(     0,     0), S(     2,    -1), S(     3,     5), S(    -7,     1)},
        {S(     3,    -2), S(    23,   -17), S(    17,    -2), S(     0,     0), S(     0,     0), S(     3,   -10), S(    14,    -5), S(     5,    -7)},
        {S(    -6,    -2), S(   -18,     2), S(    10,     4), S(     0,     0), S(     0,     0), S(     0,    -2), S(   -12,    -1), S(    -5,    -9)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(    -2,    -2), S(     2,     1), S(    -3,     1), S(    -6,    -1), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -4,     0), S(    -5,     1), S(    -2,     2), S(    -1,     3), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -20,   -32);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(   -24,    42);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY = S(   -12,     0);

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(    -2,    -1), S(     3,    -7), S(     9,   -15), S(     9,   -21), S(     4,   -21), S(    -4,   -20), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(     0,    -3), S(    11,    -4), S(    12,     2), S(     9,    17), S(     6,    32), S(    -5,    43), S(     0,     0)};





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
