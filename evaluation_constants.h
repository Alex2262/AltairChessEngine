//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310,340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 116, 141), S( 484, 441), S( 466, 426), S( 664, 774), S(1490,1407), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55),
                S( 129, 107), S(  98, 103), S(  58,  89), S(  94,  47), S(  32,  78), S( 105, 104), S( -53, 161), S(  16, 158),
                S(  -7,  44), S(  -2,  40), S(  19,  17), S(  28,  -3), S(  44,  -3), S(  17,  25), S( -15,  53), S( -23,  74),
                S( -12,   5), S(   2,  -6), S(   1,  -7), S(  17, -21), S(  17, -14), S(  13,  -3), S(  17,   2), S( -33,  18),
                S( -15, -11), S( -20,  -4), S(  -1, -15), S(  12, -15), S(   7, -14), S(  15, -10), S( -10,  -3), S( -34,   0),
                S( -16, -20), S( -17, -12), S(  -3, -12), S(   5, -12), S(  13,   1), S(  18, -11), S(  22, -13), S( -14, -10),
                S( -14,  -8), S( -20,  -7), S( -18,  10), S(  -5,  -6), S( -11,  19), S(  30, -12), S(  23,  -9), S(  -9,  -7),
                S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55), S( -31, -55)
        },
        {
                S(-250, -57), S(-154, -20), S(-101,  14), S( -16, -16), S(  55, -17), S(-172,   6), S( -52, -59), S(-159,-108),
                S( -50, -20), S( -60,   8), S(  12,  -2), S(  12,  32), S(  10,  19), S(  23,  -6), S( -49,  -6), S( -35, -34),
                S( -39, -18), S(  16,   7), S(  47,  29), S(  74,  35), S(  88,  16), S( 111,  15), S(  51,  -1), S(  36, -44),
                S(  18,  -4), S(  35,  32), S(  47,  44), S(  70,  53), S(  52,  58), S(  66,  47), S(  39,  28), S(  38,   2),
                S(   0,   9), S(  18,  14), S(  38,  42), S(  44,  53), S(  48,  45), S(  40,  42), S(  50,  21), S(   3,   6),
                S( -10, -42), S(   8,   1), S(  24,   8), S(  29,  28), S(  41,  20), S(  30,  -2), S(  24, -11), S(  -7,  -4),
                S( -32, -36), S( -16,  -6), S(   5, -17), S(  19,  15), S(  14,  23), S(  17, -17), S(   3, -14), S(   6, -39),
                S( -88, -40), S(  -9, -31), S(  -9, -10), S(  -8,   4), S(  11, -13), S(   5,  -7), S( -15, -17), S( -48, -59)
        },
        {
                S( -55,  -2), S(  -6,  -1), S(-116,  16), S( -87,  14), S( -98,  22), S(-108,  12), S(  -6,  -2), S(  34, -20),
                S( -42,  12), S( -12,   8), S( -15,  14), S( -41,  12), S( -28,  19), S( -14,  12), S( -30,   8), S( -63,   7),
                S(   9,   0), S(  17,  10), S(  40,   3), S(  11,  11), S(  16,   6), S(  29,  22), S(  27,  19), S(  13,  14),
                S( -18,   3), S(   8,  20), S(  -5,  23), S(  41,  14), S(  21,  17), S(  10,  13), S(  -4,  29), S(  -7,  17),
                S(  -7,  -6), S(   2,   6), S(  10,  11), S(  25,  14), S(  36,   1), S(  -2,  15), S(  10,  -1), S(  13, -15),
                S(  -5, -18), S(  19,  -6), S(  18,  -1), S(  14,   0), S(  15,  17), S(  30,  -4), S(  29,  -8), S(  23, -20),
                S(   5, -32), S(  22, -37), S(  26, -22), S(  12, -10), S(  22, -11), S(  24, -24), S(  50,  -7), S(  22, -41),
                S(  28, -64), S(  15, -31), S(   2,   8), S(  14, -12), S(   2, -10), S(   1,   3), S(   0,  -2), S(   8, -46)
        },
        {
                S(  12,  15), S(  16,  16), S( -23,  26), S( -31,  30), S(   3,  18), S( -16,  22), S( -40,  26), S(  61,   6),
                S(   7,  12), S(  -7,  19), S(  21,  11), S(  29,  12), S(  15,   9), S(  36,  -2), S( -11,  17), S(  25,   3),
                S( -12,   9), S(  18,   0), S(  29,  -3), S(  28,  -4), S(  26,  -7), S(  52,  -5), S(  76, -15), S(  32, -17),
                S(  -7,   6), S(   3,  -1), S(  19,   5), S(  32,  -5), S(  10,   3), S(  28,  -1), S( -10,   3), S(  -1,   2),
                S( -31,   9), S( -27,  13), S( -19,   9), S( -10,   9), S( -16,   6), S(  -5,  -5), S(   5,  -5), S( -18,  -5),
                S( -31,  -8), S( -16,  -5), S( -21,  -4), S( -12,  -3), S( -17,   1), S(  -6, -13), S(   6,  -8), S( -24, -14),
                S( -37,  -9), S( -13, -14), S( -21,  -2), S(  -9, -10), S(  -6, -11), S(  -2, -18), S(   2, -22), S( -76,   3),
                S(  -1,  -9), S(  -4,  -9), S(  -1,  -9), S(   7, -20), S(   2, -19), S(   3,  -7), S( -16,  -7), S(  -5, -27)
        },
        {
                S( -51,   1), S( -54,  47), S( -21,  23), S( -18,  -8), S(   1,  11), S( -15,  29), S(  41, -16), S(   4,   4),
                S( -10,   4), S( -56,  36), S( -42,  43), S( -74,  50), S(-118,  82), S( -47,  47), S( -20,  24), S( -12,  21),
                S(  -2, -12), S( -11,  -2), S( -11,  -7), S( -63,  57), S( -59,  51), S(  14,  18), S(  20,   3), S( -25,  70),
                S(   4, -20), S(   0,  15), S( -19,  30), S( -34,  44), S( -41,  50), S( -27,  45), S( -20,  45), S( -13,  51),
                S(  18, -16), S(  21,  20), S(  12,  10), S(  -7,  56), S(  -2,  22), S(  -8,  29), S(  13,   6), S(   1,  -8),
                S(  22, -19), S(  46, -65), S(  24,   7), S(  18,  -6), S(  11,  -3), S(  13,   4), S(  28, -21), S(   9,  -8),
                S(  30, -42), S(  47, -64), S(  50, -74), S(  33, -23), S(  33, -38), S(  41, -79), S(  32, -71), S(   4, -33),
                S(  65, -63), S(  36, -54), S(  45, -53), S(  42,  28), S(  33, -51), S(  25, -75), S(  43, -79), S(   0, -71)
        },
        {
                S(-253, -43), S( 148, -43), S( 210, -36), S(  85, -29), S(-218,  27), S( -37,  45), S(  33,  18), S( -25,  -5),
                S(  98, -25), S( 139,  21), S( 137,  31), S(  97,  23), S(  48,  28), S( 160,  37), S(  51,  48), S(-165,  41),
                S(  61,  10), S( 162,  18), S( 185,  24), S(  67,  20), S( 144,   7), S( 226,  42), S( 238,  35), S(   5,  27),
                S( -22,  14), S(  57,  26), S( 130,  24), S(  82,  27), S(  47,  24), S( 152,  32), S( 104,  25), S( -85,  28),
                S( -76,  -4), S( 125, -18), S(  91,  15), S(  58,  22), S(  91,  16), S( 121,  22), S( 101,  10), S( -70,  10),
                S(-110,   5), S( -15,  10), S(  18,  17), S(  67,   7), S(  86,   2), S(  97,  16), S(  59,  10), S( -33,   3),
                S(-101,  -6), S( -79,   5), S( -54,  14), S( -70,  10), S( -32,   6), S( -20,  28), S(  -1,   7), S( -28, -11),
                S(-107, -82), S( -65, -39), S( -91, -10), S(-110, -18), S( -29, -54), S( -98,  12), S( -21, -16), S( -47, -61)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S(   1,  10), S(  -8,  17), S(  -8,  41), S(  10,  64), S(  43, 131), S(  82, 166), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   3,  22), S(  -3,  43), S(  32,  88), S(  90, 186), S( 352, 174), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  41,  28), S( -11,  31), S(  77,  62), S( 153, 131), S( 203, 200), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  28, -50), S(  -5,  -2), S(  -7, -24), S( -21, -67), S( -25, -97), S( 123,-216)},
        {S(   0,   0), S(   0,   0), S(  -5, -33), S(  -7, -45), S(  -5, -43), S(   4, -67), S( -21,-130), S(  57,-259)},
        {S(   0,   0), S(   0,   0), S(  21, -21), S( -17,  27), S(  -3,   4), S(  15,  -5), S( -11, -41), S(  -4,-120)},
        {S(   0,   0), S(   0,   0), S(  16, -30), S( -66,  65), S(  13, -47), S(  -3,   5), S(  15, -41), S(  31, 124)},
        {S(   0,   0), S(   0,   0), S(  18,  21), S(  33,  16), S( -83,  10), S( -52, -19), S(-124, -85), S(  19,-180)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   4, -21), S( -20, -11), S(  -8,  -8), S(   5, -21), S(  32,-108)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  12, -17), S(  -1,  -9), S( -16,  -2), S(  -5, -31), S(  25, -66)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  20, -24), S(  32, -24), S(  -9,  18), S(   4,   7), S(  31, -54)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  20,  -8), S(  -6,  -3), S(   1, -17), S(  17, -22), S(   8, 100)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 133,  -9), S(  22,  -1), S( -81,   9), S( -32, -20), S(  10, -90)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S( -11,  -5), S(  -7,  -4), S(  12,  11), S(  37,  73), S(  28, 167), S(  77, 408), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S( -13, -15);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  29,  68);

constexpr SCORE_TYPE TEMPO_BONUS = S(  26,  23);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(   7,   1), S(   8,   5), S(   7,   3), S(   4,   0), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  20,   1), S(  -1,  28), S( -21,   9)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  41,  -2), S( -10,  31), S( -53,   0)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(  12, -19), S(  76,  37), S(  74,  80), S( 110,   0), S(  76,  42), S( 239,  59)},
        {S( -11,  16), S(   0,   0), S(  32,  47), S(  62,  22), S(  49,  14), S( 130,  18)},
        {S(   1,  15), S(  33,  43), S( -22,-178), S(  46,  35), S(  55,  56), S(  78,  77)},
        {S( -13,  24), S(  -2,  27), S(   3,  35), S( -21,  22), S(  45,  51), S( 123,  34)},
        {S(  -5,  15), S(   3,   3), S(  -2,  38), S( -13,  33), S(  -4,  -9), S(  70, 114)},
        {S(  16,  43), S(   3,  21), S( -27,  38), S(   0,  26), S(-222,  44), S(   0,   0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(  41,  -8), S(  32, -15), S(  42,  -7), S(  40,  -9), S(  37,   2), S(   0,   0)},
        {S(  22,  -7), S(  23,  -1), S(  24,  -2), S(  15,  -1), S(  20,  10), S(   0,   0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(  52,   2), S(  29,  -5), S(   6,  -7), S( -12,  -5), S( -31,  -3), S( -41,  -1), S( -52,   2), S( -55,   2), S( -62,   6), S( -67,   4), S( -63,   4), S( -55,   2), S( -57,   4), S( -57,   3), S( -48,   3), S( -49,   4), S( -33,   1), S( -28,   4), S( -32,   4), S(  15, -19), S( -17,   1), S(   6, -10), S(  71, -20), S(  39, -15), S( 105, -37), S(  67,   1), S( 240,-104), S( -13,  63), S(  89,  27), S( 118, -99), S( 337, -73), S( 152, 145), S( 104, 123), S( 120, 181), S( 182, 143), S( -54, -82), S(  -6,  -3), S( 272, 369), S(   2,   3), S( -61,-113)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(  24, -20), S(  37, -10), S(  39, -12), S(   0,   0), S(   0,   0), S(   4,   7), S(  19, -11), S(   5, -23)},
        {S(  27,  -9), S(  35,  -5), S(   2,   8), S(   0,   0), S(   0,   0), S( -12,   0), S(   3,  -3), S(   9,  -4)},
        {S(  22,  10), S( -19,  17), S(   1,   8), S(   0,   0), S(   0,   0), S( -11,  -9), S(  -7,   1), S(   7,   0)},
        {S(   1,  42), S( -13,  46), S( -25,  44), S(   0,   0), S(   0,   0), S(  15,  -7), S( -34,  20), S(   4,  16)},
        {S( -19, -10), S( -27,  -8), S( -12,  -6), S(   0,   0), S(   0,   0), S( -20,  -2), S( -24,   5), S( -25,   7)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S( 139, 104), S(  41, 111), S(  95,   0), S(   0,   0), S(   0,   0), S(  10,  80), S(  21,  97), S(  86,  93)},
        {S(  -6,  48), S( -59,  60), S(-103,  49), S(   0,   0), S(   0,   0), S( -64,  24), S( -75,  59), S( -40,  64)},
        {S(   0,  20), S(  25,   7), S(  -5,  15), S(   0,   0), S(   0,   0), S(   4,   3), S(  22,   0), S(  -3,   6)},
        {S(  -2, -12), S(  15,  -4), S(  13,   5), S(   0,   0), S(   0,   0), S(   0,   4), S(   2,   0), S(  -9,  -6)},
        {S(   0, -19), S(  27, -23), S(  21,   1), S(   0,   0), S(   0,   0), S(   3, -14), S(  17, -11), S(   0, -15)},
        {S(  -6,  -7), S(  -6,   1), S(  17,   7), S(   0,   0), S(   0,   0), S(   1,  -3), S(  -7,  -4), S(   0, -15)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(   0,   0), S(  -2,  -2), S(   1,   1), S(  -4,   2), S(  -8,   4), S(   0,   0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S( -20, -26);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S( -12,  63);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY = S( -13,   3);





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
