//
// Created by Alexander Tian on 6/26/23.
//

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};


constexpr SCORE_TYPE PIECE_VALUES[6] = {S( 118, 150), S( 415, 447), S( 439, 458), S( 582, 819), S(1325,1504), S(   0,   0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57),
                S(  95, 145), S( 112, 131), S(  31, 128), S(  88,  66), S(  39,  89), S( 148,  78), S( -13, 148), S( -38, 163),
                S( -18,  60), S(   6,  44), S(  30,  12), S(  33, -23), S(  56, -28), S(  90,  -9), S(  30,  21), S(   4,  38),
                S( -22,  27), S(   0,   5), S(  -8,  -2), S(  16, -34), S(  18, -22), S(  29, -18), S(   6,  -2), S( -23,  12),
                S( -27,  13), S( -20,   2), S( -13, -11), S(  -1, -17), S(   0, -15), S(  12, -20), S(  -2, -14), S( -23,  -7),
                S( -27,   0), S( -16,  -7), S( -17,  -8), S(  -7, -12), S(   2,   2), S(   6,  -8), S(  21, -21), S(  -9, -11),
                S( -31,  12), S( -15,   0), S( -28,  13), S( -23,   1), S( -25,  21), S(  19,   2), S(  26, -17), S( -22, -16),
                S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57), S( -31, -57)
        },
        {
                S(-212, -74), S(-120, -28), S( -89,  13), S(  -6, -18), S( 110, -28), S(-143,  -3), S( -15, -73), S(-139,-122),
                S( -13, -33), S( -42,   6), S(  70,  -8), S(  45,  29), S(  48,  15), S(  82, -17), S(   3, -16), S(  15, -46),
                S( -45, -17), S(  24,  11), S(  35,  45), S(  67,  50), S( 103,  22), S( 129,  23), S(  81,  -4), S(  65, -46),
                S(  13,  -6), S(  12,  39), S(  22,  61), S(  56,  63), S(  31,  67), S(  53,  61), S(  28,  41), S(  49,   1),
                S(  -7,   2), S(  -9,  22), S(   4,  57), S(  14,  67), S(  25,  58), S(  25,  60), S(  52,  28), S(  13,   3),
                S( -23, -53), S( -23,   8), S( -14,  20), S(  -8,  45), S(   5,  37), S(  -7,  16), S(  14,  -5), S( -12, -11),
                S( -38, -48), S( -32, -13), S( -20, -13), S(  -8,  18), S(  -9,  26), S(  -5, -15), S(  -2, -18), S(  10, -53),
                S(-122, -49), S( -15, -44), S( -36, -13), S( -24,  -1), S(  -2, -19), S( -11, -14), S( -11, -29), S( -44, -77)
        },
        {
                S( -59,  -8), S( -17,  -2), S(-152,  22), S(-100,  16), S( -92,  20), S(-102,   8), S( -48,   3), S(   7, -19),
                S( -33,   3), S(   2,   3), S( -14,  15), S( -27,  11), S(   8,  10), S(  38,   1), S(   7,  -1), S( -37,  -5),
                S( -21,   6), S(  16,  10), S(  47,   6), S(  23,  11), S(  44,   4), S(  45,  19), S(  42,  14), S(   1,  14),
                S( -28,   0), S(  11,  20), S(   8,  24), S(  61,  20), S(  37,  23), S(  36,  10), S(  11,  24), S(  -8,  14),
                S(  -8, -10), S(   3,   8), S(   7,  21), S(  34,  25), S(  43,  10), S(  -1,  19), S(   3,   2), S(  29, -26),
                S(   0, -22), S(  19,   1), S(  12,   8), S(   9,   8), S(  15,  20), S(  20,   2), S(  26,  -9), S(  23, -25),
                S(   4, -31), S(  16, -30), S(  24, -18), S(  -3,  -5), S(  -2,  -5), S(   7, -26), S(  25,  -6), S(   7, -45),
                S(  27, -60), S(  18, -28), S(   5,   1), S(  -9,  -7), S( -15,  -9), S( -13,  -4), S( -20,  -8), S(  -8, -46)
        },
        {
                S(  31,   9), S(  29,  12), S(   9,  14), S(  13,  16), S(  63,   2), S(  51,   3), S(  15,  12), S( 109,  -5),
                S(   0,  17), S( -10,  25), S(  28,  14), S(  42,  14), S(  48,   5), S(  99, -15), S(  34,   7), S(  54,  -1),
                S( -34,  19), S(   4,  10), S(  15,   9), S(  25,   6), S(  37,  -1), S(  88,  -7), S( 116, -19), S(  57, -17),
                S( -30,  15), S( -19,  10), S(   0,  16), S(  17,   6), S(   1,  13), S(  32,   5), S(   1,   7), S(   1,   6),
                S( -53,  12), S( -52,  19), S( -40,  15), S( -31,  15), S( -29,  11), S(  -4,  -3), S(  12,  -5), S( -11,  -9),
                S( -58,  -5), S( -43,  -2), S( -51,   1), S( -41,   2), S( -35,   3), S( -13, -13), S(  13, -15), S( -24, -21),
                S( -65,  -9), S( -38, -13), S( -48,   1), S( -39,  -4), S( -28,  -9), S(   4, -25), S(   9, -31), S( -79,  -4),
                S( -37,  -7), S( -36,  -6), S( -30,  -7), S( -19, -16), S( -22, -16), S(  -3, -17), S( -22, -11), S( -14, -34)
        },
        {
                S( -16, -30), S( -48,  50), S(   8,  32), S(  29,  13), S(  93,  12), S(  98,  11), S( 103, -15), S(  75,  -3),
                S( -14, -24), S( -67,  25), S( -40,  45), S( -46,  60), S( -39,  84), S(  54,  53), S(  28,  45), S(  49,  27),
                S( -27, -27), S( -24, -11), S(  -7,  -6), S( -35,  74), S(  -1,  82), S( 103,  39), S( 111,  28), S(  46,  81),
                S( -24, -44), S( -28,   6), S( -37,  31), S( -38,  59), S( -30,  92), S(   1,  86), S(  10,  90), S(   7, 101),
                S( -14, -51), S( -18,  10), S( -18,   1), S( -34,  59), S( -20,  41), S( -10,  52), S(  12,  34), S(   8,  22),
                S( -21, -40), S(   6, -87), S( -18,  -3), S( -17, -18), S( -17,   0), S( -10,   7), S(  17, -18), S(   0,  -8),
                S( -21, -69), S(  -4, -76), S(   6, -90), S( -14, -32), S(  -6, -49), S(   3, -84), S(   3, -87), S( -21, -40),
                S(  -7, -69), S( -13, -69), S(  -1, -76), S(  -3,   3), S(  -8, -61), S( -19, -83), S(   3, -92), S( -38, -94)
        },
        {
                S( -97, -98), S( 275, -90), S( 210, -57), S( 163, -57), S(-160,   4), S( -66,  30), S(  85, -11), S(   8, -34),
                S( 228, -65), S( 111,  20), S( 106,  22), S( 108,  10), S(  92,  20), S(  88,  37), S( -47,  59), S(-140,  27),
                S(  52,  18), S( 121,  30), S(  95,  40), S(  21,  36), S(  84,  26), S( 129,  59), S( 148,  50), S( -27,  23),
                S(  -1,   6), S(   7,  46), S(  14,  55), S( -15,  65), S( -66,  68), S(  -8,  61), S(  -3,  51), S( -95,  25),
                S( -56, -14), S(  70,  -1), S( -27,  47), S( -82,  69), S( -72,  70), S( -74,  55), S( -48,  32), S(-100,   4),
                S( -35, -17), S( -49,  17), S( -79,  40), S( -84,  53), S( -69,  51), S( -75,  39), S( -29,  11), S( -41, -12),
                S(  11, -34), S(  -5, -11), S( -41,  19), S(-118,  38), S( -87,  34), S( -67,  25), S(  12, -14), S(  25, -43),
                S(  20,-110), S(  52, -62), S(  27, -35), S( -87,  -4), S( -18, -33), S( -65,  -7), S(  38, -47), S(  34, -96)
        }
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(   0,   0), S(  -9,  25), S( -23,  38), S( -20,  67), S(  -5, 103), S(  11, 193), S(  64, 196), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   3,  30), S(  -2,  54), S(  23, 109), S(  66, 221), S( 382, 158), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  55,  30), S( -17,  43), S(  62,  76), S( 143, 157), S( 182, 144), S(   0,   0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(  20, -41), S( -21,   6), S(  -6, -26), S( -20, -71), S( -15,-110), S( 191,-226)},
        {S(   0,   0), S(   0,   0), S( -13, -23), S( -10, -43), S(  -8, -42), S(   3, -68), S( -14,-134), S(  80,-260)},
        {S(   0,   0), S(   0,   0), S(   5, -13), S( -21,  29), S(  -3,   5), S(  12,  -4), S(   7, -51), S(   5,-120)},
        {S(   0,   0), S(   0,   0), S(  -8, -13), S( -54,  60), S(   9, -34), S(   0,   2), S(  16, -41), S(  69,  84)},
        {S(   0,   0), S(   0,   0), S(  54, -11), S(  52, -15), S( -70, -37), S( -13, -89), S( -41,-195), S(  -6,-311)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( -14, -15), S( -25,  -4), S(  -6, -11), S(   9, -29), S(  47,-113)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( -24,   5), S( -23,   4), S( -26,   0), S( -11, -32), S(  26, -75)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   6, -13), S(  27, -20), S(  -1,  17), S(   4,  11), S(  33, -53)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S(  15,   7), S( -10,   7), S(  -3, -13), S(  24, -42), S(  16,  87)},
        {S(   0,   0), S(   0,   0), S(   0,   0), S( 215,   0), S(  40,   6), S( -56,  -3), S(  19, -50), S(  72,-156)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(   0,   0), S(   2, -15), S(   2,  -7), S(  16,   7), S(  41,  67), S(  55, 148), S(  10, 415), S(   0,   0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(  -8, -47);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(  28,  78);

constexpr SCORE_TYPE TEMPO_BONUS = S(  15,  21);

constexpr SCORE_TYPE MOBILITY_VALUES[6] = {S(   0,   0), S(  11,  -2), S(   9,   3), S(   6,   2), S(   5,   1), S(   0,   0)};

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  11,  14), S(  -5,  31), S( -35,  11)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(   0,   0), S(   0,   0), S(   0,   0), S(  46,  -1), S(  -8,  28), S( -66,   0)};

constexpr SCORE_TYPE PIECE_SUPPORT[6][6] = {
        {S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)},
        {S(   5,  -4), S(  11,   0), S(   9,  -2), S(  12,  -5), S(  16, -22), S(  12,  -1)},
        {S(  -5,  -8), S(   8,  -6), S(   6, -15), S(  11,   1), S(  11,   0), S(  -8,  -5)},
        {S(   1,  -5), S(  10, -13), S(   9,  -7), S(   9,   7), S(   7,  37), S(  15, -13)},
        {S(   2,  -3), S(  11, -14), S(  11, -27), S(  11, -17), S( -29,-463), S(   3, -24)},
        {S(  13,   1), S(   6,   2), S(  18,   6), S( -18,   4), S(  14,   2), S(   0,   0)}
};

#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
