

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];



constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   -66,    35), S(    -3,    51), S(    14,    21), S(  -144,   186), S(   356,   158), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
	{
		S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
		S(   408,  -245), S(    67,   -48), S(  -197,   130), S(    38,     4), S(   332,   -46), S(   567,   -46), S(  -879,   -12), S(  -163,  -320),
		S(   508,   -13), S(  -622,   -87), S(  -377,   844), S(   127,  -238), S(  -170,  -217), S(    57,  -150), S( -1441,    68), S(   130,  -152),
		S(    61,    47), S(   -19,    85), S(   -18,    83), S(    23,    52), S(    31,   -27), S(    99,    98), S(    -7,    72), S(   101,    14),
		S(    26,     2), S(    24,   -38), S(    66,    17), S(    36,   -57), S(   136,    -4), S(    92,   -38), S(    59,    64), S(    62,   -23),
		S(    54,     7), S(    31,   -19), S(    20,    41), S(    19,   -35), S(    65,    38), S(   127,    38), S(    48,    -3), S(    23,    68),
		S(    60,   -26), S(   -24,     6), S(   115,   101), S(    15,   -21), S(    80,   -10), S(    76,    14), S(   129,   -69), S(     1,    48),
		S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
	},
	{
		S(  -327,    80), S(    -6,   -33), S(   440,   363), S(   402,  -545), S(    -6,   -33), S(    -6,   -33), S(    -6,   -33), S(  -152,   -67),
		S(    -6,   -33), S(    51,    71), S(   -14,   -85), S(  1060,  -134), S(    -6,   -33), S(   167,   -79), S(    -6,   -33), S(   141,   139),
		S(  -171,  -228), S(   148,   212), S(  -895,   285), S(   260,   -92), S(   -88,  -145), S(   481,   220), S(   599,  -307), S(    -6,   -33),
		S(  -359,   143), S(   -75,   -42), S(  -167,   -21), S(  -188,   -39), S(   165,   -92), S(   -60,  -109), S(   -26,   -61), S(   139,   400),
		S(   -59,   -38), S(  -340,  -119), S(    98,  -112), S(   -73,   -61), S(   115,   -58), S(   -52,    24), S(   122,   364), S(  -871,    25),
		S(  -130,   -33), S(  -104,   -20), S(   -69,   -45), S(    56,   -77), S(  -301,    84), S(    32,   -96), S(  -227,   153), S(    75,   -38),
		S(  -285,   384), S(   140,    61), S(    10,  -122), S(    64,   -64), S(    38,   -48), S(   149,    37), S(    -6,   -33), S(   225,   182),
		S(   -31,   -61), S(   -37,   -42), S(   -24,   -45), S(  -156,   339), S(   -18,   -45), S(  -135,    25), S(    45,   -53), S(   268,   -75)
	},
	{
		S(   236,   -80), S(  -359,   217), S(   580,  -197), S(  -194,   -14), S(    19,     5), S(    72,   -45), S(   315,    -9), S(   113,   -31),
		S(   136,   -33), S(    19,     5), S(   120,  -188), S(   290,    58), S(  -755,   396), S(    19,     5), S(  -166,    45), S(    30,    72),
		S(  -111,    78), S(   191,   -43), S(   159,   -42), S(   157,   -77), S(    91,   -10), S(  -514,   143), S(  -942,   131), S(    59,     0),
		S(    -5,   436), S(    -3,   194), S(    21,  -116), S(  -374,  -651), S(     4,     5), S(  -153,   210), S(    96,   -78), S(    12,    89),
		S(    95,  -347), S(  -120,   319), S(    88,  -107), S(   -70,   -24), S(  -668,  -446), S(   -85,     7), S(    79,    44), S(    16,   -26),
		S(    91,   -28), S(  -839,   349), S(   324,   -55), S(   -12,   -11), S(   106,   -35), S(  -212,   309), S(    17,   -35), S(   229,   -79),
		S(    60,    61), S(   127,    -1), S(  -196,   204), S(   119,    31), S(   163,   -83), S(    82,   -14), S(   263,   -99), S(    22,    13),
		S(    19,     5), S(    39,    27), S(    81,    18), S(   439,  -414), S(   184,   -18), S(    82,   -44), S(   293,     2), S(    19,     5)
	},
	{
		S(   -13,   -50), S(   242,   -91), S(  -120,   -42), S(   657,   722), S(    37,   -84), S(    48,   -59), S(   -18,  -120), S(  -216,    25),
		S(    43,   126), S(    55,   106), S(    31,  -112), S(  1835,  -161), S(  -536,    44), S(  -725,   317), S(  -404,    48), S(    16,   109),
		S(    18,  -164), S(   103,   -60), S(   371,   -65), S(  -587,   455), S(  -162,   323), S(  -148,  -306), S(  -302,   232), S(   588,  -224),
		S(  -223,   104), S(   -56,    96), S(   367,  -737), S(  -188,   -96), S(    51,  -180), S(    46,  -155), S(   133,   188), S(     8,   -45),
		S(    71,   -37), S(   -71,   -50), S(  -444,    74), S(  -426,   361), S(  1128,  -509), S(  -606,   473), S(  -406,    54), S(    33,   -49),
		S(  -104,   119), S(  -166,   221), S(    32,   -61), S(  -139,    89), S(   126,   -14), S(  -165,   127), S(    44,   -35), S(   -44,     8),
		S(   -35,   -30), S(   -60,   -38), S(     4,   -78), S(   202,  -146), S(   130,  -163), S(  -204,    47), S(    76,   -88), S(   -25,   -21),
		S(    34,   -42), S(  -109,     3), S(  -264,    37), S(   142,  -110), S(   196,  -153), S(   -60,   -19), S(   125,   -85), S(    37,   -29)
	},
	{
		S(   140,   -19), S(  -700,   605), S(   201,   -15), S(  -373,   162), S(   600,  -121), S(  -280,   351), S(   -54,   205), S(   -71,   491),
		S(    77,   274), S(   589,   141), S(  -128,  -127), S(  -354,   112), S(  -396,   156), S(  -326,   366), S(  -238,   353), S(   133,  -285),
		S(    79,    39), S(  -337,   167), S(  -176,   -30), S(  -172,    14), S(   -24,   111), S(   319,    40), S(  -114,    91), S(  1672, -1093),
		S(  -112,   -81), S(   -21,    -3), S(  -147,   415), S(    95,  -362), S(  -414,   745), S(  -288,    39), S(  -591,   431), S(   173,  -239),
		S(   200,   -56), S(   164,   210), S(   699,  -266), S(   245,  -464), S(    80,  -185), S(  -500,   234), S(  -172,   -50), S(  -318,   196),
		S(    17,    52), S(   409,   137), S(   -11,   243), S(   -51,  -106), S(  -151,  -375), S(   133,  -232), S(   -17,   -10), S(   -17,   -10),
		S(   -17,   -10), S(   -17,   -10), S(    94,  -532), S(    17,    16), S(   257,  -540), S(   278, -1000), S(  -751,    -2), S(   339,  -515),
		S(   480,    11), S(  -224,  -101), S(   146,    18), S(   110,  -131), S(  -103,   222), S(    57,   -41), S(   218,  -317), S(  -353,   681)
	},
	{
		S(  -303,    20), S(  -323,   -14), S(     0,   -15), S(     0,   -35), S(     0,     0), S(  -270,    21), S(  -567,    42), S( -1448,    34),
		S(  -840,    11), S(  -408,   -17), S(   380,   -30), S(     0,   -25), S(   356,   -12), S(   -60,    34), S(  -560,    48), S( -1255,    17),
		S(   281,     4), S(   555,    -4), S(   504,   -24), S(   291,   -30), S(   149,   -10), S(  -141,    11), S(  -171,     6), S(   119,     3),
		S(    89,    35), S(   308,    12), S(    86,    18), S(    69,    15), S(   167,    -4), S(   201,     3), S(   256,     2), S(   349,     0),
		S(   -62,    28), S(    12,   -10), S(   101,     1), S(   141,   -13), S(    53,     9), S(   192,     9), S(   368,     2), S(   271,     1),
		S(  -200,    -1), S(    18,    -7), S(    -9,    20), S(   -20,    11), S(    -8,    -5), S(   183,    -9), S(   143,    -2), S(   158,    -3),
		S(    -8,     4), S(    22,    -9), S(    -3,   -16), S(    37,    -9), S(   -38,     3), S(   142,   -10), S(    33,     4), S(    29,     2),
		S(  -241,    18), S(   -23,    -5), S(    13,   -20), S(   -13,    -7), S(   -35,    -5), S(   118,     7), S(    77,   -12), S(    12,     3)
	}
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
	{S(   -43,   -42), S(    11,   -67), S(   -15,    -6), S(    12,    -6), S(    34,   -13), S(   -11,    11), S(   -17,    50), S(    22,    42), S(     7,    31), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(   -30,   -38), S(   -72,   -12), S(   -49,   -47), S(   -68,   -58), S(   -87,   -45), S(   -61,   -33), S(   -87,   -12), S(   -69,   -32), S(   -20,   -32), S(    23,   -25), S(   207,  -120), S(   136,   -46), S(   211,   508), S(   -33,    -9), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(     1,   -68), S(    74,   -37), S(    95,   -25), S(    65,    -9), S(    33,     3), S(    66,   -27), S(    61,   -21), S(    58,   -20), S(    40,   -16), S(    24,    -2), S(  -137,    69), S(   -17,    28), S(  -119,    38), S(  -106,    25), S(  -141,    62), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(    52,   -88), S(    24,   189), S(    44,  -213), S(    44,   -67), S(    50,   -54), S(    60,   -18), S(    77,   -30), S(   169,  -105), S(   114,   -85), S(    90,   -49), S(    84,   -30), S(   104,  -120), S(   118,   -90), S(    44,   -79), S(   -63,    54), S(  -158,    90), S(   -20,   -40), S(  -109,    63), S(   -60,   -89), S(   -54,   -14), S(     7,    27), S(  -334,    74), S(  -584,    97), S(  -698,   154), S(   376,   108), S(    24,    75), S(   -61,   -48), S(   659,   287)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
	{S(     0,     0), S(   126,     2), S(  -207,    22), S(     5,   -65), S(  -149,   -38), S(  -530,   288), S(  -141,  -228), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(  -272,    10), S(   -13,   -49), S(    56,    18), S(  1607,    75), S(   -37,  -228), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(  -331,   194), S(     0,     0), S(   230,   372), S(     4,    58), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
	{S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(   -40,  -138), S(   658,  -488), S(     0,     0), S(  -447,   400), S(     9,  -215), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(  1010,   -25), S(  -658,    27), S(   227,    -9), S(     0,     0), S(   -34,   -42)},
	{S(     0,     0), S(     0,     0), S(    54,   310), S(  -230,   725), S(   231,   836), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(  -437,  -305), S(  -349,   -93), S(   280,    70), S(     0,     0), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(    -7,   -46), S(  -239,   -17), S(  -256,    93), S(    40,    -5), S(   141,   -28), S(   -92,    27)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
	{S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(  -358,  -358), S(    26,   -14), S(   136,  -142), S(   211,  -104), S(    96,   120)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(  -610,  -609), S(  -178,   246), S(   118,   -39), S(  -676,   211), S(   434, -1266)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(   305,   429), S(     0,     0), S(    -7,   -71), S(  -298,    45)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(   119,  -221), S(    21,   -19), S(     0,     0), S(     0,     0), S(  -441,   -76)},
	{S(     0,     0), S(     0,     0), S(     0,     0), S(    43,   157), S(   226,   -32), S(    14,    11), S(     1,    -6), S(   -70,   -15)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(     0,    -3), S(    21,   -10), S(   -57,    88), S(   187,    69), S(    -3,   -16), S(     0,     0), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(     0,     1);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    76,   -60);

constexpr SCORE_TYPE TEMPO_BONUS = S(     1,    -1);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    57,   -56), S(   -14,   -14), S(    30,   -10)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    52,   -23), S(   224,  -183), S(    -7,    -5)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
	{S(    27,   -96), S(    83,   -32), S(    97,     1), S(  -127,   139), S(   200,  -132), S(     0,     0)},
	{S(    15,    44), S(     0,     0), S(   -50,    95), S(  -280,    91), S(   136,   -25), S(     0,     0)},
	{S(    36,    76), S(    39,   -92), S(     0,     0), S(   157,  -159), S(    72,   138), S(     0,     0)},
	{S(   -15,    -7), S(    25,   -51), S(   -56,    67), S(     0,     0), S(  -567,   418), S(     0,     0)},
	{S(   -28,   -36), S(   -11,  -169), S(    12,   -95), S(    -4,  -108), S(   184,  -393), S(  -558,   179)},
	{S(   -75,    13), S(    16,    -6), S(    -5,    19), S(    72,    20), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
	{S(    22,    11), S(    37,    -4), S(    20,     6), S(    18,    16), S(   -18,    33), S(     0,     0)},
	{S(    15,     1), S(    28,    -8), S(     3,     9), S(    15,     6), S(    18,     7), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    25,     9), S(    18,    14), S(     9,     5), S(   -18,    12), S(   -14,    -3), S(     5,   -16), S(   -63,    -6), S(    -5,   -20), S(   -39,   -23), S(   -38,   -25), S(   -29,   -51), S(   -43,   -44), S(   -39,   -60), S(   -93,   -53), S(  -142,   -23), S(   -41,   -45), S(  -118,   -53), S(  -107,   -92), S(   -87,   -90), S(     1,  -114), S(    72,  -162), S(   -42,    19), S(   253,  -168), S(   -86,   146), S(   157,   275), S(   -40,   573), S(   209,   330), S(   204,   337), S(   204,   195), S(   216,   211), S(   289,   210), S(    43,    43), S(   -92,   -72), S(  -105,   -91), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(    15,    15)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
	{S(   -69,    14), S(   131,  -147), S(   108,   -46), S(     0,     0), S(     0,     0), S(   -30,    -5), S(    17,   -48), S(   -32,    63)},
	{S(    72,   -43), S(   -46,    -2), S(   -50,    18), S(     0,     0), S(     0,     0), S(  -143,    48), S(    48,     4), S(    31,   -46)},
	{S(   -31,   -15), S(   -51,    20), S(   -21,    32), S(     0,     0), S(     0,     0), S(   -91,    46), S(     1,   -19), S(    46,   -13)},
	{S(   191,     6), S(   -88,    55), S(  -165,    -2), S(     0,     0), S(     0,     0), S(   104,   -38), S(  -213,    32), S(  -101,    21)},
	{S(   -17,     9), S(    10,    14), S(    62,    -6), S(     0,     0), S(     0,     0), S(    26,    -1), S(   -53,     8), S(   -76,     6)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
	{S(     0,   -73), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     6,    60), S(     0,     0)},
	{S(   108,   -20), S(  -102,  -262), S(   216,  1060), S(     0,     0), S(     0,     0), S(  -211,   134), S(   641,   -17), S(   354,    28)},
	{S(  -117,    51), S(     3,    27), S(  -124,   -22), S(     0,     0), S(     0,     0), S(   -74,    57), S(  -448,    52), S(   -87,    39)},
	{S(    85,   -16), S(   -85,    16), S(   140,   -27), S(     0,     0), S(     0,     0), S(   -47,     6), S(   -35,    43), S(   -26,    -4)},
	{S(    -2,    21), S(    29,   -14), S(     7,   -27), S(     0,     0), S(     0,     0), S(  -108,    32), S(    -1,   -34), S(   -83,    12)},
	{S(   -34,    -3), S(    -2,    11), S(   -16,   -13), S(     0,     0), S(     0,     0), S(    98,   -15), S(   -90,   -21), S(    17,     7)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(     8,    -2), S(    -4,     3), S(    -7,    -3), S(   -49,    15), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(     6,     2), S(    -6,     7), S(    25,   -15), S(     9,   -21), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(    33,   -44);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(   -12,     9);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(    30,   -14), S(   -59,   -36)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(   -22,    -1), S(    39,    -9), S(    40,   -11), S(     0,     0), S(   130,   -22), S(    35,    33), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    -1,    -4), S(    36,   -10), S(   -38,    22), S(    32,    -6), S(    79,   -15), S(  -132,    74), S(     0,     0)};



#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
