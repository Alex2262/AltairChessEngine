

#ifndef ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
#define ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H

#include "evaluation.h"
#include "types.h"

constexpr int GAME_PHASE_SCORES[6] = {0, 1, 1, 2, 4, 0};

constexpr int MVV_LVA_VALUES[6] = {  87, 390, 429, 561,1234,   0};

constexpr SCORE_TYPE CANONICAL_PIECE_VALUES[6] = {100, 310, 340, 500, 900, 0};

constexpr SCORE_TYPE MAX_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[BISHOP];
constexpr SCORE_TYPE MIN_MINOR_PIECE_VALUE = CANONICAL_PIECE_VALUES[KNIGHT];


constexpr SCORE_TYPE PIECE_VALUES[6] = {S(   118,    84), S(   401,   171), S(   401,   174), S(   598,   292), S(  1569,   288), S(     0,     0)};

constexpr SCORE_TYPE PIECE_SQUARE_TABLES[6][64] = {
        {
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0),
                S(    98,     8), S(    85,    38), S(   131,    38), S(    97,    30), S(   -22,    43), S(    -5,    50), S(     2,    98), S(   187,     0),
                S(    -5,    10), S(   -13,    14), S(     7,    13), S(    33,    -5), S(    27,   -12), S(    27,    -8), S(   -41,    19), S(   -11,     1),
                S(   -19,     2), S(   -19,    -4), S(   -15,   -13), S(    -2,   -21), S(     1,   -15), S(    11,   -22), S(   -13,   -17), S(   -29,   -14),
                S(   -30,     6), S(   -28,     0), S(   -20,   -19), S(     0,   -21), S(   -11,   -17), S(   -24,   -14), S(   -19,   -10), S(   -36,    -3),
                S(   -23,    -4), S(   -23,    -7), S(   -33,    -8), S(    -9,   -16), S(    -8,   -15), S(   -12,   -15), S(   -12,    -5), S(   -33,   -16),
                S(   -33,    -3), S(   -29,    -6), S(   -42,     0), S(   -20,   -16), S(   -24,    -6), S(    -1,   -16), S(    -4,   -11), S(   -38,   -11),
                S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)
        },
        {
                S(   -38,  -234), S(   -48,     7), S(   -29,    24), S(    15,    10), S(    62,   -17), S(   -15,    -8), S(   -31,    33), S(  -180,    59),
                S(     1,    24), S(    35,     7), S(    47,    -8), S(     1,     9), S(    64,     0), S(    49,     3), S(   -33,    22), S(    82,    -2),
                S(    31,   -12), S(    12,     1), S(    52,     4), S(    70,    13), S(    64,     9), S(    74,    14), S(    55,    -4), S(    -6,    15),
                S(    24,    -6), S(    11,    17), S(    21,    22), S(    37,    30), S(    20,    31), S(    24,    30), S(    17,    -5), S(    31,     6),
                S(   -14,     7), S(    15,    -1), S(     1,    30), S(    14,     8), S(     9,    26), S(    10,    16), S(    18,     5), S(   -19,    16),
                S(   -32,   -15), S(    -1,    -3), S(   -16,    19), S(    -4,     8), S(    -6,     6), S(   -10,    -6), S(   -16,   -12), S(   -19,    -8),
                S(   -43,    16), S(   -27,    -1), S(   -20,   -39), S(    -9,     5), S(   -16,    -2), S(     6,   -20), S(   -23,    -6), S(   -29,     4),
                S(   -53,   -93), S(   -28,     3), S(   -37,    -3), S(   -28,    -6), S(   -29,   -17), S(   -26,    -7), S(   -33,   -10), S(   -55,   -15)
        },
        {
                S(   -38,     2), S(    25,     4), S(    10,     2), S(   -40,    15), S(     9,     1), S(    50,     1), S(     6,     7), S(  -134,    27),
                S(     5,     8), S(    55,    -6), S(    -1,     9), S(    43,     0), S(    21,     6), S(    -6,     6), S(   -32,    12), S(    47,   -15),
                S(     7,    -4), S(    40,     3), S(    47,     2), S(    13,    -1), S(    46,    -4), S(    41,     9), S(    69,    -6), S(     7,     2),
                S(    -8,    19), S(    16,     1), S(    23,     5), S(    44,    -2), S(    10,     9), S(    17,     0), S(     5,    13), S(   -22,    10),
                S(    -9,    -1), S(     7,     7), S(     3,     3), S(    11,    10), S(    22,     0), S(    -7,    15), S(    14,     2), S(    -3,     4),
                S(   -13,    -9), S(     0,     1), S(     7,    -3), S(     0,    -2), S(    -8,    14), S(    11,    -3), S(     6,    -1), S(     5,    -1),
                S(     5,   -44), S(    -4,   -11), S(    -2,   -11), S(    -6,    -2), S(    -4,     0), S(    -4,    -5), S(    15,   -16), S(    -3,   -38),
                S(   -37,   -28), S(  -135,    13), S(   -30,    -4), S(   -30,   -11), S(    -8,   -13), S(   -29,    -6), S(  -141,    25), S(   -11,   -19)
        },
        {
                S(    42,     3), S(    -9,    23), S(    37,    11), S(    65,    -5), S(    31,    -2), S(   124,   -25), S(    37,    -5), S(    46,    -4),
                S(    29,    15), S(     2,    23), S(     5,    19), S(    38,     8), S(    37,     6), S(    69,    -4), S(    30,     1), S(    41,     8),
                S(     7,    13), S(    16,     8), S(    15,     6), S(    25,     0), S(    10,     3), S(    83,   -12), S(    90,   -14), S(    35,     7),
                S(   -11,     7), S(   -22,    18), S(     7,     6), S(   -21,    10), S(    12,    -6), S(    19,     6), S(   -23,     0), S(    -9,     3),
                S(   -24,     4), S(   -13,     3), S(   -48,    18), S(   -24,     2), S(   -52,    18), S(   -21,     6), S(   -37,    14), S(   -39,    25),
                S(   -26,     0), S(   -30,    10), S(   -23,     0), S(   -35,    13), S(   -30,    -2), S(   -13,    -9), S(   -25,     6), S(   -48,    22),
                S(   -33,   -16), S(   -35,   -14), S(   -16,   -20), S(   -22,   -13), S(   -16,   -22), S(   -30,   -11), S(    -6,   -37), S(   -87,    18),
                S(    -6,   -21), S(   -12,   -23), S(   -15,   -14), S(   -11,   -16), S(   -13,   -18), S(   -20,   -13), S(   -18,   -30), S(   -30,    -9)
        },
        {
                S(   -39,    30), S(    51,   -55), S(    14,    12), S(   -19,    36), S(   -12,    34), S(   125,   -39), S(    83,   -41), S(    38,   -19),
                S(   -24,    -4), S(   -64,    37), S(   -30,    42), S(   -54,    44), S(   -60,    62), S(    -8,    49), S(    36,   -13), S(    31,   -21),
                S(   -29,    13), S(   -47,    12), S(   -73,    61), S(   -60,    51), S(   -28,    31), S(     0,    20), S(    -4,    41), S(    15,    13),
                S(     2,   -16), S(   -30,    18), S(   -47,    65), S(   -41,    62), S(   -26,    40), S(   -52,    67), S(   -15,    50), S(   -20,    63),
                S(     5,    -9), S(    -2,    -1), S(   -15,    16), S(   -13,    42), S(   -14,    19), S(   -13,    25), S(   -11,    18), S(    -4,    27),
                S(     0,     7), S(     6,     7), S(     4,    17), S(     0,     7), S(    -9,    11), S(     3,    13), S(    12,   -22), S(    25,   -51),
                S(    14,   -31), S(    16,   -22), S(    22,   -29), S(    23,   -15), S(    26,   -35), S(    42,   -79), S(    28,   -67), S(    33,   -35),
                S(     7,   -42), S(    25,   -94), S(    18,   -59), S(    23,   -29), S(    41,   -68), S(    22,   -71), S(    26,   -81), S(    45,  -113)
        },
        {
                S(  -620,   251), S(    52,    47), S(    64,    -3), S(    73,    -1), S(    10,     6), S(   244,   -37), S(    33,  -275), S(   -63,  -288),
                S(   209,   -35), S(   179,   -32), S(   181,    -7), S(    46,    18), S(    29,    13), S(   151,     5), S(    40,     1), S(   -62,     6),
                S(   205,   -73), S(   201,   -40), S(    63,     4), S(   -13,    19), S(    42,    21), S(   110,    22), S(   103,    27), S(   -21,    36),
                S(    41,   -27), S(    63,   -12), S(    51,     2), S(    39,     4), S(     5,    12), S(   107,    14), S(   106,    18), S(    51,    14),
                S(    36,    -7), S(    33,     1), S(    66,    -1), S(    52,    -4), S(    75,    -4), S(   109,    12), S(    80,    18), S(   -39,    36),
                S(   -93,    21), S(    -8,    10), S(    53,    -4), S(    37,   -13), S(    39,    -8), S(    70,    16), S(    23,    27), S(   -59,    38),
                S(   -57,    10), S(   -15,     2), S(    -4,     3), S(   -34,     3), S(   -24,    -3), S(   -15,    34), S(    -4,    38), S(   -34,    31),
                S(  -159,    43), S(   -37,     9), S(   -62,    15), S(   -82,    -4), S(   -18,   -20), S(   -62,    36), S(   -20,    33), S(   -49,    29)
        }
};


constexpr SCORE_TYPE MOBILITY_VALUES[4][28] = {
        {S(   -35,   -81), S(   -15,   -32), S(    -9,    -3), S(    -6,    16), S(     0,    25), S(     7,    29), S(    15,    22), S(    20,    19), S(    23,     5), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -32,   -40), S(   -25,   -36), S(   -19,   -21), S(   -13,    -7), S(   -12,     7), S(   -10,    10), S(    -4,    15), S(    -4,    11), S(    -5,    14), S(     6,    13), S(     2,    16), S(     8,    11), S(    72,     5), S(    35,     2), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(   -39,   -50), S(   -33,   -16), S(   -32,   -10), S(   -28,     0), S(   -26,     8), S(   -23,    14), S(   -15,    13), S(    -9,    10), S(    -5,    17), S(     2,    15), S(     9,    14), S(    16,     9), S(    28,     6), S(    11,    12), S(   145,   -41), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(  -112,    54), S(  -129,  -134), S(  -129,   -95), S(  -130,   -34), S(  -128,    16), S(  -127,    45), S(  -126,    70), S(  -123,    71), S(  -121,    83), S(  -118,    80), S(  -119,    95), S(  -115,    93), S(  -117,   105), S(  -119,   112), S(  -117,   112), S(  -113,   118), S(  -115,   114), S(   -91,    91), S(   -89,    98), S(   -31,    53), S(    62,     2), S(   129,   -47), S(   125,   -40), S(   413,  -227), S(   241,  -126), S(   572,  -282), S(   298,  -185), S(   429,  -241)}
};


constexpr SCORE_TYPE PASSED_PAWN_BONUSES[3][8] = {
        {S(     0,     0), S(  -104,    65), S(   -79,    55), S(   -81,    50), S(   -51,    42), S(    46,    33), S(   141,    84), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(   -60,    55), S(   -84,    49), S(   -18,    54), S(   130,    54), S(   219,    57), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -121,    33), S(   -78,    34), S(     7,    58), S(   162,   109), S(   168,   176), S(     0,     0)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(  -113,    -7), S(    36,   -31), S(   -32,   -26), S(    14,   -30), S(   -65,   -27), S(  -305,    18)},
        {S(     0,     0), S(     0,     0), S(   -13,   -38), S(   -26,   -24), S(    43,   -47), S(     5,   -72), S(    -6,   -82), S(   -55,  -120)},
        {S(     0,     0), S(     0,     0), S(    41,   -13), S(    21,     0), S(    -9,    -3), S(    23,    22), S(   -50,    25), S(  -191,    58)},
        {S(     0,     0), S(     0,     0), S(    -8,   -60), S(  -103,   113), S(    12,   -87), S(    33,     6), S(    31,    46), S(   145,    22)},
        {S(     0,     0), S(     0,     0), S(    99,   -17), S(    91,   -50), S(   151,   -47), S(    48,   -30), S(   -58,   -17), S(   -74,   -92)}
};


constexpr SCORE_TYPE PASSED_PAWN_BLOCKERS_2[6][8] = {
        {S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0), S(     0,     0)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    53,   -10), S(    36,   -18), S(    49,   -16), S(   -41,    -8), S(   112,   -61)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    38,   -56), S(    39,   -22), S(   -10,   -26), S(   -27,    -2), S(   -64,     4)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(   114,   -51), S(   -38,     4), S(    26,    10), S(   -10,    29), S(   -36,    12)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    33,   -56), S(   -29,    14), S(    -2,   -47), S(    -8,    62), S(   -46,   187)},
        {S(     0,     0), S(     0,     0), S(     0,     0), S(    78,   -13), S(  -101,     3), S(   -15,   -30), S(   -10,   -23), S(   -20,   -45)}
};


constexpr SCORE_TYPE PHALANX_PAWN_BONUSES[8] = {S(     0,     0), S(    -2,    -7), S(    -2,    -4), S(    17,     7), S(    49,    46), S(   160,    45), S(   189,   131), S(     0,     0)};

constexpr SCORE_TYPE ISOLATED_PAWN_PENALTY = S(   -17,    -8);

constexpr SCORE_TYPE BISHOP_PAIR_BONUS = S(    28,    38);

constexpr SCORE_TYPE TEMPO_BONUS = S(    12,     4);

constexpr SCORE_TYPE SEMI_OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    22,    -1), S(    11,     4), S(    -9,     3)};

constexpr SCORE_TYPE OPEN_FILE_VALUES[6] = {S(     0,     0), S(     0,     0), S(     0,     0), S(    38,   -16), S(     7,     0), S(   -42,     8)};

constexpr SCORE_TYPE PIECE_THREATS[6][6] = {
        {S(    14,   -53), S(    52,    28), S(    43,    43), S(    51,    32), S(    22,    39), S(     0,     0)},
        {S(    -6,    13), S(     0,     0), S(    31,    15), S(    51,     7), S(    18,    63), S(     0,     0)},
        {S(    -2,    16), S(    14,    22), S(    27,    -5), S(    58,    16), S(    37,    63), S(     0,     0)},
        {S(    -9,    20), S(     6,    15), S(     7,    14), S(   -16,    23), S(    55,   -17), S(     0,     0)},
        {S(    -1,    11), S(     1,    -3), S(    -6,    23), S(    -3,     1), S(   -14,     6), S(   189,  -139)},
        {S(    68,    15), S(    12,     7), S(    43,     6), S(    36,    -9), S(     0,     0), S(     0,     0)}
};


constexpr SCORE_TYPE KING_RING_ATTACKS[2][6] = {
        {S(    21,    -8), S(    16,    -8), S(    25,    -3), S(    17,    -4), S(    22,    -2), S(     0,     0)},
        {S(    13,    -5), S(    13,    -1), S(    16,    -1), S(     6,     1), S(    15,     0), S(     0,     0)}
};


constexpr SCORE_TYPE TOTAL_KING_RING_ATTACKS[40] = {S(    33,    19), S(    17,   -18), S(    -2,   -11), S(    -9,   -14), S(   -18,   -12), S(   -31,    -4), S(   -36,    -4), S(   -38,    -6), S(   -36,    -9), S(   -38,    -8), S(   -41,    -4), S(   -41,    -7), S(   -29,    -9), S(   -28,    -8), S(   -23,   -12), S(   -41,    -2), S(   -27,    -4), S(   -24,    -1), S(    -5,   -12), S(     9,    -6), S(   -27,     9), S(     5,    -6), S(    31,   -11), S(   -39,    32), S(    53,   -26), S(    28,    32), S(    42,    24), S(   -67,    49), S(   139,   -22), S(   178,   -50), S(     6,    50), S(    87,    48), S(    -2,   -57), S(   -15,    95), S(   262,   187), S(   -96,   -94), S(    67,    11), S(    67,   -15), S(    58,    55), S(   131,    38)};

constexpr SCORE_TYPE KING_PAWN_SHIELD[5][8] = {
        {S(   -15,    -7), S(    34,    -9), S(    30,   -11), S(     0,     0), S(     0,     0), S(    10,    -3), S(    23,   -16), S(     4,    -5)},
        {S(    33,    -7), S(    37,   -12), S(    -7,     2), S(     0,     0), S(     0,     0), S(    -1,   -13), S(     4,   -18), S(    12,    -5)},
        {S(     5,    -4), S(    -9,     1), S(   -25,    13), S(     0,     0), S(     0,     0), S(     4,   -15), S(    -4,   -13), S(     8,   -13)},
        {S(    14,    -2), S(    -1,    13), S(    35,    10), S(     0,     0), S(     0,     0), S(    -8,     2), S(    -8,    -1), S(    -7,   -10)},
        {S(   -19,     4), S(   -22,    -3), S(   -21,     3), S(     0,     0), S(     0,     0), S(   -19,     2), S(   -36,     7), S(   -29,     7)}
};


constexpr SCORE_TYPE KING_PAWN_STORM[6][8] = {
        {S(    68,    21), S(   263,   -36), S(   226,   -16), S(     0,     0), S(     0,     0), S(    40,    11), S(    89,    44), S(   219,   -24)},
        {S(   -26,    22), S(   -91,    30), S(   -62,    50), S(     0,     0), S(     0,     0), S(   -29,     0), S(  -105,    28), S(     5,     4)},
        {S(    14,    16), S(    11,     7), S(   -17,     9), S(     0,     0), S(     0,     0), S(     4,     5), S(    19,   -16), S(    -6,    -4)},
        {S(    -8,     3), S(    -7,     0), S(   -10,     6), S(     0,     0), S(     0,     0), S(    -5,    -3), S(     9,    -9), S(    -5,     5)},
        {S(    -3,     5), S(    16,    -4), S(    -5,     6), S(     0,     0), S(     0,     0), S(     1,    -8), S(    10,    -8), S(    -7,    -5)},
        {S(    -4,    -5), S(   -36,     3), S(    -1,    -2), S(     0,     0), S(     0,     0), S(     5,    -1), S(   -17,     1), S(   -15,    -1)}
};


constexpr SCORE_TYPE OPP_KING_TROPISM[6] = {S(     0,     0), S(     0,    -2), S(     3,     0), S(    -4,     4), S(    -7,     1), S(     0,     0)};

constexpr SCORE_TYPE OUR_KING_TROPISM[6] = {S(     0,     0), S(    -1,    -2), S(    -4,     0), S(     1,     0), S(     3,     0), S(     0,     0)};

constexpr SCORE_TYPE DOUBLED_PAWN_PENALTY = S(   -23,   -23);

constexpr SCORE_TYPE SQUARE_OF_THE_PAWN = S(     7,     1);

constexpr SCORE_TYPE BACKWARDS_PAWN_PENALTY[2] = {S(   -10,     0), S(   -16,   -16)};

constexpr SCORE_TYPE PASSED_OUR_DISTANCE[8] = {S(     0,     0), S(    -2,     2), S(     1,    -1), S(     7,    -6), S(    21,   -12), S(    -1,   -10), S(     8,   -18), S(     0,     0)};

constexpr SCORE_TYPE PASSED_OPP_DISTANCE[8] = {S(     0,     0), S(    16,    -9), S(    10,    -7), S(    11,     1), S(    -9,    16), S(     2,    22), S(   -14,    14), S(     0,     0)};





#endif //ALTAIRCHESSENGINE_EVALUATION_CONSTANTS_H
